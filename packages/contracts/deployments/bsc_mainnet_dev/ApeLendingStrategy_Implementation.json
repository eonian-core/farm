{
  "address": "0x2536d530221B5383e2E6AA1C0F05F84A79FD7579",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "needDisableInitializers",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CallerIsNotAVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CannotWorkNow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "HealthCheckFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatibleCTokenContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncompatiblePriceFeeds",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "code",
          "type": "uint256"
        }
      ],
      "name": "MintError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PayableWorkNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "code",
          "type": "uint256"
        }
      ],
      "name": "RedeemError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_givenTime",
          "type": "uint256"
        }
      ],
      "name": "TimeMinimumBetweenExecutionsIncorrect",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnsupportedDecimals",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtThreshold",
          "type": "uint256"
        }
      ],
      "name": "DebtThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "estimatedWorkGas",
          "type": "uint256"
        }
      ],
      "name": "EstimatedWorkGasUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outstandingDebt",
          "type": "uint256"
        }
      ],
      "name": "Harvested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "HealthCheckChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "HealthCheckEnabledChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitFactor",
          "type": "uint256"
        }
      ],
      "name": "UpdatedProfitFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "Worked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BANANA",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PANCAKE_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAIN_MAKER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WBNB",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cToken",
      "outputs": [
        {
          "internalType": "contract ICToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canWork",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositedBalanceSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedTotalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimatedWorkGas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthCheck",
      "outputs": [
        {
          "internalType": "contract IHealthCheck",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "healthCheckEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ops",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeTokenPriceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetPriceFeed",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minReportInterval",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isPrepaid",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPrepaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastWorkTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBananaToSell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBetweenExecutions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "contract IOps",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pancakeRouter",
      "outputs": [
        {
          "internalType": "contract IPancakeRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payableWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rainMaker",
      "outputs": [
        {
          "internalType": "contract IRainMaker",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_debtThreshold",
          "type": "uint256"
        }
      ],
      "name": "setDebtThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimatedWorkGas",
          "type": "uint256"
        }
      ],
      "name": "setEstimatedWorkGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_healthCheck",
          "type": "address"
        }
      ],
      "name": "setHealthCheck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_healthCheckEnabled",
          "type": "bool"
        }
      ],
      "name": "setHealthCheckEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minBananaToSell",
          "type": "uint256"
        }
      ],
      "name": "setMinBananaToSell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profitFactor",
          "type": "uint256"
        }
      ],
      "name": "setProfitFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeFromLastExecution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "work",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2faf7e1000713b7a709db98a8a3881e7eff08fd4e83754be2ea320c374d19473",
  "receipt": {
    "to": null,
    "from": "0x53F57933B8169E555789AEfB92a73e810E5dB5a6",
    "contractAddress": "0x2536d530221B5383e2E6AA1C0F05F84A79FD7579",
    "transactionIndex": 55,
    "gasUsed": "3932587",
    "logsBloom": "0x
    "blockHash": "0xe48222111215502e5a1fed73581a1db9e04d43c8014847e6e679cc81300814c4",
    "transactionHash": "0x2faf7e1000713b7a709db98a8a3881e7eff08fd4e83754be2ea320c374d19473",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 28907515,
        "transactionHash": "0x2faf7e1000713b7a709db98a8a3881e7eff08fd4e83754be2ea320c374d19473",
        "address": "0x2536d530221B5383e2E6AA1C0F05F84A79FD7579",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 146,
        "blockHash": "0xe48222111215502e5a1fed73581a1db9e04d43c8014847e6e679cc81300814c4"
      }
    ],
    "blockNumber": 28907515,
    "cumulativeGasUsed": "9454529",
    "status": 1,
    "byzantium": true
  },
  "args": [
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "188ebcefbe2f97d1b387bbb68a213921",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"needDisableInitializers\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallerIsNotAVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotWorkNow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"HealthCheckFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatibleCTokenContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncompatiblePriceFeeds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"MintError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PayableWorkNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"code\",\"type\":\"uint256\"}],\"name\":\"RedeemError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_givenTime\",\"type\":\"uint256\"}],\"name\":\"TimeMinimumBetweenExecutionsIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedDecimals\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtThreshold\",\"type\":\"uint256\"}],\"name\":\"DebtThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedWorkGas\",\"type\":\"uint256\"}],\"name\":\"EstimatedWorkGasUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outstandingDebt\",\"type\":\"uint256\"}],\"name\":\"Harvested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"HealthCheckChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"HealthCheckEnabledChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitFactor\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"Worked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BANANA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PANCAKE_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAIN_MAKER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBNB\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cToken\",\"outputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositedBalanceSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedTotalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimatedWorkGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthCheck\",\"outputs\":[{\"internalType\":\"contract IHealthCheck\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"healthCheckEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ops\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeTokenPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetPriceFeed\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minReportInterval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPrepaid\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPrepaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWorkTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBananaToSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBetweenExecutions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"contract IOps\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pancakeRouter\",\"outputs\":[{\"internalType\":\"contract IPancakeRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payableWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rainMaker\",\"outputs\":[{\"internalType\":\"contract IRainMaker\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_debtThreshold\",\"type\":\"uint256\"}],\"name\":\"setDebtThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimatedWorkGas\",\"type\":\"uint256\"}],\"name\":\"setEstimatedWorkGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_healthCheck\",\"type\":\"address\"}],\"name\":\"setHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_healthCheckEnabled\",\"type\":\"bool\"}],\"name\":\"setHealthCheckEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBananaToSell\",\"type\":\"uint256\"}],\"name\":\"setMinBananaToSell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitFactor\",\"type\":\"uint256\"}],\"name\":\"setProfitFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeFromLastExecution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"canWork()\":{\"details\":\"Will be executed by keeper and before `work` method execution.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"depositedBalance()\":{\"details\":\"Unlike the snapshot function, this function recalculates the value of the deposit.\"},\"depositedBalanceSnapshot()\":{\"details\":\"The exchange rate is recalculated at the last time someone touched the cToken contract.      Transactions are not performed too often on this contract, perhaps we should consider recalculating the rate ourselves.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDebtThreshold(uint256)\":{\"params\":{\"_debtThreshold\":\"The new debt threshold value.\"}},\"setEstimatedWorkGas(uint256)\":{\"params\":{\"_estimatedWorkGas\":\"The estimated \\\"work\\\" gas value.\"}},\"setHealthCheck(address)\":{\"details\":\"Emits the \\\"HealthCheckChanged\\\" event.\",\"params\":{\"_healthCheck\":\"A new health check contract address.\"}},\"setHealthCheckEnabled(bool)\":{\"details\":\"Emits the \\\"HealthCheckEnabledChanged\\\" event. Do not disable the health check, unless you need to perform \\\"report\\\" in an emergency.\",\"params\":{\"_healthCheckEnabled\":\"If \\\"true\\\" - health check will be disabled.\"}},\"setProfitFactor(uint256)\":{\"params\":{\"_profitFactor\":\"The new profit factor value.\"}},\"timeFromLastExecution()\":{\"returns\":{\"_0\":\"seconds from last execution in a range of 900 seconds\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"returns\":{\"_0\":\"a version in semantic versioning format\"}},\"withdraw(uint256)\":{\"params\":{\"assets\":\"A amount of tokens to withdraw.\"},\"returns\":{\"loss\":\"A number of tokens that the strategy could not return.\"}},\"work()\":{\"details\":\"`nonReentrant` modifier might be excess there, since we have `isTimePassFromLastExecution` check and `refreshLastWorkTime` at start (see `onlyWhenCanWork` modifier). Let's keep it, as `canWork` can be overridden.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"errors\":{\"CannotWorkNow()\":[{\"notice\":\"Someone tried to execute work function while `canWork` is `false`\"}],\"PayableWorkNotAllowed()\":[{\"notice\":\"Contract expect work will be prepayd, so it cannot pay for work\"}],\"TimeMinimumBetweenExecutionsIncorrect(uint256)\":[{\"notice\":\"Given time minimum between execution must be greater then 1000\"}]},\"events\":{\"Worked(address)\":{\"notice\":\"Job work function was executed by worker bot\"}},\"kind\":\"user\",\"methods\":{\"asset()\":{\"notice\":\"Returns the contract address of the underlying asset of this strategy.\"},\"canWork()\":{\"notice\":\"If work can be executed by keeper at this moment returns true\"},\"checker()\":{\"notice\":\"Resolver checker that says if the work can be performed and with what params.\"},\"debtThreshold()\":{\"notice\":\"Use this to adjust the threshold at which running a debt causes a work trigger.\"},\"depositedBalance()\":{\"notice\":\"Returns current deposited balance (in asset).\"},\"depositedBalanceSnapshot()\":{\"notice\":\"Returns current deposited balance (in asset).\"},\"estimatedTotalAssets()\":{\"notice\":\"Estimates the total amount of strategy funds (including those invested in the base protocol).\"},\"estimatedWorkGas()\":{\"notice\":\"The estimated amount of gas required for the \\\"work\\\" execution.\"},\"isPrepaid()\":{\"notice\":\"If job is prepaid, then it not will try to pay on executed work.\"},\"lastWorkTime()\":{\"notice\":\"Timestamp of last work execution block in seconds.\"},\"minBananaToSell()\":{\"notice\":\"Minimum BANANA token amount to sell.\"},\"minimumBetweenExecutions()\":{\"notice\":\"Mininmal time which must pass between executions of the job in seconds. Better set hours, but at least set to greater then 900 seconds, node opperators able to manipulate timestamp in 900 seconds range, on some blockchains maybe bigger.\"},\"name()\":{\"notice\":\"Returns the name of this strategy.\"},\"payableWork()\":{\"notice\":\"Bot will call this method when `checker` returns `true`. Will pay caller `_doWork` method stay as it is, to allow a call off-chain\"},\"profitFactor()\":{\"notice\":\"Shows how many times the gas price spent for the \\\"work\\\" function should be lower than the profit to trigger.\"},\"setDebtThreshold(uint256)\":{\"notice\":\"Sets the debt threshold.\"},\"setEstimatedWorkGas(uint256)\":{\"notice\":\"Sets the estimated gas that will be required for \\\"work\\\" function.\"},\"setHealthCheck(address)\":{\"notice\":\"Sets the health check implementation contract.\"},\"setHealthCheckEnabled(bool)\":{\"notice\":\"Enables or disables the health check.\"},\"setMinBananaToSell(uint256)\":{\"notice\":\"Sets the minimum number of BANANA tokens that must be on the contract to sell.\"},\"setProfitFactor(uint256)\":{\"notice\":\"Sets the profit factor.\"},\"shutdown()\":{\"notice\":\"Shutdown the strategy and revoke it form the vault.\"},\"timeFromLastExecution()\":{\"notice\":\"Time that passed since the last exection\"},\"vault()\":{\"notice\":\"Returns the contract address of the Vault to which this strategy is connected.\"},\"version()\":{\"notice\":\"Returns the current version of this contract\"},\"withdraw(uint256)\":{\"notice\":\"Transfers a specified amount of tokens to the vault.\"},\"work()\":{\"notice\":\"A handle that allows the `_doWork` function to be invoked externally by everyone. Perform a `canWork` check to avoid unnecessary and (maybe) malicious calls.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/strategies/ApeLendingStrategy.sol\":\"ApeLendingStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":contracts/=src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0xb8d68221343ed784c7b76edb6a686cb65e49c476d9e22bb89a5c0c3947ff14db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x1599637b52d20dc3954cea44914b2a4a9a8a5caade58d9da947e0b6c9acc07ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcaa8b7861115ea691c77ddbeac140a444e0edcd1d9812a43942c0f6b42b36a49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"src/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {ILender} from \\\"./lending/ILender.sol\\\";\\nimport {IERC4626} from \\\"./tokens/IERC4626.sol\\\";\\n\\ninterface IVault is ILender, IERC4626 {\\n    /// @notice Revokes a strategy from the vault.\\n    ///         Sets strategy's dept ratio to zero, so that the strategy cannot take funds from the vault.\\n    /// @param strategy a strategy to revoke.\\n    function revokeStrategy(address strategy) external;\\n\\n    /// @notice Indicates if the vault was shutted down or not.\\n    /// @return \\\"true\\\" if the contract is paused, and \\\"false\\\" otherwise.\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x98f31c4dddc397d2917363ba3497f2bd45fff7110b1a682c368eb3684cd1b734\",\"license\":\"AGPL-3.0\"},\"src/automation/GelatoJobAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {Job} from \\\"./Job.sol\\\";\\nimport {IResolver} from \\\"./gelato/IResolver.sol\\\";\\nimport {OpsReady} from \\\"./gelato/OpsReady.sol\\\";\\n\\n/// @notice Contract expect work will be prepayd, so it cannot pay for work\\nerror PayableWorkNotAllowed();\\n\\n/// @title Implementation of the mixin that adds support for Gelato (keepers operator)\\nabstract contract GelatoJobAdapter is Job, IResolver, OpsReady {\\n    /// @notice If job is prepaid, then it not will try to pay on executed work.\\n    bool public isPrepaid;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    /**\\n     * @notice Constructor of Job adapter contract.\\n     * @param _ops - address of the Ops contract.\\n     * @param _minimumBetweenExecutions - required time which must pass between executions of the job in seconds.\\n     * @param _isPrepaid - If job is prepaid, then it not will try to pay on executed work\\n     */\\n    function __GelatoJobAdapter_init(\\n        address _ops,\\n        uint256 _minimumBetweenExecutions,\\n        bool _isPrepaid\\n    ) internal onlyInitializing {\\n        __OpsReady_init(_ops);\\n        __Job_init(_minimumBetweenExecutions);\\n\\n        __GelatoJobAdapter_init_unchained(_isPrepaid);\\n    }\\n\\n    /**\\n     * @notice Unchained constructor of Job adapter contract without rest of the contracts init\\n     * @param _isPrepaid - If job is prepaid, then it not will try to pay on executed work\\n     */\\n    function __GelatoJobAdapter_init_unchained(bool _isPrepaid)\\n        internal\\n        onlyInitializing\\n    {\\n        isPrepaid = _isPrepaid;\\n    }\\n\\n    /// @notice Resolver checker that says if the work can be performed and with what params.\\n    function checker()\\n        public\\n        view\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        canExec = canWork();\\n\\n        execPayload = abi.encodeWithSelector(\\n            isPrepaid ? this.work.selector : this.payableWork.selector\\n        );\\n    }\\n\\n    /// @notice Bot will call this method when `checker` returns `true`.\\n    /// Will pay caller\\n    /// `_doWork` method stay as it is, to allow a call off-chain\\n    function payableWork() public nonReentrant onlyOps {\\n        if (isPrepaid) {\\n            revert PayableWorkNotAllowed();\\n        }\\n\\n        _doWork();\\n\\n        // Check -> Effect -> Interaction\\n        // To prevent exploits pay only at the end of operations\\n        _payGalatoFee();\\n    }\\n}\\n\",\"keccak256\":\"0x5ea8fa8794b0534a23e7ecc9f9969ce048961dba0e9b86d2e2fa15043a7bf858\",\"license\":\"AGPL-3.0\"},\"src/automation/Job.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {SafeInitializable} from \\\"../upgradeable/SafeInitializable.sol\\\";\\n\\n/// Someone tried to execute work function while `canWork` is `false`\\nerror CannotWorkNow();\\n\\n/// Given time minimum between execution must be greater then 1000\\nerror TimeMinimumBetweenExecutionsIncorrect(uint256 _givenTime);\\n\\n/// @title Abstract contract by implementation of which\\n///  possible to make child contract support of one of keeper providers.\\n/// @notice This contract is only define interface,\\n///  for add support of specific provider need add specific mixin contract.\\nabstract contract Job is\\n    SafeInitializable,\\n    ContextUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /// Job work function was executed by worker bot\\n    event Worked(address indexed worker);\\n\\n    /// @notice Timestamp of last work execution block in seconds.\\n    /// @dev Logic of checking and manupulating execution must be only in this contract (not in child)\\n    ///  to control timestamp dependce vularability.\\n    /// Important: Expect all timestamp can be adgasted by miners.\\n    /// More info at: https://www.getsecureworld.com/blog/what-is-timestamp-dependence-vulnerability/\\n    uint256 public lastWorkTime;\\n\\n    /// @notice Mininmal time which must pass between executions of the job in seconds.\\n    /// Better set hours, but at least set to greater then 900 seconds,\\n    /// node opperators able to manipulate timestamp in 900 seconds range, on some blockchains maybe bigger.\\n    uint256 public minimumBetweenExecutions;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    /**\\n     * @notice Constructor of Job contract.\\n     * @param _minimumBetweenExecutions - required time which must pass between executions of the job in seconds.\\n     *  Set in hours to prevent block timestamp vularability\\n     */\\n    function __Job_init(uint256 _minimumBetweenExecutions)\\n        internal\\n        onlyInitializing\\n    {\\n        __Context_init();\\n        __ReentrancyGuard_init();\\n\\n        __Job_init_unchained(_minimumBetweenExecutions);\\n    }\\n\\n    /**\\n     * @notice Unchained constructor of Job contract without rest of the contracts init\\n     * @param _minimumBetweenExecutions - required time which must pass between executions of the job in seconds.\\n     *  Set in hours to prevent block timestamp vularability\\n     */\\n    function __Job_init_unchained(uint256 _minimumBetweenExecutions)\\n        internal\\n        onlyInitializing\\n    {\\n        _setMinimumBetweenExecutions(_minimumBetweenExecutions);\\n        // Not will set lastWorkTime to allow first work immediately after contract deploy\\n    }\\n\\n    // ------------------------------------------ Public methods  ------------------------------------------\\n\\n    /// @notice If work can be executed by keeper at this moment returns true\\n    /// @dev Will be executed by keeper and before `work` method execution.\\n    function canWork() public view returns (bool) {\\n        // TODO: Check the maximum delay between job executions (?)\\n        return\\n            isTimePassFromLastExecution(minimumBetweenExecutions) && _canWork();\\n    }\\n\\n    /// @notice allow execution only if `canWork` return true\\n    modifier onlyWhenCanWork() {\\n        if (!canWork()) {\\n            revert CannotWorkNow();\\n        }\\n        _;\\n    }\\n\\n    /// @notice A handle that allows the `_doWork` function to be invoked externally by everyone.\\n    /// Perform a `canWork` check to avoid unnecessary and (maybe) malicious calls.\\n    /// @dev `nonReentrant` modifier might be excess there, since we have `isTimePassFromLastExecution` check\\n    /// and `refreshLastWorkTime` at start (see `onlyWhenCanWork` modifier). Let's keep it, as `canWork` can be overridden.\\n    function work() public nonReentrant onlyWhenCanWork {\\n        _doWork();\\n    }\\n\\n    /// @notice Performs `_work` call and refreshes the last execution time.\\n    function _doWork() internal {\\n        // Refresh execution works like `nonReentrant` modifier if we have a `isTimePassFromLastExecution` check inside `canWork`.\\n        _refreshLastWorkTime();\\n\\n        // An important work that is meant to be executed by the keeper.\\n        _work();\\n\\n        emit Worked(msg.sender);\\n    }\\n\\n    // ------------------------------------------ Time check logic ------------------------------------------\\n\\n    /// @notice Set minimum time between executions.\\n    /// @param time - required time which must pass between executions of the job in seconds.\\n    /// Set in hours to prevent block timestamp vulnerability\\n    function _setMinimumBetweenExecutions(uint256 time) internal {\\n        if (time <= 1000) {\\n            revert TimeMinimumBetweenExecutionsIncorrect(time);\\n        }\\n\\n        minimumBetweenExecutions = time;\\n    }\\n\\n    /// @notice Time that passed since the last exection\\n    /// @return seconds from last execution in a range of 900 seconds\\n    function timeFromLastExecution() public view returns (uint256) {\\n        // lastWorkTime will be zero before first execution\\n        return block.timestamp - lastWorkTime; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /// @notice Set time of last execution to current block\\n    function _refreshLastWorkTime() internal {\\n        lastWorkTime = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /// @notice Check if given time from last execution is passed\\n    /// @param second - amount of time which mast pass from last execution\\n    /// @return true if enough time pass\\n    function isTimePassFromLastExecution(uint256 second)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return timeFromLastExecution() > second;\\n    }\\n\\n    // ------------------------------------------ Busines methods to override  ------------------------------\\n\\n    /// @notice Method which will be executed by keeper\\n    function _work() internal virtual;\\n\\n    /// @notice Method which identify if work can be executed at this moment.\\n    /// @dev Will be executed by keeper and before `work` method execution.\\n    /// @return true if `work` method can be called.\\n    function _canWork() internal view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x3e28f226d865d339ce3196d76e24615836dcc0b22f0dca100f4e1d5939217077\",\"license\":\"AGPL-3.0\"},\"src/automation/gelato/BackCombatibleTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @notice Library that adding support for ERC20 and native tokens transfers.\\n/// @dev Based of https://github.com/gelatodigital/ops/blob/9a9cde6ab2f1b132b949f9244fd59a1de4da4123/contracts/vendor/gelato/FGelato.sol\\nlibrary BackCombatibleTransfer {\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice Backcombatible transfer to given address, will use ERC20 transfer if given token is ERC20.\\n    function backCombatibleTransfer(\\n        address payable to,\\n        address paymentToken,\\n        uint256 amount\\n    ) internal {\\n        if (paymentToken == ETH) {\\n            safeNativeTransfer(to, amount);\\n            return;\\n        }\\n\\n        SafeERC20.safeTransfer(IERC20(paymentToken), to, amount);\\n    }\\n\\n    /// @notice Native token transfer that checks `call` result.\\n    function safeNativeTransfer(address payable to, uint256 amount) internal {\\n        // We don't use `transfer` or `send`, as they are considered bad practices after the Istanbul hardfork.\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Native transfer failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x0debd54c5d04e40f29297ae47f301a9c0538e0d4dc8b1f7df47c833505e11b64\",\"license\":\"AGPL-3.0\"},\"src/automation/gelato/IOps.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\n/// @dev Based on https://github.com/gelatodigital/ops\\ninterface IOps {\\n    function gelato() external view returns (address payable);\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n}\\n\",\"keccak256\":\"0x0d26babf5ed2eb2c7626200f82db5a1154159ba71b2252ff5bf978d48e5bfb1c\",\"license\":\"AGPL-3.0\"},\"src/automation/gelato/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\n/// @dev Copy of https://github.com/gelatodigital/ops/blob/9a9cde6ab2f1b132b949f9244fd59a1de4da4123/contracts/interfaces/IResolver.sol\\ninterface IResolver {\\n    function checker()\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload);\\n}\\n\",\"keccak256\":\"0x6a6f08d64c65c718cb9042bb22f2f38c971e6c8aa604a4e9b2c76b0453de0a53\",\"license\":\"AGPL-3.0\"},\"src/automation/gelato/OpsReady.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IOps} from \\\"./IOps.sol\\\";\\nimport {BackCombatibleTransfer} from \\\"./BackCombatibleTransfer.sol\\\";\\n\\nimport {SafeInitializable} from \\\"../../upgradeable/SafeInitializable.sol\\\";\\n\\n/// Based on https://github.com/gelatodigital/ops/blob/9a9cde6ab2f1b132b949f9244fd59a1de4da4123/contracts/vendor/gelato/OpsReady.sol\\n/// @notice Give basic methods to pay for Gelato operations.\\nabstract contract OpsReady is SafeInitializable {\\n    IOps public ops;\\n    address payable public gelato;\\n\\n    using BackCombatibleTransfer for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    modifier onlyOps() {\\n        require(msg.sender == address(ops), \\\"OpsReady: onlyOps\\\");\\n        _;\\n    }\\n \\n    /**\\n     * Contructor of contract which will be able to communicate with Gelato protocol\\n     * @param _ops - address of the Ops contract.\\n     * @dev addresses can be found at https://docs.gelato.network/developer-products/gelato-ops-smart-contract-automation-hub/contract-addresses\\n     */\\n    function __OpsReady_init(address _ops) internal onlyInitializing {\\n        ops = IOps(_ops);\\n        gelato = ops.gelato();\\n    }\\n\\n    /// @notice Will pay bot for executed task through galato\\n    function _payGalatoFee() internal {\\n        (uint256 fee, address feeToken) = ops.getFeeDetails();\\n\\n        gelato.backCombatibleTransfer(feeToken, fee);\\n    }\\n}\\n\",\"keccak256\":\"0x1931463ced103ac3f065327fb403cc371b5ef05613a665d0c99f1b270fb48feb\",\"license\":\"AGPL-3.0\"},\"src/healthcheck/HealthChecker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {IHealthCheck} from \\\"./IHealthCheck.sol\\\";\\nimport {SafeInitializable} from \\\"../upgradeable/SafeInitializable.sol\\\";\\n\\nerror HealthCheckFailed();\\n\\nabstract contract HealthChecker is SafeInitializable, OwnableUpgradeable {\\n    event HealthCheckChanged(address);\\n    event HealthCheckEnabledChanged(bool);\\n\\n    IHealthCheck public healthCheck;\\n    bool public healthCheckEnabled;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    function __HealthChecker_init(address _healthCheck)\\n        internal\\n        onlyInitializing\\n    {\\n        __Ownable_init();\\n\\n        __HealthChecker_init_unchained(_healthCheck);\\n    }\\n\\n    function __HealthChecker_init_unchained(address _healthCheck)\\n        internal\\n        onlyInitializing\\n    {\\n        setHealthCheck(_healthCheck);\\n        setHealthCheckEnabled(true);\\n    }\\n\\n    /// @notice Sets the health check implementation contract.\\n    /// @param _healthCheck A new health check contract address.\\n    /// @dev Emits the \\\"HealthCheckChanged\\\" event.\\n    function setHealthCheck(address _healthCheck) public onlyOwner {\\n        healthCheck = IHealthCheck(_healthCheck);\\n        emit HealthCheckChanged(_healthCheck);\\n    }\\n\\n    /// @notice Enables or disables the health check.\\n    /// @param _healthCheckEnabled If \\\"true\\\" - health check will be disabled.\\n    /// @dev Emits the \\\"HealthCheckEnabledChanged\\\" event.\\n    /// Do not disable the health check, unless you need to perform \\\"report\\\" in an emergency.\\n    function setHealthCheckEnabled(bool _healthCheckEnabled) public onlyOwner {\\n        healthCheckEnabled = _healthCheckEnabled;\\n        emit HealthCheckEnabledChanged(_healthCheckEnabled);\\n    }\\n\\n    /// @notice Performs the health check by calling external contract.\\n    /// @param strategy Address of the strategy to be checked.\\n    /// @param profit The amount of funds that the strategy realised as profit.\\n    /// @param loss The amount of funds that the strategy realised as loss.\\n    /// @param debtPayment The amount of funds that the strategy spent to pay the debt.\\n    /// @param debtOutstanding Outstanding strategy debt.\\n    /// @param totalDebt The total amount of funds borrowed by the strategy from the vault.\\n    function performHealthCheck(\\n        address strategy,\\n        uint256 profit,\\n        uint256 loss,\\n        uint256 debtPayment,\\n        uint256 debtOutstanding,\\n        uint256 totalDebt\\n    ) internal virtual {\\n        // No health check implementation provided, skip the execution.\\n        if (address(healthCheck) == address(0)) {\\n            return;\\n        }\\n\\n        // There is usually no reason to turn off health checks.\\n        // But sometimes it may be necessary if we need to call a \\\"report\\\" manually.\\n        // If this happens, we should turn it on again.\\n        if (!healthCheckEnabled) {\\n            setHealthCheckEnabled(true);\\n            return;\\n        }\\n\\n        // Perform the health check, revert the transaction if unsuccessful.\\n        bool success = healthCheck.check(\\n            strategy,\\n            profit,\\n            loss,\\n            debtPayment,\\n            debtOutstanding,\\n            totalDebt\\n        );\\n        if (!success) {\\n            revert HealthCheckFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35c4b1d774c9ec06ee9dc82bb8ef2eee24c77fcdb80009ac2d179d58328d7b27\",\"license\":\"AGPL-3.0\"},\"src/healthcheck/IHealthCheck.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IHealthCheck {\\n    /// @notice Checks the overall state of the strategy\\n    /// @param strategy Address of the strategy to be checked.\\n    /// @param profit The amount of funds that the strategy realised as profit.\\n    /// @param loss The amount of funds that the strategy realised as loss.\\n    /// @param debtPayment The amount of funds that the strategy spent to pay the debt.\\n    /// @param debtOutstanding Outstanding strategy debt.\\n    /// @param totalDebt The total amount of funds borrowed by the strategy from the vault.\\n    /// @return The status of a completed health check.\\n    function check(\\n        address strategy,\\n        uint256 profit,\\n        uint256 loss,\\n        uint256 debtPayment,\\n        uint256 debtOutstanding,\\n        uint256 totalDebt\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x217348f26fc1aaea039d2736e29256bd136bc7d310817cdd2c9f3154b0c1b475\",\"license\":\"AGPL-3.0\"},\"src/lending/ILender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface ILender {\\n    /// @notice Returns the number of tokens the borrower (caller of this function) can take from the lender\\n    /// @return Available credit as amount of tokens\\n    function availableCredit() external view returns (uint256);\\n\\n    /// @notice Returns the outstanding debt that the borrower (caller of this function) must repay\\n    /// @return Outstanding debt as amount of tokens\\n    function outstandingDebt() external view returns (uint256);\\n\\n    /// @notice Returns the amount of funds taken by the borrower (caller of this function).\\n    /// @return Debt as amount of tokens\\n    function currentDebt() external view returns (uint256);\\n\\n    /// @notice Returns the debt ratio of the borrower (caller of this function).\\n    function currentDebtRatio() external view returns (uint256);\\n\\n    /// @notice Returns the last report timestamp of the borrower (caller of this function).\\n    function lastReport() external view returns (uint256);\\n\\n    /// @notice Returns the activation status of the borrower (caller of this function).\\n    /// @return \\\"true\\\" if the borrower is active\\n    function isActivated() external view returns (bool);\\n\\n    /// @notice Reports a positive result of the borrower's debt management.\\n    ///         Borrower must call this function if he has made any profit\\n    ///         or/and has a free funds available to repay the outstanding debt (if any).\\n    /// @param extraFreeFunds an extra amount of free funds borrower's contract has.\\n    ///                       This reporting amount must be greater than the borrower's outstanding debt.\\n    /// @param debtPayment is the funds that the borrower must release in order to pay off his outstanding debt (if any).\\n    function reportPositiveDebtManagement(\\n        uint256 extraFreeFunds,\\n        uint256 debtPayment\\n    ) external;\\n\\n    /// @notice Reports a negative result of the borrower's debt management.\\n    ///         The borrower must call this function if he is unable to cover his outstanding debt or if he has incurred any losses.\\n    /// @param loss a number of tokens by which the borrower's balance has decreased since the last report.\\n    ///        May include a portion of the outstanding debt that the borrower was unable to repay.\\n    /// @param debtPayment is the funds that the borrower must release in order to pay off his outstanding debt (if any).\\n    function reportNegativeDebtManagement(uint256 loss, uint256 debtPayment)\\n        external;\\n}\\n\",\"keccak256\":\"0x98405a336e0625385695fa8b1389b6dd35c289d38bcb06b347682088d87dd33b\",\"license\":\"AGPL-3.0\"},\"src/strategies/ApeLendingStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {MathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport {BaseStrategy} from \\\"./BaseStrategy.sol\\\";\\nimport {ICToken} from \\\"./protocols/ICToken.sol\\\";\\nimport {IPancakeRouter} from  \\\"./protocols/IPancakeRouter.sol\\\";\\nimport {IRainMaker} from \\\"./protocols/IRainMaker.sol\\\";\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\nimport {IVault} from \\\"../IVault.sol\\\";\\n\\nimport {IVersionable} from \\\"../upgradeable/IVersionable.sol\\\";\\nimport {SafeInitializable} from \\\"../upgradeable/SafeInitializable.sol\\\";\\nimport {SafeUUPSUpgradeable} from \\\"../upgradeable/SafeUUPSUpgradeable.sol\\\";\\n\\nerror IncompatibleCTokenContract();\\nerror UnsupportedDecimals();\\nerror MintError(uint256 code);\\nerror RedeemError(uint256 code);\\n\\ncontract ApeLendingStrategy is SafeUUPSUpgradeable, BaseStrategy {\\n    uint256 private constant SECONDS_PER_BLOCK = 3;\\n    uint256 private constant REWARD_ESTIMATION_ACCURACY = 90;\\n\\n    address public constant BANANA = 0x603c7f932ED1fc6575303D8Fb018fDCBb0f39a95;\\n    address public constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n    address public constant RAIN_MAKER = 0x5CB93C0AdE6B7F2760Ec4389833B0cCcb5e4efDa;\\n    address public constant PANCAKE_ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\\n\\n    /// @notice Minimum BANANA token amount to sell.\\n    uint256 public minBananaToSell;\\n\\n    ICToken public cToken;\\n    IPancakeRouter public pancakeRouter;\\n    IRainMaker public rainMaker;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /// @inheritdoc IVersionable\\n    function version() external pure override returns (string memory) {\\n        return \\\"0.1.3\\\";\\n    }\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(bool needDisableInitializers) SafeInitializable(needDisableInitializers) {} // solhint-disable-line no-empty-blocks\\n\\n    function initialize(\\n        address _vault,\\n        address _cToken,\\n        address _ops,\\n        address _nativeTokenPriceFeed,\\n        address _assetPriceFeed,\\n        uint256 _minReportInterval,\\n        bool _isPrepaid\\n    ) public initializer {\\n        __SafeUUPSUpgradeable_init_direct();\\n        __BaseStrategy_init(\\n            IVault(_vault),\\n            _ops,\\n            _minReportInterval,\\n            _isPrepaid,\\n            _nativeTokenPriceFeed,\\n            _assetPriceFeed,\\n            address(0)\\n        ); // ownable under the hood\\n\\n        __ApeLendingStrategy_init_unchained(_cToken);\\n    }\\n\\n    function __ApeLendingStrategy_init_unchained(address _cToken) internal onlyInitializing {\\n        cToken = ICToken(_cToken);\\n        pancakeRouter = IPancakeRouter(PANCAKE_ROUTER);\\n        rainMaker = IRainMaker(RAIN_MAKER);\\n\\n        if (cToken.decimals() != 8 || _assetDecimals != 18) {\\n            revert UnsupportedDecimals();\\n        }\\n\\n        if (cToken.underlying() != address(asset)) {\\n            revert IncompatibleCTokenContract();\\n        }\\n\\n        minBananaToSell = 0.1 ether;\\n\\n        approveTokenMax(BANANA, PANCAKE_ROUTER);\\n        approveTokenMax(address(asset), _cToken);\\n    }\\n\\n    /// @notice Sets the minimum number of BANANA tokens that must be on the contract to sell.\\n    function setMinBananaToSell(uint256 _minBananaToSell) external onlyOwner {\\n        minBananaToSell = _minBananaToSell;\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function name() external view returns (string memory) {\\n        return\\n            string.concat(\\n                IERC20MetadataUpgradeable(address(asset)).symbol(),\\n                \\\" ApeLending Strategy\\\"\\n            );\\n    }\\n\\n    /// @inheritdoc BaseStrategy\\n    function estimatedTotalAssets() public view override returns (uint256) {\\n        return\\n            asset.balanceOf(address(this)) +\\n            depositedBalanceSnapshot() +\\n            _totalBananaBalanceInAsset();\\n    }\\n\\n    /// @notice Returns current deposited balance (in asset).\\n    /// @dev The exchange rate is recalculated at the last time someone touched the cToken contract.\\n    ///      Transactions are not performed too often on this contract, perhaps we should consider recalculating the rate ourselves.\\n    function depositedBalanceSnapshot() public view returns (uint256) {\\n        (, uint256 cTokenBalance, , uint256 exchangeRate) = cToken\\n            .getAccountSnapshot(address(this));\\n\\n        // Since every ApeSwap's cToken has 8 decimals, we can leave 1e18 as constant here.\\n        return (cTokenBalance * exchangeRate) / 1e18;\\n    }\\n\\n    /// @notice Returns current deposited balance (in asset).\\n    /// @dev Unlike the snapshot function, this function recalculates the value of the deposit.\\n    function depositedBalance() public returns (uint256) {\\n        return cToken.balanceOfUnderlying(address(this));\\n    }\\n\\n    /// @notice This function makes a prediction on how much BANANA is accrued per block.\\n    /// @dev It is not completely accurate because it uses the current protocol balance to predict into the past.\\n    function _estimatedAccruedBananaPerBlock() internal view returns (uint256) {\\n        uint256 _depositedBalance = depositedBalanceSnapshot();\\n        if (_depositedBalance == 0) {\\n            return 0; // should be impossible to have 0 balance and positive comp accrued\\n        }\\n        uint256 distributionPerBlock = rainMaker.compSupplySpeeds(\\n            address(cToken)\\n        );\\n        uint256 totalSupply = (cToken.totalSupply() *\\n            cToken.exchangeRateStored()) / 1e18;\\n        return\\n            totalSupply > 0\\n                ? (_depositedBalance * distributionPerBlock) / totalSupply\\n                : 0;\\n    }\\n\\n    /// @notice This function makes a prediction on how much BANANA is accrued.\\n    /// @dev It is not completely accurate because it uses the current protocol balance to predict into the past.\\n    function _estimatedAccruedBanana() internal view returns (uint256) {\\n        uint256 bananaPerBlock = _estimatedAccruedBananaPerBlock();\\n        if (bananaPerBlock == 0) {\\n            return 0;\\n        }\\n        uint256 blocksSinceLastHarvest = (block.timestamp - vault.lastReport()) / SECONDS_PER_BLOCK; // solhint-disable-line not-rely-on-time\\n        return blocksSinceLastHarvest * bananaPerBlock;\\n    }\\n\\n    /// @notice Returns the current banana balance of the strategy contract.\\n    function _currentBananaBalance() internal view returns (uint256) {\\n        return IERC20Upgradeable(BANANA).balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the current (and estimated accrued) banana balance of the strategy contract (in asset).\\n    /// @dev Constant REWARD_ESTIMATION_ACCURACY is used to match accuracy expectations.\\n    function _totalBananaBalanceInAsset() internal view returns (uint256) {\\n        uint256 balance = _currentBananaBalance() + _estimatedAccruedBanana();\\n        if (balance == 0) {\\n            return 0;\\n        }\\n        uint256[] memory amounts = pancakeRouter.getAmountsOut(\\n            balance,\\n            _tokenSwapPath(BANANA, address(asset))\\n        );\\n        uint256 amount = amounts[amounts.length - 1];\\n        return (amount * REWARD_ESTIMATION_ACCURACY) / 100;\\n    }\\n\\n    /// @notice Prepares a chain of tokens (pair or triplet) to pass it into the router contract.\\n    function _tokenSwapPath(address tokenIn, address tokenOut)\\n        internal\\n        pure\\n        returns (address[] memory path)\\n    {\\n        bool isWBNB = tokenIn == address(WBNB) || tokenOut == address(WBNB);\\n        path = new address[](isWBNB ? 2 : 3);\\n        path[0] = tokenIn;\\n\\n        if (isWBNB) {\\n            path[1] = tokenOut;\\n        } else {\\n            path[1] = address(WBNB);\\n            path[2] = tokenOut;\\n        }\\n    }\\n\\n    /// @notice Retrieves accrued BANANA from the protocol.\\n    function _claimBanana() internal {\\n        ICToken[] memory tokens = new ICToken[](1);\\n        tokens[0] = cToken;\\n        rainMaker.claimComp(address(this), tokens);\\n    }\\n\\n    /// @notice Changes the existing BANANA on the contract to an asset token.\\n    function _swapBananaToAsset() internal {\\n        uint256 bananaBalance = IERC20Upgradeable(BANANA).balanceOf(\\n            address(this)\\n        );\\n        if (bananaBalance < minBananaToSell) {\\n            return;\\n        }\\n\\n        pancakeRouter.swapExactTokensForTokens(\\n            bananaBalance,\\n            0,\\n            _tokenSwapPath(BANANA, address(asset)),\\n            address(this),\\n            block.timestamp // solhint-disable-line not-rely-on-time\\n        );\\n    }\\n\\n    /// @inheritdoc BaseStrategy\\n    function _harvest(uint256 outstandingDebt)\\n        internal\\n        override\\n        returns (\\n            uint256 profit,\\n            uint256 loss,\\n            uint256 debtPayment\\n        )\\n    {\\n        profit = 0;\\n        loss = 0;\\n\\n        // No positions to harvest, allocate available funds to pay the debt (if any)\\n        if (cToken.balanceOf(address(this)) == 0) {\\n            debtPayment = MathUpgradeable.min(\\n                asset.balanceOf(address(this)),\\n                outstandingDebt\\n            );\\n            return (profit, loss, debtPayment);\\n        }\\n\\n        uint256 deposits = depositedBalance();\\n\\n        _claimBanana();\\n        _swapBananaToAsset();\\n\\n        uint256 assetBalance = asset.balanceOf(address(this));\\n        uint256 balance = deposits + assetBalance;\\n\\n        uint256 debt = vault.currentDebt();\\n\\n        if (balance > debt) {\\n            profit = balance - debt;\\n            if (assetBalance < profit) {\\n                debtPayment = MathUpgradeable.min(\\n                    assetBalance,\\n                    outstandingDebt\\n                );\\n                profit = assetBalance - debtPayment;\\n            } else if (assetBalance > profit + outstandingDebt) {\\n                debtPayment = outstandingDebt;\\n            } else {\\n                debtPayment = assetBalance - profit;\\n            }\\n        } else {\\n            loss = debt - balance;\\n            debtPayment = MathUpgradeable.min(assetBalance, outstandingDebt);\\n        }\\n    }\\n\\n    /// @inheritdoc BaseStrategy\\n    function _adjustPosition(uint256 outstandingDebt) internal override {\\n        if (paused()) {\\n            return;\\n        }\\n\\n        uint256 assetBalance = asset.balanceOf(address(this));\\n        if (assetBalance < outstandingDebt) {\\n            // We compare the balance with 1 because of rounding error\\n            if (cToken.balanceOf(address(this)) > 1) {\\n                _liquidatePosition(outstandingDebt - assetBalance);\\n            }\\n            return;\\n        }\\n\\n        uint256 freeBalance = assetBalance - outstandingDebt;\\n        if (freeBalance > 0) {\\n            uint256 result = cToken.mint(freeBalance);\\n            if (result > 0) {\\n                revert MintError(result);\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc BaseStrategy\\n    /// @dev Tagged with the keyword \\\"virtual\\\" for testing purposes.\\n    function _liquidatePosition(uint256 assets)\\n        internal\\n        virtual\\n        override\\n        returns (uint256 liquidatedAmount, uint256 loss)\\n    {\\n        uint256 assetBalance = asset.balanceOf(address(this));\\n        if (assetBalance < assets) {\\n            uint256 deposits = depositedBalance();\\n            uint256 amountToRedeem = MathUpgradeable.min(deposits, assets);\\n            uint256 result = cToken.redeemUnderlying(amountToRedeem);\\n            if (result > 0) {\\n                revert RedeemError(result);\\n            }\\n            liquidatedAmount = amountToRedeem;\\n            loss = assets - liquidatedAmount;\\n        } else {\\n            liquidatedAmount = assets;\\n        }\\n    }\\n\\n    /// @inheritdoc BaseStrategy\\n    function _liquidateAllPositions()\\n        internal\\n        override\\n        returns (uint256 amountFreed)\\n    {\\n        uint256 amountToRedeem = depositedBalance();\\n        uint256 result = cToken.redeemUnderlying(amountToRedeem);\\n        if (result > 0) {\\n            revert RedeemError(result);\\n        }\\n        amountFreed = amountToRedeem;\\n    }\\n}\\n\",\"keccak256\":\"0x266073aa61295df8b480a02629750b673567cfd8a7c6c9abb290b832645eaf11\",\"license\":\"AGPL-3.0\"},\"src/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {IStrategy} from \\\"./IStrategy.sol\\\";\\nimport {IVault} from \\\"../IVault.sol\\\";\\nimport {GelatoJobAdapter} from \\\"../automation/GelatoJobAdapter.sol\\\";\\nimport {Job} from \\\"../automation/Job.sol\\\";\\nimport {HealthChecker} from \\\"../healthcheck/HealthChecker.sol\\\";\\nimport {PriceConverter} from \\\"../structures/PriceConverter.sol\\\";\\n\\nimport {SafeInitializable} from \\\"../upgradeable/SafeInitializable.sol\\\";\\n\\nerror CallerIsNotAVault();\\nerror IncompatiblePriceFeeds();\\n\\nabstract contract BaseStrategy is\\n    IStrategy,\\n    SafeInitializable,\\n    GelatoJobAdapter,\\n    HealthChecker,\\n    PausableUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using PriceConverter for AggregatorV3Interface;\\n\\n    IVault public vault;\\n    IERC20Upgradeable public asset;\\n\\n    /// @notice Use this to adjust the threshold at which running a debt causes a work trigger.\\n    uint256 public debtThreshold;\\n\\n    /// @notice The estimated amount of gas required for the \\\"work\\\" execution.\\n    uint256 public estimatedWorkGas;\\n\\n    /// @notice Shows how many times the gas price spent for the \\\"work\\\" function should be lower than the profit to trigger.\\n    uint256 public profitFactor;\\n\\n    /// @notice The USD price feed for the native token of the network on which this strategy works.\\n    AggregatorV3Interface internal _nativeTokenPriceFeed;\\n\\n    /// @notice The USD price feed for the strategy asset.\\n    AggregatorV3Interface internal _assetPriceFeed;\\n\\n    /// @notice The underlying asset's decimals.\\n    uint256 internal _assetDecimals;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    event Harvested(\\n        uint256 profit,\\n        uint256 loss,\\n        uint256 debtPayment,\\n        uint256 outstandingDebt\\n    );\\n\\n    event DebtThresholdUpdated(uint256 debtThreshold);\\n\\n    event EstimatedWorkGasUpdated(uint256 estimatedWorkGas);\\n\\n    event UpdatedProfitFactor(uint256 profitFactor);\\n\\n    modifier onlyVault() {\\n        if (msg.sender != address(vault)) {\\n            revert CallerIsNotAVault();\\n        }\\n        _;\\n    }\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    function __BaseStrategy_init(\\n        IVault _vault,\\n        address _ops,\\n        uint256 _minReportInterval,\\n        bool _isPrepaid,\\n        address __nativeTokenPriceFeed,\\n        address __assetPriceFeed,\\n        address _healthCheck\\n    ) internal onlyInitializing {\\n        __HealthChecker_init(_healthCheck); // ownable under the hood\\n        __Pausable_init();\\n        __GelatoJobAdapter_init(_ops, _minReportInterval, _isPrepaid);\\n\\n        __BaseStrategy_init_unchained(\\n            _vault,\\n            __nativeTokenPriceFeed,\\n            __assetPriceFeed\\n        );\\n    }\\n\\n    function __BaseStrategy_init_unchained(\\n        IVault _vault,\\n        address __nativeTokenPriceFeed,\\n        address __assetPriceFeed\\n    ) internal onlyInitializing {\\n        vault = _vault;\\n        asset = IVault(vault).asset();\\n\\n        debtThreshold = 0;\\n        estimatedWorkGas = 0;\\n        profitFactor = 100;\\n\\n        _nativeTokenPriceFeed = AggregatorV3Interface(__nativeTokenPriceFeed);\\n        _assetPriceFeed = AggregatorV3Interface(__assetPriceFeed);\\n        if (_nativeTokenPriceFeed.decimals() != _assetPriceFeed.decimals()) {\\n            revert IncompatiblePriceFeeds();\\n        }\\n\\n        _assetDecimals = IERC20MetadataUpgradeable(address(asset)).decimals();\\n\\n        approveTokenMax(address(asset), address(_vault));\\n    }\\n\\n    /// @notice Harvests the strategy, recognizing any profits or losses and adjusting the strategy's investments.\\n    /// @inheritdoc Job\\n    function _work() internal override {\\n        uint256 profit = 0;\\n        uint256 loss = 0;\\n        uint256 debtPayment = 0;\\n\\n        uint256 outstandingDebt = vault.outstandingDebt();\\n        if (paused()) {\\n            (profit, loss, debtPayment) = _harvestAfterShutdown(\\n                outstandingDebt\\n            );\\n        } else {\\n            (profit, loss, debtPayment) = _harvest(outstandingDebt);\\n        }\\n\\n        if (profit > 0) {\\n            vault.reportPositiveDebtManagement(profit, debtPayment);\\n        } else {\\n            vault.reportNegativeDebtManagement(loss, debtPayment);\\n        }\\n\\n        // If the strategy needs to repay the entire debt, we need to take all available funds.\\n        // We will take the current debt in the report above, but we still need to free up whatever is left.\\n        // This can happen, if the ratio is reduced to 0 or if the vault has been shutted down.\\n        outstandingDebt = vault.outstandingDebt();\\n        outstandingDebt = vault.currentDebtRatio() == 0 || vault.paused()\\n            ? estimatedTotalAssets()\\n            : outstandingDebt;\\n\\n        _adjustPosition(outstandingDebt);\\n\\n        uint256 totalDebt = vault.currentDebt();\\n        performHealthCheck(\\n            address(this),\\n            profit,\\n            loss,\\n            debtPayment,\\n            outstandingDebt,\\n            totalDebt\\n        );\\n\\n        emit Harvested(profit, loss, debtPayment, outstandingDebt);\\n    }\\n\\n    /// @inheritdoc Job\\n    function _canWork() internal view override returns (bool) {\\n        if (!vault.isActivated()) {\\n            return false;\\n        }\\n\\n        // Trigger this job if the strategy has the outstanding debt to repay\\n        uint256 outstanding = vault.outstandingDebt();\\n        if (outstanding > debtThreshold) {\\n            return true;\\n        }\\n\\n        // Trigger this job if the strategy has some loss to report\\n        uint256 total = estimatedTotalAssets();\\n        uint256 debt = vault.currentDebt();\\n        if (total + debtThreshold < debt) {\\n            return true;\\n        }\\n\\n        // Estimate accumulated profit\\n        uint256 profit = 0;\\n        if (total > debt) {\\n            profit = total - debt;\\n        }\\n\\n        // Check the gas cost againts the profit and available credit.\\n        // There is no sense to call the \\\"work\\\" function, if we don't have decent amount of funds to move.\\n        return _checkGasPriceAgainstProfit(profit);\\n    }\\n\\n    /// @notice Calculates the gas price of this transaction and compares it againts the specified profit.\\n    /// @param profit Profit to be compared to the cost of gas.\\n    /// @return \\\"true\\\" if the gas price (mult. to \\\"profitFactor\\\" is lower than the strategy profit, in USD).\\n    function _checkGasPriceAgainstProfit(uint256 profit) internal view returns (bool) {\\n        uint256 credit = vault.availableCredit();\\n        uint256 gasCost = _gasPriceUSD() * estimatedWorkGas;\\n        return profitFactor * gasCost < _convertAmountToUSD(credit + profit);\\n    }\\n\\n    /// @inheritdoc IStrategy\\n    function withdraw(uint256 assets) external override onlyVault returns (uint256 loss) { // Vault already have nonReentrant modifier check\\n        // Liquidate the requested amount of tokens\\n        uint256 amountFreed;\\n        (amountFreed, loss) = _liquidatePosition(assets);\\n\\n        // Send it directly back to the vault\\n        IERC20Upgradeable(asset).safeTransfer(msg.sender, amountFreed);\\n    }\\n\\n    /// @notice Shutdown the strategy and revoke it form the vault.\\n    function shutdown() external nonReentrant onlyOwner { // need check nonReentrant to avoid cyclic call\\n        _pause();\\n        IVault(vault).revokeStrategy(address(this));\\n    }\\n\\n    /// @notice Sets the debt threshold.\\n    /// @param _debtThreshold The new debt threshold value.\\n    function setDebtThreshold(uint256 _debtThreshold) external onlyOwner {\\n        debtThreshold = _debtThreshold;\\n        emit DebtThresholdUpdated(_debtThreshold);\\n    }\\n\\n    /// @notice Sets the estimated gas that will be required for \\\"work\\\" function.\\n    /// @param _estimatedWorkGas The estimated \\\"work\\\" gas value.\\n    function setEstimatedWorkGas(uint256 _estimatedWorkGas) external onlyOwner {\\n        estimatedWorkGas = _estimatedWorkGas;\\n        emit EstimatedWorkGasUpdated(_estimatedWorkGas);\\n    }\\n\\n    /// @notice Sets the profit factor.\\n    /// @param _profitFactor The new profit factor value.\\n    function setProfitFactor(uint256 _profitFactor) external onlyOwner {\\n        profitFactor = _profitFactor;\\n        emit UpdatedProfitFactor(_profitFactor);\\n    }\\n\\n    /// @notice Frees up as much funds of the base protocol as possible.\\n    /// @dev This function is called on harvest if the strategy was shutted down.\\n    /// @param outstandingDebt The outstanding debt of the strategy.\\n    function _harvestAfterShutdown(uint256 outstandingDebt)\\n        internal\\n        virtual\\n        returns (\\n            uint256 profit,\\n            uint256 loss,\\n            uint256 debtPayment\\n        )\\n    {\\n        uint256 amountFreed = _liquidateAllPositions();\\n        if (amountFreed < outstandingDebt) {\\n            loss = outstandingDebt - amountFreed;\\n        } else if (amountFreed > outstandingDebt) {\\n            profit = amountFreed - outstandingDebt;\\n        }\\n        debtPayment = outstandingDebt - loss;\\n    }\\n\\n    /// @notice Calculates the gas price of the current transaction (in USD).\\n    function _gasPriceUSD() internal view returns (uint256) {\\n        return _nativeTokenPriceFeed.convertAmount(tx.gasprice, 18);\\n    }\\n\\n    /// @notice Calculates the pice of the specified amount of \\\"asset\\\" (in USD).\\n    function _convertAmountToUSD(uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _assetPriceFeed.convertAmount(amount, _assetDecimals);\\n    }\\n\\n    /// @notice Sets the max token allowance for the specified spender.\\n    function approveTokenMax(address token, address spender) internal {\\n        IERC20Upgradeable(token).safeApprove(spender, type(uint256).max);\\n    }\\n\\n    /// @notice Estimates the total amount of strategy funds (including those invested in the base protocol).\\n    function estimatedTotalAssets() public view virtual returns (uint256);\\n\\n    /// @notice The main function of the strategy.\\n    /// By calling this function, the strategy must realize (take out) the possible profits from the underlying protocol.\\n    function _harvest(uint256 outstandingDebt)\\n        internal\\n        virtual\\n        returns (\\n            uint256 profit,\\n            uint256 loss,\\n            uint256 debtPayment\\n        );\\n\\n    /// @notice Performs the deposit of the free funds to the underlying protocol.\\n    function _adjustPosition(uint256 outstandingDebt) internal virtual;\\n\\n    /// @notice Withdraws the specific amount of \\\"asset\\\" from the underlying protocol.\\n    /// @param assets The amount of token to withdraw.\\n    /// @return liquidatedAmount Withdrawn amount\\n    /// @return loss The amount that could not be withdrawn\\n    function _liquidatePosition(uint256 assets)\\n        internal\\n        virtual\\n        returns (uint256 liquidatedAmount, uint256 loss);\\n\\n    /// @notice Withdraws the entire invested amount from the underlying protocol.\\n    function _liquidateAllPositions()\\n        internal\\n        virtual\\n        returns (uint256 amountFreed);\\n}\\n\",\"keccak256\":\"0xaea53e140c07f0df157452a867a7bb02f059f0ba254c981b83064660791edf2d\",\"license\":\"AGPL-3.0\"},\"src/strategies/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IVault} from \\\"../IVault.sol\\\";\\n\\ninterface IStrategy {\\n    /// @notice Returns the name of this strategy.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the contract address of the underlying asset of this strategy.\\n    function asset() external view returns (IERC20Upgradeable);\\n\\n    /// @notice Returns the contract address of the Vault to which this strategy is connected.\\n    function vault() external view returns (IVault);\\n\\n    /// @notice Transfers a specified amount of tokens to the vault.\\n    /// @param assets A amount of tokens to withdraw.\\n    /// @return loss A number of tokens that the strategy could not return.\\n    function withdraw(uint256 assets) external returns (uint256 loss);\\n}\\n\",\"keccak256\":\"0x775f2bb369ebe1c7aa4463000c8cfeb7a3cd75d9c2f19cce5f6f2f78644bfe1c\",\"license\":\"AGPL-3.0\"},\"src/strategies/protocols/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\n/// @notice Interface for Compound-like market (or vault in common terms), that allows to deposit and borrow tokens.\\ninterface ICToken {\\n    function decimals() external returns (uint8);\\n\\n    function underlying() external returns (address);\\n\\n    function transfer(address dst, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function supplyRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function seize(\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount)\\n        external\\n        returns (uint256);\\n\\n    function liquidateBorrow(\\n        address borrower,\\n        uint256 repayAmount,\\n        ICToken cTokenCollateral\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xa8077dc8ebf75795290ddfb72fe00a5bdfc97ec033078281b955db83e54f67dd\",\"license\":\"AGPL-3.0\"},\"src/strategies/protocols/IPancakeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\n/// @notice Interface for Uniswap-like exchange router.\\ninterface IPancakeRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x0fb720f036533a2281bb78f92c75a67dca11b9e49e3aef3919e7fc1cf53e9edb\",\"license\":\"AGPL-3.0\"},\"src/strategies/protocols/IRainMaker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {ICToken} from \\\"./ICToken.sol\\\";\\n\\n/// @notice Interface for a compound-like controller used to control incentivized tokens received during interaction with the protocol.\\ninterface IRainMaker {\\n    struct CompMarketState {\\n        /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n        uint224 index;\\n        /// @notice The block number the index was last updated at\\n        uint32 block;\\n    }\\n\\n    function compSupplierIndex(address, address)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function compSpeeds(address cToken) external view returns (uint256);\\n\\n    function compSupplySpeeds(address cToken) external view returns (uint256);\\n\\n    function compBorrowSpeeds(address cToken) external view returns (uint256);\\n\\n    function claimComp(address holder, ICToken[] memory cTokens) external;\\n\\n    function claimComp(address holder) external;\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    function compSupplyState(address cToken)\\n        external\\n        view\\n        returns (CompMarketState memory);\\n}\\n\",\"keccak256\":\"0x294f30c7c1d7bd584a8945c1634193be68c1aabd98544292ca914a2fcc20f2a6\",\"license\":\"AGPL-3.0\"},\"src/structures/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport {SafeMathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary PriceConverter {\\n    using SafeMathUpgradeable for uint256;\\n\\n    uint256 public constant DEFAULT_DECIMALS = 18;\\n\\n    /// @notice Calculates the price of the specified number of tokens.\\n    /// @dev This function allow us to compare the price of the tokens with different decimals.\\n    /// @param priceFeed The Chainlink's price feed aggregator.\\n    /// @param amount Number of tokens, the value of which needs to be calculated.\\n    /// @param decimals Decimals of the specified token.\\n    /// @return The calculated price of the tokens, denominated by \\\"decimals\\\".\\n    function convertAmount(\\n        AggregatorV3Interface priceFeed,\\n        uint256 amount,\\n        uint256 decimals\\n    ) internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        uint256 priceFeedDecimals = priceFeed.decimals();\\n        (, uint256 upToDecimals) = uint256(DEFAULT_DECIMALS).trySub(\\n            priceFeedDecimals\\n        );\\n        return (amount * uint256(price) * 10**upToDecimals) / 10**decimals;\\n    }\\n}\\n\",\"keccak256\":\"0x977d4a1f0ea5349dcead2a3f8d1cd0bca9046adc76edbcaf64560d5faeeca1e6\",\"license\":\"AGPL-3.0\"},\"src/tokens/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ERC4626 complient Vault interface\\ninterface IERC4626 {\\n    /// @notice The underlying token managed by the Vault. Has units defined by the corresponding ERC-20 contract.\\n    /// Stored as address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n    function asset() external view returns (IERC20Upgradeable);\\n}\\n\",\"keccak256\":\"0x96fc9f01da0fe6c44d58caf2a47a48505b658a8159706dfe19529f2f2f59b7c2\",\"license\":\"AGPL-3.0\"},\"src/upgradeable/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\n/** \\n * Allow properly identify different versions of the same contract \\n * and track upgrades results \\n * */\\ninterface IVersionable  {\\n    /// @notice Returns the current version of this contract\\n    /// @return a version in semantic versioning format\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x13e08376fa8013858c0031556eaae03e4c8d517597cb5f0524040ef36a7c9006\",\"license\":\"AGPL-3.0\"},\"src/upgradeable/SafeInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\n\\n/** Implement best practices for initializable contracts */\\nabstract contract SafeInitializable is IVersionable, Initializable {\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /**\\n     * This constructor prevents UUPS Uninitialized Proxies Vulnerability in all contracts which inherit from it.\\n     * More info about vulnerability: https://medium.com/immunefi/wormhole-uninitialized-proxy-bugfix-review-90250c41a43a\\n     * \\n     * @dev Initial fix for this vulnerability was suggested as using `_disableInitializers()` function in constructor,\\n     *  but later, in version 4.3.2, OpenZeppelin implemented `onlyProxy` modifier for UUPS upgradable contracts,\\n     *  which fixed this vulnerability. Still, `_disableInitializers()` is a best practice which prevents unintended access \\n     *  to implementation contracts that can be used maliciously.\\n     *  \\n     *  More info: https://forum.openzeppelin.com/t/how-to-test-upgradeability-for-proxies/33436/7 \\n     *      and https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680\\n     * \\n     * To prevent code duplication of constructor, this contract can be used. On the other hand, \\n     * it can be used as a marker for contracts that are safe from this vulnerability.\\n     * Additionally, `needDisableInitializers` parameter can be used to enable initializers in mocks and unit tests.\\n     *\\n     * @param needDisableInitializers - if true, initializers will be disabled\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(bool needDisableInitializers) {\\n        if(needDisableInitializers) {\\n            _disableInitializers();\\n        }\\n    }\\n}\",\"keccak256\":\"0xece22d8416967bebd1c1008f135e19224ed4afe81e30204fbf3b2d97c73db8b6\",\"license\":\"AGPL-3.0\"},\"src/upgradeable/SafeUUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {SafeInitializable} from \\\"./SafeInitializable.sol\\\";\\n\\n/** \\n * Implement basic safety mechanism for UUPS proxy\\n * based on owner authorization for upgrades\\n * */\\nabstract contract SafeUUPSUpgradeable is UUPSUpgradeable, SafeInitializable, OwnableUpgradeable {\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /** Init all required constructors, including ownable */\\n    function __SafeUUPSUpgradeable_init() internal onlyInitializing {\\n        __SafeUUPSUpgradeable_init_direct();\\n\\n        __Ownable_init();\\n    }\\n\\n    /** Init only direct constructors, UUPS only */\\n    function __SafeUUPSUpgradeable_init_direct() internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /** Authorise that upgrades can do only owner */\\n    function _authorizeUpgrade(address newImplementation) internal onlyOwner override {} // solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0xaf322f5c5eeb718b7834b2eac8bfee7ce8062383840acc1d28b27351a759304e\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506040516200472638038062004726833981016040819052620000389162000114565b8080156200004a576200004a62000052565b50506200013f565b600054610100900460ff1615620000bf5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000112576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012757600080fd5b815180151581146200013857600080fd5b9392505050565b6080516145af62000177600039600081816109dc01528181610a2501528181610b7701528181610bb70152610c4a01526145af6000f3fe60806040526004361061027d5760003560e01c80638011cc9d1161014f578063c8b35c7a116100c1578063e70abe921161007a578063e70abe921461075f578063eb67821414610780578063efbb5cb014610795578063f2fde38b146107aa578063fbfa77cf146107ca578063fc0e74d1146107eb57600080fd5b8063c8b35c7a14610692578063cdb72659146106ba578063cee2b04e146106db578063cf5303cf146106fd578063d98a1c1714610720578063e08836dd1461073757600080fd5b806391397ab41161011357806391397ab4146105e657806391b00bd914610606578063b252720b1461061b578063c21ebd071461063c578063c2fa3cae1461065d578063c702ee871461067257600080fd5b80638011cc9d146105405780638cdfe166146105685780638da5cb5b1461057f5780638dd950021461059e5780638efdfe46146105c657600080fd5b806347f76df2116101f357806359cad75d116101ac57806359cad75d146104a45780635c975abb146104bb578063635005d6146104d45780636848d47d146104ea57806369e527da1461050a578063715018a61461052b57600080fd5b806347f76df2146104025780634f1ef2861461041857806352d1902d1461042b57806353c309de1461044057806354fd4d5014610455578063573ea5751461048357600080fd5b8063322e9f0411610245578063322e9f04146103345780633659cfe61461034957806338d52e0f14610369578063417a570d146103a257806344bfc6bf146103c257806347eb98a2146103d757600080fd5b806306fdde03146102825780630f969b87146102ad57806311bc8245146102cf5780631d12f28b146102ef5780632e1a7d4d14610314575b600080fd5b34801561028e57600080fd5b50610297610800565b6040516102a49190613cf9565b60405180910390f35b3480156102b957600080fd5b506102cd6102c8366004613d0c565b610897565b005b3480156102db57600080fd5b506102cd6102ea366004613d3a565b6108dc565b3480156102fb57600080fd5b506103066102615481565b6040519081526020016102a4565b34801561032057600080fd5b5061030661032f366004613d0c565b610933565b34801561034057600080fd5b506102cd610991565b34801561035557600080fd5b506102cd610364366004613d3a565b6109d2565b34801561037557600080fd5b506102605461038a906001600160a01b031681565b6040516001600160a01b0390911681526020016102a4565b3480156103ae57600080fd5b506102cd6103bd366004613d0c565b610aba565b3480156103ce57600080fd5b50610306610af8565b3480156103e357600080fd5b50610163546103f29060ff1681565b60405190151581526020016102a4565b34801561040e57600080fd5b5061030660fc5481565b6102cd610426366004613dc6565b610b6d565b34801561043757600080fd5b50610306610c3d565b34801561044c57600080fd5b506102cd610cf0565b34801561046157600080fd5b50604080518082019091526005815264302e312e3360d81b6020820152610297565b34801561048f57600080fd5b506101305461038a906001600160a01b031681565b3480156104b057600080fd5b506103066102625481565b3480156104c757600080fd5b5061022d5460ff166103f2565b3480156104e057600080fd5b5061030660fb5481565b3480156104f657600080fd5b506102cd610505366004613e67565b610d7c565b34801561051657600080fd5b5061029a5461038a906001600160a01b031681565b34801561053757600080fd5b506102cd610dd2565b34801561054c57600080fd5b5061038a735cb93c0ade6b7f2760ec4389833b0cccb5e4efda81565b34801561057457600080fd5b506103066102635481565b34801561058b57600080fd5b50610196546001600160a01b031661038a565b3480156105aa57600080fd5b5061038a73bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c81565b3480156105d257600080fd5b506102cd6105e1366004613d0c565b610de4565b3480156105f257600080fd5b506102cd610601366004613d0c565b610df2565b34801561061257600080fd5b50610306610e30565b34801561062757600080fd5b506101fa5461038a906001600160a01b031681565b34801561064857600080fd5b5061029b5461038a906001600160a01b031681565b34801561066957600080fd5b50610306610e40565b34801561067e57600080fd5b506102cd61068d366004613e84565b610ede565b34801561069e57600080fd5b5061038a73603c7f932ed1fc6575303d8fb018fdcbb0f39a9581565b3480156106c657600080fd5b5061029c5461038a906001600160a01b031681565b3480156106e757600080fd5b506101fa546103f290600160a01b900460ff1681565b34801561070957600080fd5b5061071261100f565b6040516102a4929190613f11565b34801561072c57600080fd5b506103066102995481565b34801561074357600080fd5b5061038a7310ed43c718714eb63d5aa57b78b54704e256024e81565b34801561076b57600080fd5b5061012f5461038a906001600160a01b031681565b34801561078c57600080fd5b506103f2611076565b3480156107a157600080fd5b50610306611092565b3480156107b657600080fd5b506102cd6107c5366004613d3a565b611125565b3480156107d657600080fd5b5061025f5461038a906001600160a01b031681565b3480156107f757600080fd5b506102cd61119b565b61026054604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b419160048083019260009291908290030181865afa15801561084b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108739190810190613f2c565b6040516020016108839190613f9a565b604051602081830303815290604052905090565b61089f61121b565b6102618190556040518181527fc9535537e8d84b9f2b1de4393633cf857ba693878894a0f280211615d850d7e8906020015b60405180910390a150565b6108e461121b565b6101fa80546001600160a01b0319166001600160a01b0383169081179091556040519081527f237b727bcd9a5527fd4043c1560a9bdf8eb934bc035e4656ee6e4bebca7a6b47906020016108d1565b61025f546000906001600160a01b031633146109625760405163348a645f60e11b815260040160405180910390fd5b600061096d83611276565b6102605490935090915061098b906001600160a01b031633836113c7565b50919050565b61099961142f565b6109a1611076565b6109be57604051630728f52160e21b815260040160405180910390fd5b6109c6611488565b6109d0600160c955565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a235760405162461bcd60e51b8152600401610a1a90613fd2565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a6c600080516020614533833981519152546001600160a01b031690565b6001600160a01b031614610a925760405162461bcd60e51b8152600401610a1a9061401e565b610a9b816114cd565b60408051600080825260208201909252610ab7918391906114d5565b50565b610ac261121b565b6102628190556040518181527f76a2e56642491d2ca27c5ad2ac9a12dc4264911b4ddcc90fc0b2c44fb2a01fea906020016108d1565b61029a54604051633af9e66960e01b81523060048201526000916001600160a01b031690633af9e669906024016020604051808303816000875af1158015610b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b68919061406a565b905090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610bb55760405162461bcd60e51b8152600401610a1a90613fd2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bfe600080516020614533833981519152546001600160a01b031690565b6001600160a01b031614610c245760405162461bcd60e51b8152600401610a1a9061401e565b610c2d826114cd565b610c39828260016114d5565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cdd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a1a565b5060008051602061453383398151915290565b610cf861142f565b61012f546001600160a01b03163314610d475760405162461bcd60e51b81526020600482015260116024820152704f707352656164793a206f6e6c794f707360781b6044820152606401610a1a565b6101635460ff1615610d6c576040516301b5ad6760e01b815260040160405180910390fd5b610d74611488565b6109c6611640565b610d8461121b565b6101fa8054821515600160a01b0260ff60a01b199091161790556040517f3723564e400cf869a1ec2a588cf7f8c3e1d7564a7e00d6ef949b251b90c93f69906108d190831515815260200190565b610dda61121b565b6109d060006116cc565b610dec61121b565b61029955565b610dfa61121b565b6102638190556040518181527fd94596337df4c2f0f44d30a7fc5db1c7bb60d9aca4185ed77c6fd96eb45ec298906020016108d1565b600060fb5442610b689190614099565b61029a546040516361bfb47160e11b8152306004820152600091829182916001600160a01b03169063c37f68e290602401608060405180830381865afa158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb291906140ac565b935050925050670de0b6b3a76400008183610ecd91906140e2565b610ed791906140f9565b9250505090565b600054610100900460ff1615808015610efe5750600054600160ff909116105b80610f185750303b158015610f18575060005460ff166001145b610f7b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a1a565b6000805460ff191660011790558015610f9e576000805461ff0019166101001790555b610fa661171f565b610fb6888785858989600061174e565b610fbf876117a5565b8015611005576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6000606061101b611076565b6101635490925060ff16611036576329e184ef60e11b61103f565b630c8ba7c160e21b5b6040805160048152602481019091526020810180516001600160e01b03166001600160e01b03199093169290921790915291929050565b600061108360fc546119b6565b8015610b685750610b686119c8565b600061109c611b96565b6110a4610e40565b610260546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611111919061406a565b61111b919061411b565b610b68919061411b565b61112d61121b565b6001600160a01b0381166111925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a1a565b610ab7816116cc565b6111a361142f565b6111ab61121b565b6111b3611cb4565b61025f5460405163177329a960e31b81523060048201526001600160a01b039091169063bb994d4890602401600060405180830381600087803b1580156111f957600080fd5b505af115801561120d573d6000803e3d6000fd5b505050506109d0600160c955565b610196546001600160a01b031633146109d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a1a565b610260546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a0823190602401602060405180830381865afa1580156112c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e8919061406a565b9050838110156113bd5760006112fc610af8565b9050600061130a8287611d0f565b61029a5460405163852a12e360e01b8152600481018390529192506000916001600160a01b039091169063852a12e3906024016020604051808303816000875af115801561135c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611380919061406a565b905080156113a4576040516305ee2ff160e11b815260048101829052602401610a1a565b81955085876113b39190614099565b94505050506113c1565b8392505b50915091565b6040516001600160a01b03831660248201526044810182905261142a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611d29565b505050565b600260c954036114815760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a1a565b600260c955565b6114914260fb55565b611499611dfb565b60405133907f8065c96ce68645eb5e1342fb74a5b4646b6712a1bb6a5e86280c1526eca8d25690600090a2565b600160c955565b610ab761121b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115085761142a836121e7565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611562575060408051601f3d908101601f1916820190925261155f9181019061406a565b60015b6115c55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a1a565b60008051602061453383398151915281146116345760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a1a565b5061142a838383612283565b61012f5460408051635c08631b60e11b8152815160009384936001600160a01b039091169263b810c63692600480830193928290030181865afa15801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116af919061412e565b610130549193509150610c39906001600160a01b031682846122ae565b61019680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166117465760405162461bcd60e51b8152600401610a1a9061415e565b6109d06122e8565b600054610100900460ff166117755760405162461bcd60e51b8152600401610a1a9061415e565b61177e8161230f565b611786612347565b611791868686612376565b61179c8784846123b8565b50505050505050565b600054610100900460ff166117cc5760405162461bcd60e51b8152600401610a1a9061415e565b61029a80546001600160a01b0383166001600160a01b0319918216811790925561029b805482167310ed43c718714eb63d5aa57b78b54704e256024e17905561029c8054909116735cb93c0ade6b7f2760ec4389833b0cccb5e4efda1790556040805163313ce56760e01b8152905163313ce5679160048082019260209290919082900301816000875af1158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c91906141a9565b60ff1660081415806118a2575061026654601214155b156118c057604051636a78e98160e11b815260040160405180910390fd5b6102605461029a5460408051636f307dc360e01b815290516001600160a01b039384169390921691636f307dc39160048082019260209290919082900301816000875af1158015611915573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193991906141cc565b6001600160a01b0316146119605760405163bd3cf18d60e01b815260040160405180910390fd5b67016345785d8a00006102995561199f73603c7f932ed1fc6575303d8fb018fdcbb0f39a957310ed43c718714eb63d5aa57b78b54704e256024e612639565b61026054610ab7906001600160a01b031682612639565b6000816119c1610e30565b1192915050565b61025f54604080516312a307ed60e21b815290516000926001600160a01b031691634a8c1fb49160048083019260209291908290030181865afa158015611a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3791906141e9565b611a415750600090565b61025f54604080516306f94a0d60e01b815290516000926001600160a01b0316916306f94a0d9160048083019260209291908290030181865afa158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab0919061406a565b905061026154811115611ac557600191505090565b6000611acf611092565b9050600061025f60009054906101000a90046001600160a01b03166001600160a01b031663759076e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4b919061406a565b9050806102615483611b5d919061411b565b1015611b6d576001935050505090565b600081831115611b8457611b818284614099565b90505b611b8d8161264f565b94505050505090565b600080611ba1612710565b611ba96127c9565b611bb3919061411b565b905080600003611bc557600091505090565b61029b54610260546000916001600160a01b039081169163d06ca61f918591611c049173603c7f932ed1fc6575303d8fb018fdcbb0f39a95911661281b565b6040518363ffffffff1660e01b8152600401611c2192919061424a565b600060405180830381865afa158015611c3e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c669190810190614263565b905060008160018351611c799190614099565b81518110611c8957611c89614309565b602002602001015190506064605a82611ca291906140e2565b611cac91906140f9565b935050505090565b611cbc6129b5565b61022d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cf23390565b6040516001600160a01b03909116815260200160405180910390a1565b6000818310611d1e5781611d20565b825b90505b92915050565b6000611d7e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129fc9092919063ffffffff16565b80519091501561142a5780806020019051810190611d9c91906141e9565b61142a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a1a565b60008060008061025f60009054906101000a90046001600160a01b03166001600160a01b03166306f94a0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e79919061406a565b9050611e8861022d5460ff1690565b15611ea257611e9681612a15565b91955093509150611eb3565b611eab81612a66565b919550935091505b8315611f245761025f5460405163dd723c1b60e01b815260048101869052602481018490526001600160a01b039091169063dd723c1b90604401600060405180830381600087803b158015611f0757600080fd5b505af1158015611f1b573d6000803e3d6000fd5b50505050611f8b565b61025f546040516339d97c5360e01b815260048101859052602481018490526001600160a01b03909116906339d97c5390604401600060405180830381600087803b158015611f7257600080fd5b505af1158015611f86573d6000803e3d6000fd5b505050505b61025f60009054906101000a90046001600160a01b03166001600160a01b03166306f94a0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612003919061406a565b905061025f60009054906101000a90046001600160a01b03166001600160a01b0316630baabd7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207d919061406a565b15806120fc575061025f60009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fc91906141e9565b612106578061210e565b61210e611092565b905061211981612cf9565b61025f546040805163759076e560e01b815290516000926001600160a01b03169163759076e59160048083019260209291908290030181865afa158015612164573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612188919061406a565b9050612198308686868686612eaf565b6040805186815260208101869052908101849052606081018390527f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d5099060800160405180910390a15050505050565b6001600160a01b0381163b6122545760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a1a565b60008051602061453383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61228c83612f9d565b6000825111806122995750805b1561142a576122a88383612fdd565b50505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038316016122dd5761142a83826130d1565b61142a8284836113c7565b600054610100900460ff166109d05760405162461bcd60e51b8152600401610a1a9061415e565b600054610100900460ff166123365760405162461bcd60e51b8152600401610a1a9061415e565b61233e61316d565b610ab78161319c565b600054610100900460ff1661236e5760405162461bcd60e51b8152600401610a1a9061415e565b6109d06131d6565b600054610100900460ff1661239d5760405162461bcd60e51b8152600401610a1a9061415e565b6123a68361320a565b6123af826132d3565b61142a81613313565b600054610100900460ff166123df5760405162461bcd60e51b8152600401610a1a9061415e565b61025f80546001600160a01b0319166001600160a01b038516908117909155604080516338d52e0f60e01b815290516338d52e0f916004808201926020929091908290030181865afa158015612439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245d91906141cc565b61026080546001600160a01b03199081166001600160a01b039384161790915560006102618190556102625560646102635561026480548216858416179055610265805490911691831691821790556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156124e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250b91906141a9565b60ff1661026460009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612562573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258691906141a9565b60ff16146125a7576040516362655f5160e01b815260040160405180910390fd5b61026060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261f91906141a9565b60ff16610266556102605461142a906001600160a01b0316845b610c396001600160a01b0383168260001961334e565b60008061025f60009054906101000a90046001600160a01b03166001600160a01b03166307cc692f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ca919061406a565b90506000610262546126da613463565b6126e491906140e2565b90506126f86126f3858461411b565b61347f565b816102635461270791906140e2565b10949350505050565b60008061271b61349f565b90508060000361272d57600091505090565b6000600361025f60009054906101000a90046001600160a01b03166001600160a01b031663c3535b526040518163ffffffff1660e01b8152600401602060405180830381865afa158015612785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a9919061406a565b6127b39042614099565b6127bd91906140f9565b9050610ed782826140e2565b6040516370a0823160e01b815230600482015260009073603c7f932ed1fc6575303d8fb018fdcbb0f39a95906370a0823190602401602060405180830381865afa158015610b44573d6000803e3d6000fd5b606060006001600160a01b03841673bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c148061286657506001600160a01b03831673bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c145b905080612874576003612877565b60025b60ff1667ffffffffffffffff81111561289257612892613d57565b6040519080825280602002602001820160405280156128bb578160200160208202803683370190505b50915083826000815181106128d2576128d2614309565b60200260200101906001600160a01b031690816001600160a01b031681525050801561293157828260018151811061290c5761290c614309565b60200260200101906001600160a01b031690816001600160a01b0316815250506129ae565b73bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c8260018151811061295957612959614309565b60200260200101906001600160a01b031690816001600160a01b031681525050828260028151811061298d5761298d614309565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5092915050565b61022d5460ff16156109d05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a1a565b6060612a0b8484600085613660565b90505b9392505050565b600080600080612a2361373d565b905084811015612a3e57612a378186614099565b9250612a53565b84811115612a5357612a508582614099565b93505b612a5d8386614099565b93959294505050565b61029a546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a0823190602401602060405180830381865afa158015612ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad8919061406a565b600003612b5b57610260546040516370a0823160e01b8152306004820152612b54916001600160a01b0316906370a0823190602401602060405180830381865afa158015612b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4e919061406a565b85611d0f565b9050612cf2565b6000612b65610af8565b9050612b6f6137e2565b612b77613899565b610260546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be5919061406a565b90506000612bf3828461411b565b9050600061025f60009054906101000a90046001600160a01b03166001600160a01b031663759076e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6f919061406a565b905080821115612cd457612c838183614099565b965086831015612caa57612c978389611d0f565b9450612ca38584614099565b9650612ced565b612cb4888861411b565b831115612cc357879450612ced565b612ccd8784614099565b9450612ced565b612cde8282614099565b9550612cea8389611d0f565b94505b505050505b9193909250565b61022d5460ff1615612d085750565b610260546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d76919061406a565b905081811015612e065761029a546040516370a0823160e01b81523060048201526001916001600160a01b0316906370a0823190602401602060405180830381865afa158015612dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dee919061406a565b1115610c39576122a8612e018284614099565b611276565b6000612e128383614099565b9050801561142a5761029a5460405163140e25ad60e31b8152600481018390526000916001600160a01b03169063a0712d68906024016020604051808303816000875af1158015612e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8b919061406a565b905080156122a857604051638c32d69360e01b815260048101829052602401610a1a565b6101fa546001600160a01b031615612f95576101fa54600160a01b900460ff16612ee257612edd6001610d7c565b612f95565b6101fa546040516301afebc160e21b81526001600160a01b0388811660048301526024820188905260448201879052606482018690526084820185905260a4820184905260009216906306bfaf049060c401602060405180830381865afa158015612f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7591906141e9565b90508061179c5760405163c196dcf360e01b815260040160405180910390fd5b505050505050565b612fa6816121e7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6130455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a1a565b600080846001600160a01b031684604051613060919061431f565b600060405180830381855af49150503d806000811461309b576040519150601f19603f3d011682016040523d82523d6000602084013e6130a0565b606091505b50915091506130c88282604051806060016040528060278152602001614553602791396139c7565b95945050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461311e576040519150601f19603f3d011682016040523d82523d6000602084013e613123565b606091505b505090508061142a5760405162461bcd60e51b815260206004820152601660248201527513985d1a5d99481d1c985b9cd9995c8819985a5b195960521b6044820152606401610a1a565b600054610100900460ff166131945760405162461bcd60e51b8152600401610a1a9061415e565b6109d06139e0565b600054610100900460ff166131c35760405162461bcd60e51b8152600401610a1a9061415e565b6131cc816108dc565b610ab76001610d7c565b600054610100900460ff166131fd5760405162461bcd60e51b8152600401610a1a9061415e565b61022d805460ff19169055565b600054610100900460ff166132315760405162461bcd60e51b8152600401610a1a9061415e565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040805163573ea57560e01b8152905163573ea575916004808201926020929091908290030181865afa15801561328b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132af91906141cc565b61013080546001600160a01b0319166001600160a01b039290921691909117905550565b600054610100900460ff166132fa5760405162461bcd60e51b8152600401610a1a9061415e565b6133026122e8565b61330a613a10565b610ab781613a3f565b600054610100900460ff1661333a5760405162461bcd60e51b8152600401610a1a9061415e565b610163805460ff1916911515919091179055565b8015806133c85750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156133a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c6919061406a565b155b6134335760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610a1a565b6040516001600160a01b03831660248201526044810182905261142a90849063095ea7b360e01b906064016113f3565b61026454600090610b68906001600160a01b03163a6012613a6f565b6102665461026554600091611d23916001600160a01b0316908490613a6f565b6000806134aa610e40565b9050806000036134bc57600091505090565b61029c5461029a54604051636aa875b560e01b81526001600160a01b0391821660048201526000929190911690636aa875b590602401602060405180830381865afa15801561350f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613533919061406a565b90506000670de0b6b3a764000061029a60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b8919061406a565b61029a60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561360c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613630919061406a565b61363a91906140e2565b61364491906140f9565b905060008111613655576000611cac565b80611ca283856140e2565b6060824710156136c15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a1a565b600080866001600160a01b031685876040516136dd919061431f565b60006040518083038185875af1925050503d806000811461371a576040519150601f19603f3d011682016040523d82523d6000602084013e61371f565b606091505b509150915061373087838387613b93565b925050505b949350505050565b600080613748610af8565b61029a5460405163852a12e360e01b8152600481018390529192506000916001600160a01b039091169063852a12e3906024016020604051808303816000875af115801561379a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137be919061406a565b9050801561098b576040516305ee2ff160e11b815260048101829052602401610a1a565b60408051600180825281830190925260009160208083019080368337505061029a5482519293506001600160a01b03169183915060009061382557613825614309565b6001600160a01b03928316602091820292909201015261029c5460405162e1ed9760e51b8152911690631c3db2e090613864903090859060040161433b565b600060405180830381600087803b15801561387e57600080fd5b505af1158015613892573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b815230600482015260009073603c7f932ed1fc6575303d8fb018fdcbb0f39a95906370a0823190602401602060405180830381865afa1580156138eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390f919061406a565b90506102995481101561391f5750565b61029b54610260546001600160a01b03918216916338ed173991849160009161395e9173603c7f932ed1fc6575303d8fb018fdcbb0f39a95911661281b565b30426040518663ffffffff1660e01b8152600401613980959493929190614397565b6000604051808303816000875af115801561399f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c399190810190614263565b606083156139d6575081612a0e565b612a0e8383613c08565b600054610100900460ff16613a075760405162461bcd60e51b8152600401610a1a9061415e565b6109d0336116cc565b600054610100900460ff16613a375760405162461bcd60e51b8152600401610a1a9061415e565b6109d0613c32565b600054610100900460ff16613a665760405162461bcd60e51b8152600401610a1a9061415e565b610ab781613c59565b600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015613ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad491906143f2565b5050509150506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3e91906141a9565b60ff1690506000613b50601283613c83565b9150613b5f905085600a614526565b613b6a82600a614526565b613b7485896140e2565b613b7e91906140e2565b613b8891906140f9565b979650505050505050565b60608315613c02578251600003613bfb576001600160a01b0385163b613bfb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a1a565b5081613735565b61373583835b815115613c185781518083602001fd5b8060405162461bcd60e51b8152600401610a1a9190613cf9565b600054610100900460ff166114c65760405162461bcd60e51b8152600401610a1a9061415e565b6103e88111613c7e5760405163034b4ee160e01b815260048101829052602401610a1a565b60fc55565b60008083831115613c9957506000905080613ca2565b50600190508183035b9250929050565b60005b83811015613cc4578181015183820152602001613cac565b50506000910152565b60008151808452613ce5816020860160208601613ca9565b601f01601f19169290920160200192915050565b602081526000611d206020830184613ccd565b600060208284031215613d1e57600080fd5b5035919050565b6001600160a01b0381168114610ab757600080fd5b600060208284031215613d4c57600080fd5b8135612a0e81613d25565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613d9657613d96613d57565b604052919050565b600067ffffffffffffffff821115613db857613db8613d57565b50601f01601f191660200190565b60008060408385031215613dd957600080fd5b8235613de481613d25565b9150602083013567ffffffffffffffff811115613e0057600080fd5b8301601f81018513613e1157600080fd5b8035613e24613e1f82613d9e565b613d6d565b818152866020838501011115613e3957600080fd5b816020840160208301376000602083830101528093505050509250929050565b8015158114610ab757600080fd5b600060208284031215613e7957600080fd5b8135612a0e81613e59565b600080600080600080600060e0888a031215613e9f57600080fd5b8735613eaa81613d25565b96506020880135613eba81613d25565b95506040880135613eca81613d25565b94506060880135613eda81613d25565b93506080880135613eea81613d25565b925060a0880135915060c0880135613f0181613e59565b8091505092959891949750929550565b8215158152604060208201526000612a0b6040830184613ccd565b600060208284031215613f3e57600080fd5b815167ffffffffffffffff811115613f5557600080fd5b8201601f81018413613f6657600080fd5b8051613f74613e1f82613d9e565b818152856020838501011115613f8957600080fd5b6130c8826020830160208601613ca9565b60008251613fac818460208701613ca9565b73204170654c656e64696e6720537472617465677960601b920191825250601401919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561407c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611d2357611d23614083565b600080600080608085870312156140c257600080fd5b505082516020840151604085015160609095015191969095509092509050565b8082028115828204841417611d2357611d23614083565b60008261411657634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611d2357611d23614083565b6000806040838503121561414157600080fd5b82519150602083015161415381613d25565b809150509250929050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156141bb57600080fd5b815160ff81168114612a0e57600080fd5b6000602082840312156141de57600080fd5b8151612a0e81613d25565b6000602082840312156141fb57600080fd5b8151612a0e81613e59565b600081518084526020808501945080840160005b8381101561423f5781516001600160a01b03168752958201959082019060010161421a565b509495945050505050565b828152604060208201526000612a0b6040830184614206565b6000602080838503121561427657600080fd5b825167ffffffffffffffff8082111561428e57600080fd5b818501915085601f8301126142a257600080fd5b8151818111156142b4576142b4613d57565b8060051b91506142c5848301613d6d565b81815291830184019184810190888411156142df57600080fd5b938501935b838510156142fd578451825293850193908501906142e4565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008251614331818460208701613ca9565b9190910192915050565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101561438957855185168352948301949183019160010161436b565b509098975050505050505050565b85815284602082015260a0604082015260006143b660a0830186614206565b6001600160a01b0394909416606083015250608001529392505050565b805169ffffffffffffffffffff811681146143ed57600080fd5b919050565b600080600080600060a0868803121561440a57600080fd5b614413866143d3565b9450602086015193506040860151925060608601519150614436608087016143d3565b90509295509295909350565b600181815b8085111561447d57816000190482111561446357614463614083565b8085161561447057918102915b93841c9390800290614447565b509250929050565b60008261449457506001611d23565b816144a157506000611d23565b81600181146144b757600281146144c1576144dd565b6001915050611d23565b60ff8411156144d2576144d2614083565b50506001821b611d23565b5060208310610133831016604e8410600b8410161715614500575081810a611d23565b61450a8383614442565b806000190482111561451e5761451e614083565b029392505050565b6000611d20838361448556fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e5bea3daf8c9014e1e82b4601dea2bccd89e2e649ecd9dc3ebb9d89933591c2064736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061027d5760003560e01c80638011cc9d1161014f578063c8b35c7a116100c1578063e70abe921161007a578063e70abe921461075f578063eb67821414610780578063efbb5cb014610795578063f2fde38b146107aa578063fbfa77cf146107ca578063fc0e74d1146107eb57600080fd5b8063c8b35c7a14610692578063cdb72659146106ba578063cee2b04e146106db578063cf5303cf146106fd578063d98a1c1714610720578063e08836dd1461073757600080fd5b806391397ab41161011357806391397ab4146105e657806391b00bd914610606578063b252720b1461061b578063c21ebd071461063c578063c2fa3cae1461065d578063c702ee871461067257600080fd5b80638011cc9d146105405780638cdfe166146105685780638da5cb5b1461057f5780638dd950021461059e5780638efdfe46146105c657600080fd5b806347f76df2116101f357806359cad75d116101ac57806359cad75d146104a45780635c975abb146104bb578063635005d6146104d45780636848d47d146104ea57806369e527da1461050a578063715018a61461052b57600080fd5b806347f76df2146104025780634f1ef2861461041857806352d1902d1461042b57806353c309de1461044057806354fd4d5014610455578063573ea5751461048357600080fd5b8063322e9f0411610245578063322e9f04146103345780633659cfe61461034957806338d52e0f14610369578063417a570d146103a257806344bfc6bf146103c257806347eb98a2146103d757600080fd5b806306fdde03146102825780630f969b87146102ad57806311bc8245146102cf5780631d12f28b146102ef5780632e1a7d4d14610314575b600080fd5b34801561028e57600080fd5b50610297610800565b6040516102a49190613cf9565b60405180910390f35b3480156102b957600080fd5b506102cd6102c8366004613d0c565b610897565b005b3480156102db57600080fd5b506102cd6102ea366004613d3a565b6108dc565b3480156102fb57600080fd5b506103066102615481565b6040519081526020016102a4565b34801561032057600080fd5b5061030661032f366004613d0c565b610933565b34801561034057600080fd5b506102cd610991565b34801561035557600080fd5b506102cd610364366004613d3a565b6109d2565b34801561037557600080fd5b506102605461038a906001600160a01b031681565b6040516001600160a01b0390911681526020016102a4565b3480156103ae57600080fd5b506102cd6103bd366004613d0c565b610aba565b3480156103ce57600080fd5b50610306610af8565b3480156103e357600080fd5b50610163546103f29060ff1681565b60405190151581526020016102a4565b34801561040e57600080fd5b5061030660fc5481565b6102cd610426366004613dc6565b610b6d565b34801561043757600080fd5b50610306610c3d565b34801561044c57600080fd5b506102cd610cf0565b34801561046157600080fd5b50604080518082019091526005815264302e312e3360d81b6020820152610297565b34801561048f57600080fd5b506101305461038a906001600160a01b031681565b3480156104b057600080fd5b506103066102625481565b3480156104c757600080fd5b5061022d5460ff166103f2565b3480156104e057600080fd5b5061030660fb5481565b3480156104f657600080fd5b506102cd610505366004613e67565b610d7c565b34801561051657600080fd5b5061029a5461038a906001600160a01b031681565b34801561053757600080fd5b506102cd610dd2565b34801561054c57600080fd5b5061038a735cb93c0ade6b7f2760ec4389833b0cccb5e4efda81565b34801561057457600080fd5b506103066102635481565b34801561058b57600080fd5b50610196546001600160a01b031661038a565b3480156105aa57600080fd5b5061038a73bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c81565b3480156105d257600080fd5b506102cd6105e1366004613d0c565b610de4565b3480156105f257600080fd5b506102cd610601366004613d0c565b610df2565b34801561061257600080fd5b50610306610e30565b34801561062757600080fd5b506101fa5461038a906001600160a01b031681565b34801561064857600080fd5b5061029b5461038a906001600160a01b031681565b34801561066957600080fd5b50610306610e40565b34801561067e57600080fd5b506102cd61068d366004613e84565b610ede565b34801561069e57600080fd5b5061038a73603c7f932ed1fc6575303d8fb018fdcbb0f39a9581565b3480156106c657600080fd5b5061029c5461038a906001600160a01b031681565b3480156106e757600080fd5b506101fa546103f290600160a01b900460ff1681565b34801561070957600080fd5b5061071261100f565b6040516102a4929190613f11565b34801561072c57600080fd5b506103066102995481565b34801561074357600080fd5b5061038a7310ed43c718714eb63d5aa57b78b54704e256024e81565b34801561076b57600080fd5b5061012f5461038a906001600160a01b031681565b34801561078c57600080fd5b506103f2611076565b3480156107a157600080fd5b50610306611092565b3480156107b657600080fd5b506102cd6107c5366004613d3a565b611125565b3480156107d657600080fd5b5061025f5461038a906001600160a01b031681565b3480156107f757600080fd5b506102cd61119b565b61026054604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b419160048083019260009291908290030181865afa15801561084b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108739190810190613f2c565b6040516020016108839190613f9a565b604051602081830303815290604052905090565b61089f61121b565b6102618190556040518181527fc9535537e8d84b9f2b1de4393633cf857ba693878894a0f280211615d850d7e8906020015b60405180910390a150565b6108e461121b565b6101fa80546001600160a01b0319166001600160a01b0383169081179091556040519081527f237b727bcd9a5527fd4043c1560a9bdf8eb934bc035e4656ee6e4bebca7a6b47906020016108d1565b61025f546000906001600160a01b031633146109625760405163348a645f60e11b815260040160405180910390fd5b600061096d83611276565b6102605490935090915061098b906001600160a01b031633836113c7565b50919050565b61099961142f565b6109a1611076565b6109be57604051630728f52160e21b815260040160405180910390fd5b6109c6611488565b6109d0600160c955565b565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610a235760405162461bcd60e51b8152600401610a1a90613fd2565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610a6c600080516020614533833981519152546001600160a01b031690565b6001600160a01b031614610a925760405162461bcd60e51b8152600401610a1a9061401e565b610a9b816114cd565b60408051600080825260208201909252610ab7918391906114d5565b50565b610ac261121b565b6102628190556040518181527f76a2e56642491d2ca27c5ad2ac9a12dc4264911b4ddcc90fc0b2c44fb2a01fea906020016108d1565b61029a54604051633af9e66960e01b81523060048201526000916001600160a01b031690633af9e669906024016020604051808303816000875af1158015610b44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b68919061406a565b905090565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610bb55760405162461bcd60e51b8152600401610a1a90613fd2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610bfe600080516020614533833981519152546001600160a01b031690565b6001600160a01b031614610c245760405162461bcd60e51b8152600401610a1a9061401e565b610c2d826114cd565b610c39828260016114d5565b5050565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610cdd5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a1a565b5060008051602061453383398151915290565b610cf861142f565b61012f546001600160a01b03163314610d475760405162461bcd60e51b81526020600482015260116024820152704f707352656164793a206f6e6c794f707360781b6044820152606401610a1a565b6101635460ff1615610d6c576040516301b5ad6760e01b815260040160405180910390fd5b610d74611488565b6109c6611640565b610d8461121b565b6101fa8054821515600160a01b0260ff60a01b199091161790556040517f3723564e400cf869a1ec2a588cf7f8c3e1d7564a7e00d6ef949b251b90c93f69906108d190831515815260200190565b610dda61121b565b6109d060006116cc565b610dec61121b565b61029955565b610dfa61121b565b6102638190556040518181527fd94596337df4c2f0f44d30a7fc5db1c7bb60d9aca4185ed77c6fd96eb45ec298906020016108d1565b600060fb5442610b689190614099565b61029a546040516361bfb47160e11b8152306004820152600091829182916001600160a01b03169063c37f68e290602401608060405180830381865afa158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb291906140ac565b935050925050670de0b6b3a76400008183610ecd91906140e2565b610ed791906140f9565b9250505090565b600054610100900460ff1615808015610efe5750600054600160ff909116105b80610f185750303b158015610f18575060005460ff166001145b610f7b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a1a565b6000805460ff191660011790558015610f9e576000805461ff0019166101001790555b610fa661171f565b610fb6888785858989600061174e565b610fbf876117a5565b8015611005576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6000606061101b611076565b6101635490925060ff16611036576329e184ef60e11b61103f565b630c8ba7c160e21b5b6040805160048152602481019091526020810180516001600160e01b03166001600160e01b03199093169290921790915291929050565b600061108360fc546119b6565b8015610b685750610b686119c8565b600061109c611b96565b6110a4610e40565b610260546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611111919061406a565b61111b919061411b565b610b68919061411b565b61112d61121b565b6001600160a01b0381166111925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a1a565b610ab7816116cc565b6111a361142f565b6111ab61121b565b6111b3611cb4565b61025f5460405163177329a960e31b81523060048201526001600160a01b039091169063bb994d4890602401600060405180830381600087803b1580156111f957600080fd5b505af115801561120d573d6000803e3d6000fd5b505050506109d0600160c955565b610196546001600160a01b031633146109d05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a1a565b610260546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a0823190602401602060405180830381865afa1580156112c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e8919061406a565b9050838110156113bd5760006112fc610af8565b9050600061130a8287611d0f565b61029a5460405163852a12e360e01b8152600481018390529192506000916001600160a01b039091169063852a12e3906024016020604051808303816000875af115801561135c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611380919061406a565b905080156113a4576040516305ee2ff160e11b815260048101829052602401610a1a565b81955085876113b39190614099565b94505050506113c1565b8392505b50915091565b6040516001600160a01b03831660248201526044810182905261142a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611d29565b505050565b600260c954036114815760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a1a565b600260c955565b6114914260fb55565b611499611dfb565b60405133907f8065c96ce68645eb5e1342fb74a5b4646b6712a1bb6a5e86280c1526eca8d25690600090a2565b600160c955565b610ab761121b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156115085761142a836121e7565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611562575060408051601f3d908101601f1916820190925261155f9181019061406a565b60015b6115c55760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a1a565b60008051602061453383398151915281146116345760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a1a565b5061142a838383612283565b61012f5460408051635c08631b60e11b8152815160009384936001600160a01b039091169263b810c63692600480830193928290030181865afa15801561168b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116af919061412e565b610130549193509150610c39906001600160a01b031682846122ae565b61019680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166117465760405162461bcd60e51b8152600401610a1a9061415e565b6109d06122e8565b600054610100900460ff166117755760405162461bcd60e51b8152600401610a1a9061415e565b61177e8161230f565b611786612347565b611791868686612376565b61179c8784846123b8565b50505050505050565b600054610100900460ff166117cc5760405162461bcd60e51b8152600401610a1a9061415e565b61029a80546001600160a01b0383166001600160a01b0319918216811790925561029b805482167310ed43c718714eb63d5aa57b78b54704e256024e17905561029c8054909116735cb93c0ade6b7f2760ec4389833b0cccb5e4efda1790556040805163313ce56760e01b8152905163313ce5679160048082019260209290919082900301816000875af1158015611868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061188c91906141a9565b60ff1660081415806118a2575061026654601214155b156118c057604051636a78e98160e11b815260040160405180910390fd5b6102605461029a5460408051636f307dc360e01b815290516001600160a01b039384169390921691636f307dc39160048082019260209290919082900301816000875af1158015611915573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193991906141cc565b6001600160a01b0316146119605760405163bd3cf18d60e01b815260040160405180910390fd5b67016345785d8a00006102995561199f73603c7f932ed1fc6575303d8fb018fdcbb0f39a957310ed43c718714eb63d5aa57b78b54704e256024e612639565b61026054610ab7906001600160a01b031682612639565b6000816119c1610e30565b1192915050565b61025f54604080516312a307ed60e21b815290516000926001600160a01b031691634a8c1fb49160048083019260209291908290030181865afa158015611a13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3791906141e9565b611a415750600090565b61025f54604080516306f94a0d60e01b815290516000926001600160a01b0316916306f94a0d9160048083019260209291908290030181865afa158015611a8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab0919061406a565b905061026154811115611ac557600191505090565b6000611acf611092565b9050600061025f60009054906101000a90046001600160a01b03166001600160a01b031663759076e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4b919061406a565b9050806102615483611b5d919061411b565b1015611b6d576001935050505090565b600081831115611b8457611b818284614099565b90505b611b8d8161264f565b94505050505090565b600080611ba1612710565b611ba96127c9565b611bb3919061411b565b905080600003611bc557600091505090565b61029b54610260546000916001600160a01b039081169163d06ca61f918591611c049173603c7f932ed1fc6575303d8fb018fdcbb0f39a95911661281b565b6040518363ffffffff1660e01b8152600401611c2192919061424a565b600060405180830381865afa158015611c3e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c669190810190614263565b905060008160018351611c799190614099565b81518110611c8957611c89614309565b602002602001015190506064605a82611ca291906140e2565b611cac91906140f9565b935050505090565b611cbc6129b5565b61022d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611cf23390565b6040516001600160a01b03909116815260200160405180910390a1565b6000818310611d1e5781611d20565b825b90505b92915050565b6000611d7e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166129fc9092919063ffffffff16565b80519091501561142a5780806020019051810190611d9c91906141e9565b61142a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610a1a565b60008060008061025f60009054906101000a90046001600160a01b03166001600160a01b03166306f94a0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e79919061406a565b9050611e8861022d5460ff1690565b15611ea257611e9681612a15565b91955093509150611eb3565b611eab81612a66565b919550935091505b8315611f245761025f5460405163dd723c1b60e01b815260048101869052602481018490526001600160a01b039091169063dd723c1b90604401600060405180830381600087803b158015611f0757600080fd5b505af1158015611f1b573d6000803e3d6000fd5b50505050611f8b565b61025f546040516339d97c5360e01b815260048101859052602481018490526001600160a01b03909116906339d97c5390604401600060405180830381600087803b158015611f7257600080fd5b505af1158015611f86573d6000803e3d6000fd5b505050505b61025f60009054906101000a90046001600160a01b03166001600160a01b03166306f94a0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612003919061406a565b905061025f60009054906101000a90046001600160a01b03166001600160a01b0316630baabd7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612059573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207d919061406a565b15806120fc575061025f60009054906101000a90046001600160a01b03166001600160a01b0316635c975abb6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fc91906141e9565b612106578061210e565b61210e611092565b905061211981612cf9565b61025f546040805163759076e560e01b815290516000926001600160a01b03169163759076e59160048083019260209291908290030181865afa158015612164573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612188919061406a565b9050612198308686868686612eaf565b6040805186815260208101869052908101849052606081018390527f4c0f499ffe6befa0ca7c826b0916cf87bea98de658013e76938489368d60d5099060800160405180910390a15050505050565b6001600160a01b0381163b6122545760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a1a565b60008051602061453383398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61228c83612f9d565b6000825111806122995750805b1561142a576122a88383612fdd565b50505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038316016122dd5761142a83826130d1565b61142a8284836113c7565b600054610100900460ff166109d05760405162461bcd60e51b8152600401610a1a9061415e565b600054610100900460ff166123365760405162461bcd60e51b8152600401610a1a9061415e565b61233e61316d565b610ab78161319c565b600054610100900460ff1661236e5760405162461bcd60e51b8152600401610a1a9061415e565b6109d06131d6565b600054610100900460ff1661239d5760405162461bcd60e51b8152600401610a1a9061415e565b6123a68361320a565b6123af826132d3565b61142a81613313565b600054610100900460ff166123df5760405162461bcd60e51b8152600401610a1a9061415e565b61025f80546001600160a01b0319166001600160a01b038516908117909155604080516338d52e0f60e01b815290516338d52e0f916004808201926020929091908290030181865afa158015612439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245d91906141cc565b61026080546001600160a01b03199081166001600160a01b039384161790915560006102618190556102625560646102635561026480548216858416179055610265805490911691831691821790556040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa1580156124e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250b91906141a9565b60ff1661026460009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612562573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258691906141a9565b60ff16146125a7576040516362655f5160e01b815260040160405180910390fd5b61026060009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261f91906141a9565b60ff16610266556102605461142a906001600160a01b0316845b610c396001600160a01b0383168260001961334e565b60008061025f60009054906101000a90046001600160a01b03166001600160a01b03166307cc692f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ca919061406a565b90506000610262546126da613463565b6126e491906140e2565b90506126f86126f3858461411b565b61347f565b816102635461270791906140e2565b10949350505050565b60008061271b61349f565b90508060000361272d57600091505090565b6000600361025f60009054906101000a90046001600160a01b03166001600160a01b031663c3535b526040518163ffffffff1660e01b8152600401602060405180830381865afa158015612785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a9919061406a565b6127b39042614099565b6127bd91906140f9565b9050610ed782826140e2565b6040516370a0823160e01b815230600482015260009073603c7f932ed1fc6575303d8fb018fdcbb0f39a95906370a0823190602401602060405180830381865afa158015610b44573d6000803e3d6000fd5b606060006001600160a01b03841673bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c148061286657506001600160a01b03831673bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c145b905080612874576003612877565b60025b60ff1667ffffffffffffffff81111561289257612892613d57565b6040519080825280602002602001820160405280156128bb578160200160208202803683370190505b50915083826000815181106128d2576128d2614309565b60200260200101906001600160a01b031690816001600160a01b031681525050801561293157828260018151811061290c5761290c614309565b60200260200101906001600160a01b031690816001600160a01b0316815250506129ae565b73bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c8260018151811061295957612959614309565b60200260200101906001600160a01b031690816001600160a01b031681525050828260028151811061298d5761298d614309565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5092915050565b61022d5460ff16156109d05760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610a1a565b6060612a0b8484600085613660565b90505b9392505050565b600080600080612a2361373d565b905084811015612a3e57612a378186614099565b9250612a53565b84811115612a5357612a508582614099565b93505b612a5d8386614099565b93959294505050565b61029a546040516370a0823160e01b8152306004820152600091829182916001600160a01b0316906370a0823190602401602060405180830381865afa158015612ab4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad8919061406a565b600003612b5b57610260546040516370a0823160e01b8152306004820152612b54916001600160a01b0316906370a0823190602401602060405180830381865afa158015612b2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b4e919061406a565b85611d0f565b9050612cf2565b6000612b65610af8565b9050612b6f6137e2565b612b77613899565b610260546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612bc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be5919061406a565b90506000612bf3828461411b565b9050600061025f60009054906101000a90046001600160a01b03166001600160a01b031663759076e56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6f919061406a565b905080821115612cd457612c838183614099565b965086831015612caa57612c978389611d0f565b9450612ca38584614099565b9650612ced565b612cb4888861411b565b831115612cc357879450612ced565b612ccd8784614099565b9450612ced565b612cde8282614099565b9550612cea8389611d0f565b94505b505050505b9193909250565b61022d5460ff1615612d085750565b610260546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015612d52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d76919061406a565b905081811015612e065761029a546040516370a0823160e01b81523060048201526001916001600160a01b0316906370a0823190602401602060405180830381865afa158015612dca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dee919061406a565b1115610c39576122a8612e018284614099565b611276565b6000612e128383614099565b9050801561142a5761029a5460405163140e25ad60e31b8152600481018390526000916001600160a01b03169063a0712d68906024016020604051808303816000875af1158015612e67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e8b919061406a565b905080156122a857604051638c32d69360e01b815260048101829052602401610a1a565b6101fa546001600160a01b031615612f95576101fa54600160a01b900460ff16612ee257612edd6001610d7c565b612f95565b6101fa546040516301afebc160e21b81526001600160a01b0388811660048301526024820188905260448201879052606482018690526084820185905260a4820184905260009216906306bfaf049060c401602060405180830381865afa158015612f51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f7591906141e9565b90508061179c5760405163c196dcf360e01b815260040160405180910390fd5b505050505050565b612fa6816121e7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6130455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b6064820152608401610a1a565b600080846001600160a01b031684604051613060919061431f565b600060405180830381855af49150503d806000811461309b576040519150601f19603f3d011682016040523d82523d6000602084013e6130a0565b606091505b50915091506130c88282604051806060016040528060278152602001614553602791396139c7565b95945050505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461311e576040519150601f19603f3d011682016040523d82523d6000602084013e613123565b606091505b505090508061142a5760405162461bcd60e51b815260206004820152601660248201527513985d1a5d99481d1c985b9cd9995c8819985a5b195960521b6044820152606401610a1a565b600054610100900460ff166131945760405162461bcd60e51b8152600401610a1a9061415e565b6109d06139e0565b600054610100900460ff166131c35760405162461bcd60e51b8152600401610a1a9061415e565b6131cc816108dc565b610ab76001610d7c565b600054610100900460ff166131fd5760405162461bcd60e51b8152600401610a1a9061415e565b61022d805460ff19169055565b600054610100900460ff166132315760405162461bcd60e51b8152600401610a1a9061415e565b61012f80546001600160a01b0319166001600160a01b0383169081179091556040805163573ea57560e01b8152905163573ea575916004808201926020929091908290030181865afa15801561328b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132af91906141cc565b61013080546001600160a01b0319166001600160a01b039290921691909117905550565b600054610100900460ff166132fa5760405162461bcd60e51b8152600401610a1a9061415e565b6133026122e8565b61330a613a10565b610ab781613a3f565b600054610100900460ff1661333a5760405162461bcd60e51b8152600401610a1a9061415e565b610163805460ff1916911515919091179055565b8015806133c85750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156133a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c6919061406a565b155b6134335760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610a1a565b6040516001600160a01b03831660248201526044810182905261142a90849063095ea7b360e01b906064016113f3565b61026454600090610b68906001600160a01b03163a6012613a6f565b6102665461026554600091611d23916001600160a01b0316908490613a6f565b6000806134aa610e40565b9050806000036134bc57600091505090565b61029c5461029a54604051636aa875b560e01b81526001600160a01b0391821660048201526000929190911690636aa875b590602401602060405180830381865afa15801561350f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613533919061406a565b90506000670de0b6b3a764000061029a60009054906101000a90046001600160a01b03166001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b8919061406a565b61029a60009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561360c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613630919061406a565b61363a91906140e2565b61364491906140f9565b905060008111613655576000611cac565b80611ca283856140e2565b6060824710156136c15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610a1a565b600080866001600160a01b031685876040516136dd919061431f565b60006040518083038185875af1925050503d806000811461371a576040519150601f19603f3d011682016040523d82523d6000602084013e61371f565b606091505b509150915061373087838387613b93565b925050505b949350505050565b600080613748610af8565b61029a5460405163852a12e360e01b8152600481018390529192506000916001600160a01b039091169063852a12e3906024016020604051808303816000875af115801561379a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137be919061406a565b9050801561098b576040516305ee2ff160e11b815260048101829052602401610a1a565b60408051600180825281830190925260009160208083019080368337505061029a5482519293506001600160a01b03169183915060009061382557613825614309565b6001600160a01b03928316602091820292909201015261029c5460405162e1ed9760e51b8152911690631c3db2e090613864903090859060040161433b565b600060405180830381600087803b15801561387e57600080fd5b505af1158015613892573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b815230600482015260009073603c7f932ed1fc6575303d8fb018fdcbb0f39a95906370a0823190602401602060405180830381865afa1580156138eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390f919061406a565b90506102995481101561391f5750565b61029b54610260546001600160a01b03918216916338ed173991849160009161395e9173603c7f932ed1fc6575303d8fb018fdcbb0f39a95911661281b565b30426040518663ffffffff1660e01b8152600401613980959493929190614397565b6000604051808303816000875af115801561399f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c399190810190614263565b606083156139d6575081612a0e565b612a0e8383613c08565b600054610100900460ff16613a075760405162461bcd60e51b8152600401610a1a9061415e565b6109d0336116cc565b600054610100900460ff16613a375760405162461bcd60e51b8152600401610a1a9061415e565b6109d0613c32565b600054610100900460ff16613a665760405162461bcd60e51b8152600401610a1a9061415e565b610ab781613c59565b600080846001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015613ab0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad491906143f2565b5050509150506000856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3e91906141a9565b60ff1690506000613b50601283613c83565b9150613b5f905085600a614526565b613b6a82600a614526565b613b7485896140e2565b613b7e91906140e2565b613b8891906140f9565b979650505050505050565b60608315613c02578251600003613bfb576001600160a01b0385163b613bfb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a1a565b5081613735565b61373583835b815115613c185781518083602001fd5b8060405162461bcd60e51b8152600401610a1a9190613cf9565b600054610100900460ff166114c65760405162461bcd60e51b8152600401610a1a9061415e565b6103e88111613c7e5760405163034b4ee160e01b815260048101829052602401610a1a565b60fc55565b60008083831115613c9957506000905080613ca2565b50600190508183035b9250929050565b60005b83811015613cc4578181015183820152602001613cac565b50506000910152565b60008151808452613ce5816020860160208601613ca9565b601f01601f19169290920160200192915050565b602081526000611d206020830184613ccd565b600060208284031215613d1e57600080fd5b5035919050565b6001600160a01b0381168114610ab757600080fd5b600060208284031215613d4c57600080fd5b8135612a0e81613d25565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613d9657613d96613d57565b604052919050565b600067ffffffffffffffff821115613db857613db8613d57565b50601f01601f191660200190565b60008060408385031215613dd957600080fd5b8235613de481613d25565b9150602083013567ffffffffffffffff811115613e0057600080fd5b8301601f81018513613e1157600080fd5b8035613e24613e1f82613d9e565b613d6d565b818152866020838501011115613e3957600080fd5b816020840160208301376000602083830101528093505050509250929050565b8015158114610ab757600080fd5b600060208284031215613e7957600080fd5b8135612a0e81613e59565b600080600080600080600060e0888a031215613e9f57600080fd5b8735613eaa81613d25565b96506020880135613eba81613d25565b95506040880135613eca81613d25565b94506060880135613eda81613d25565b93506080880135613eea81613d25565b925060a0880135915060c0880135613f0181613e59565b8091505092959891949750929550565b8215158152604060208201526000612a0b6040830184613ccd565b600060208284031215613f3e57600080fd5b815167ffffffffffffffff811115613f5557600080fd5b8201601f81018413613f6657600080fd5b8051613f74613e1f82613d9e565b818152856020838501011115613f8957600080fd5b6130c8826020830160208601613ca9565b60008251613fac818460208701613ca9565b73204170654c656e64696e6720537472617465677960601b920191825250601401919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60006020828403121561407c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611d2357611d23614083565b600080600080608085870312156140c257600080fd5b505082516020840151604085015160609095015191969095509092509050565b8082028115828204841417611d2357611d23614083565b60008261411657634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115611d2357611d23614083565b6000806040838503121561414157600080fd5b82519150602083015161415381613d25565b809150509250929050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000602082840312156141bb57600080fd5b815160ff81168114612a0e57600080fd5b6000602082840312156141de57600080fd5b8151612a0e81613d25565b6000602082840312156141fb57600080fd5b8151612a0e81613e59565b600081518084526020808501945080840160005b8381101561423f5781516001600160a01b03168752958201959082019060010161421a565b509495945050505050565b828152604060208201526000612a0b6040830184614206565b6000602080838503121561427657600080fd5b825167ffffffffffffffff8082111561428e57600080fd5b818501915085601f8301126142a257600080fd5b8151818111156142b4576142b4613d57565b8060051b91506142c5848301613d6d565b81815291830184019184810190888411156142df57600080fd5b938501935b838510156142fd578451825293850193908501906142e4565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008251614331818460208701613ca9565b9190910192915050565b6001600160a01b038381168252604060208084018290528451918401829052600092858201929091906060860190855b8181101561438957855185168352948301949183019160010161436b565b509098975050505050505050565b85815284602082015260a0604082015260006143b660a0830186614206565b6001600160a01b0394909416606083015250608001529392505050565b805169ffffffffffffffffffff811681146143ed57600080fd5b919050565b600080600080600060a0868803121561440a57600080fd5b614413866143d3565b9450602086015193506040860151925060608601519150614436608087016143d3565b90509295509295909350565b600181815b8085111561447d57816000190482111561446357614463614083565b8085161561447057918102915b93841c9390800290614447565b509250929050565b60008261449457506001611d23565b816144a157506000611d23565b81600181146144b757600281146144c1576144dd565b6001915050611d23565b60ff8411156144d2576144d2614083565b50506001821b611d23565b5060208310610133831016604e8410600b8410161715614500575081810a611d23565b61450a8383614442565b806000190482111561451e5761451e614083565b029392505050565b6000611d20838361448556fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e5bea3daf8c9014e1e82b4601dea2bccd89e2e649ecd9dc3ebb9d89933591c2064736f6c63430008130033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "canWork()": {
        "details": "Will be executed by keeper and before `work` method execution."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "depositedBalance()": {
        "details": "Unlike the snapshot function, this function recalculates the value of the deposit."
      },
      "depositedBalanceSnapshot()": {
        "details": "The exchange rate is recalculated at the last time someone touched the cToken contract.      Transactions are not performed too often on this contract, perhaps we should consider recalculating the rate ourselves."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDebtThreshold(uint256)": {
        "params": {
          "_debtThreshold": "The new debt threshold value."
        }
      },
      "setEstimatedWorkGas(uint256)": {
        "params": {
          "_estimatedWorkGas": "The estimated \"work\" gas value."
        }
      },
      "setHealthCheck(address)": {
        "details": "Emits the \"HealthCheckChanged\" event.",
        "params": {
          "_healthCheck": "A new health check contract address."
        }
      },
      "setHealthCheckEnabled(bool)": {
        "details": "Emits the \"HealthCheckEnabledChanged\" event. Do not disable the health check, unless you need to perform \"report\" in an emergency.",
        "params": {
          "_healthCheckEnabled": "If \"true\" - health check will be disabled."
        }
      },
      "setProfitFactor(uint256)": {
        "params": {
          "_profitFactor": "The new profit factor value."
        }
      },
      "timeFromLastExecution()": {
        "returns": {
          "_0": "seconds from last execution in a range of 900 seconds"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "returns": {
          "_0": "a version in semantic versioning format"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "assets": "A amount of tokens to withdraw."
        },
        "returns": {
          "loss": "A number of tokens that the strategy could not return."
        }
      },
      "work()": {
        "details": "`nonReentrant` modifier might be excess there, since we have `isTimePassFromLastExecution` check and `refreshLastWorkTime` at start (see `onlyWhenCanWork` modifier). Let's keep it, as `canWork` can be overridden."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotWorkNow()": [
        {
          "notice": "Someone tried to execute work function while `canWork` is `false`"
        }
      ],
      "PayableWorkNotAllowed()": [
        {
          "notice": "Contract expect work will be prepayd, so it cannot pay for work"
        }
      ],
      "TimeMinimumBetweenExecutionsIncorrect(uint256)": [
        {
          "notice": "Given time minimum between execution must be greater then 1000"
        }
      ]
    },
    "events": {
      "Worked(address)": {
        "notice": "Job work function was executed by worker bot"
      }
    },
    "kind": "user",
    "methods": {
      "asset()": {
        "notice": "Returns the contract address of the underlying asset of this strategy."
      },
      "canWork()": {
        "notice": "If work can be executed by keeper at this moment returns true"
      },
      "checker()": {
        "notice": "Resolver checker that says if the work can be performed and with what params."
      },
      "debtThreshold()": {
        "notice": "Use this to adjust the threshold at which running a debt causes a work trigger."
      },
      "depositedBalance()": {
        "notice": "Returns current deposited balance (in asset)."
      },
      "depositedBalanceSnapshot()": {
        "notice": "Returns current deposited balance (in asset)."
      },
      "estimatedTotalAssets()": {
        "notice": "Estimates the total amount of strategy funds (including those invested in the base protocol)."
      },
      "estimatedWorkGas()": {
        "notice": "The estimated amount of gas required for the \"work\" execution."
      },
      "isPrepaid()": {
        "notice": "If job is prepaid, then it not will try to pay on executed work."
      },
      "lastWorkTime()": {
        "notice": "Timestamp of last work execution block in seconds."
      },
      "minBananaToSell()": {
        "notice": "Minimum BANANA token amount to sell."
      },
      "minimumBetweenExecutions()": {
        "notice": "Mininmal time which must pass between executions of the job in seconds. Better set hours, but at least set to greater then 900 seconds, node opperators able to manipulate timestamp in 900 seconds range, on some blockchains maybe bigger."
      },
      "name()": {
        "notice": "Returns the name of this strategy."
      },
      "payableWork()": {
        "notice": "Bot will call this method when `checker` returns `true`. Will pay caller `_doWork` method stay as it is, to allow a call off-chain"
      },
      "profitFactor()": {
        "notice": "Shows how many times the gas price spent for the \"work\" function should be lower than the profit to trigger."
      },
      "setDebtThreshold(uint256)": {
        "notice": "Sets the debt threshold."
      },
      "setEstimatedWorkGas(uint256)": {
        "notice": "Sets the estimated gas that will be required for \"work\" function."
      },
      "setHealthCheck(address)": {
        "notice": "Sets the health check implementation contract."
      },
      "setHealthCheckEnabled(bool)": {
        "notice": "Enables or disables the health check."
      },
      "setMinBananaToSell(uint256)": {
        "notice": "Sets the minimum number of BANANA tokens that must be on the contract to sell."
      },
      "setProfitFactor(uint256)": {
        "notice": "Sets the profit factor."
      },
      "shutdown()": {
        "notice": "Shutdown the strategy and revoke it form the vault."
      },
      "timeFromLastExecution()": {
        "notice": "Time that passed since the last exection"
      },
      "vault()": {
        "notice": "Returns the contract address of the Vault to which this strategy is connected."
      },
      "version()": {
        "notice": "Returns the current version of this contract"
      },
      "withdraw(uint256)": {
        "notice": "Transfers a specified amount of tokens to the vault."
      },
      "work()": {
        "notice": "A handle that allows the `_doWork` function to be invoked externally by everyone. Perform a `canWork` check to avoid unnecessary and (maybe) malicious calls."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 580,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 583,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 562,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 877,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12060,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3146,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1019,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "_status",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 1077,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7347,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "lastWorkTime",
        "offset": 0,
        "slot": "251",
        "type": "t_uint256"
      },
      {
        "astId": 7350,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "minimumBetweenExecutions",
        "offset": 0,
        "slot": "252",
        "type": "t_uint256"
      },
      {
        "astId": 7355,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7755,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "ops",
        "offset": 0,
        "slot": "303",
        "type": "t_contract(IOps)7727"
      },
      {
        "astId": 7757,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "gelato",
        "offset": 0,
        "slot": "304",
        "type": "t_address_payable"
      },
      {
        "astId": 7769,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "305",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7223,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "isPrepaid",
        "offset": 0,
        "slot": "355",
        "type": "t_bool"
      },
      {
        "astId": 7228,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "356",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 56,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "406",
        "type": "t_address"
      },
      {
        "astId": 176,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "407",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12094,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "456",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7851,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "healthCheck",
        "offset": 0,
        "slot": "506",
        "type": "t_contract(IHealthCheck)8004"
      },
      {
        "astId": 7853,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "healthCheckEnabled",
        "offset": 20,
        "slot": "506",
        "type": "t_bool"
      },
      {
        "astId": 7858,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "507",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 899,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "_paused",
        "offset": 0,
        "slot": "557",
        "type": "t_bool"
      },
      {
        "astId": 1004,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "558",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9967,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "vault",
        "offset": 0,
        "slot": "607",
        "type": "t_contract(IVault)6320"
      },
      {
        "astId": 9970,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "asset",
        "offset": 0,
        "slot": "608",
        "type": "t_contract(IERC20Upgradeable)1156"
      },
      {
        "astId": 9973,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "debtThreshold",
        "offset": 0,
        "slot": "609",
        "type": "t_uint256"
      },
      {
        "astId": 9976,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "estimatedWorkGas",
        "offset": 0,
        "slot": "610",
        "type": "t_uint256"
      },
      {
        "astId": 9979,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "profitFactor",
        "offset": 0,
        "slot": "611",
        "type": "t_uint256"
      },
      {
        "astId": 9983,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "_nativeTokenPriceFeed",
        "offset": 0,
        "slot": "612",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 9987,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "_assetPriceFeed",
        "offset": 0,
        "slot": "613",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 9990,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "_assetDecimals",
        "offset": 0,
        "slot": "614",
        "type": "t_uint256"
      },
      {
        "astId": 9995,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "615",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 9040,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "minBananaToSell",
        "offset": 0,
        "slot": "665",
        "type": "t_uint256"
      },
      {
        "astId": 9043,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "cToken",
        "offset": 0,
        "slot": "666",
        "type": "t_contract(ICToken)10851"
      },
      {
        "astId": 9046,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "pancakeRouter",
        "offset": 0,
        "slot": "667",
        "type": "t_contract(IPancakeRouter)10883"
      },
      {
        "astId": 9049,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "rainMaker",
        "offset": 0,
        "slot": "668",
        "type": "t_contract(IRainMaker)10955"
      },
      {
        "astId": 9054,
        "contract": "src/strategies/ApeLendingStrategy.sol:ApeLendingStrategy",
        "label": "__gap",
        "offset": 0,
        "slot": "669",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(ICToken)10851": {
        "encoding": "inplace",
        "label": "contract ICToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Upgradeable)1156": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IHealthCheck)8004": {
        "encoding": "inplace",
        "label": "contract IHealthCheck",
        "numberOfBytes": "20"
      },
      "t_contract(IOps)7727": {
        "encoding": "inplace",
        "label": "contract IOps",
        "numberOfBytes": "20"
      },
      "t_contract(IPancakeRouter)10883": {
        "encoding": "inplace",
        "label": "contract IPancakeRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IRainMaker)10955": {
        "encoding": "inplace",
        "label": "contract IRainMaker",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)6320": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}