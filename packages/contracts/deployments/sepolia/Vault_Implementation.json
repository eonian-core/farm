{
  "address": "0x5750B712a753181A74C5ee5c6BFA2871Bde9B104",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "needDisableInitializers",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AccessDeniedForCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowerHasDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerIsNotABorrower",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceededMaximumFeeValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FalsePositiveReport",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InappropriateStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "InsufficientVaultBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "durationInSeconds",
          "type": "uint256"
        }
      ],
      "name": "InvalidLockedProfitReleaseRate",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "freeRatio",
          "type": "uint256"
        }
      ],
      "name": "LenderRatioExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ListsDoNotMatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnexpectedZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "AuthorizedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtPayment",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "freeFunds",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundsGiven",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundsTaken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        }
      ],
      "name": "BorrowerDebtManagementReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "Burned",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "LockedProfitReleaseRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "RevokedOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "Sent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "StrategyAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "fromQueueOnly",
          "type": "bool"
        }
      ],
      "name": "StrategyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyReturnedToQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOCKED_PROFIT_RELEASE_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "addStrategyToQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "authorizeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableCredit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowersData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activationTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReportTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDebtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQueueSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "granularity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewards",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_managementFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lockedProfitReleaseRate",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_defaultOperators",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "isActivated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenHolder",
          "type": "address"
        }
      ],
      "name": "isOperatorFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "lastReport",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastReport",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastReportTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedProfitBaseline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedProfitReleaseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "managementFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "operatorBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "operatorData",
          "type": "bytes"
        }
      ],
      "name": "operatorSend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outstandingDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "fromQueueOnly",
          "type": "bool"
        }
      ],
      "name": "removeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "queue",
          "type": "address[]"
        }
      ],
      "name": "reorderWithdrawalQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtPayment",
          "type": "uint256"
        }
      ],
      "name": "reportNegativeDebtManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "extraFreeFunds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "debtPayment",
          "type": "uint256"
        }
      ],
      "name": "reportPositiveDebtManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "revokeOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "revokeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "shutdown",
          "type": "bool"
        }
      ],
      "name": "setEmergencyShutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setLockedProfitReleaseRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_managementFee",
          "type": "uint256"
        }
      ],
      "name": "setManagementFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewards",
          "type": "address"
        }
      ],
      "name": "setRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "strategyDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "strategyRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawalQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8cf8b24361e84a9b2d610ed8690dd524a9a819d45375296f505af773f497f158",
  "receipt": {
    "to": null,
    "from": "0x1a62194f10b1Ec3a44Ad098f15d0845B52FB2195",
    "contractAddress": "0x5750B712a753181A74C5ee5c6BFA2871Bde9B104",
    "transactionIndex": 2,
    "gasUsed": "4824834",
    "logsBloom": "0x
    "blockHash": "0x7d0f6549437c30a873fcba7bb1f8b7ae86483e58ac725b8298ba19e4a77bb939",
    "transactionHash": "0x8cf8b24361e84a9b2d610ed8690dd524a9a819d45375296f505af773f497f158",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 3591932,
        "transactionHash": "0x8cf8b24361e84a9b2d610ed8690dd524a9a819d45375296f505af773f497f158",
        "address": "0x5750B712a753181A74C5ee5c6BFA2871Bde9B104",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 1,
        "blockHash": "0x7d0f6549437c30a873fcba7bb1f8b7ae86483e58ac725b8298ba19e4a77bb939"
      }
    ],
    "blockNumber": 3591932,
    "cumulativeGasUsed": "4888138",
    "status": 1,
    "byzantium": true
  },
  "args": [
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "7302b240fc557418710bbc59786cb8a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"needDisableInitializers\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessDeniedForCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowerHasDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerIsNotABorrower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededMaximumFeeValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FalsePositiveReport\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InappropriateStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"InsufficientVaultBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"durationInSeconds\",\"type\":\"uint256\"}],\"name\":\"InvalidLockedProfitReleaseRate\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"freeRatio\",\"type\":\"uint256\"}],\"name\":\"LenderRatioExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListsDoNotMatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnexpectedZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freeFunds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsGiven\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsTaken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"name\":\"BorrowerDebtManagementReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"LockedProfitReleaseRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"fromQueueOnly\",\"type\":\"bool\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyReturnedToQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOCKED_PROFIT_RELEASE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"addStrategyToQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableCredit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowersData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activationTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReportTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDebtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQueueSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granularity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockedProfitReleaseRate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_defaultOperators\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"isActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"lastReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReportTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedProfitBaseline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedProfitReleaseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outstandingDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"fromQueueOnly\",\"type\":\"bool\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"queue\",\"type\":\"address[]\"}],\"name\":\"reorderWithdrawalQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"}],\"name\":\"reportNegativeDebtManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"extraFreeFunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtPayment\",\"type\":\"uint256\"}],\"name\":\"reportPositiveDebtManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"name\":\"setEmergencyShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setLockedProfitReleaseRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"strategyDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"strategyRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawalQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"AuthorizedOperator(address,address)\":{\"details\":\"Emitted when `operator` is made operator for `tokenHolder`.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"BorrowerDebtManagementReported(address,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"borrower\":\"Borrower's contract address\",\"debtPayment\":\"Amount of outstanding debt repaid by the borrower\",\"freeFunds\":\"Free funds on the borrower's contract that remain after the debt is paid\",\"fundsGiven\":\"Funds issued to the borrower by this lender\",\"fundsTaken\":\"Funds that have been taken from the borrower by the lender\",\"loss\":\"Amount of funds that the borrower realised as loss\"}},\"Burned(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Minted(address,address,uint256,bytes,bytes)\":{\"details\":\"Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RevokedOperator(address,address)\":{\"details\":\"Emitted when `operator` is revoked its operator status for `tokenHolder`.\"},\"StrategyAdded(address,uint256)\":{\"params\":{\"debtRatio\":\"Maximum portion of the loan that the strategy can take (in BPS).\",\"strategy\":\"Address of the strategy contract.\"}},\"StrategyRemoved(address,bool)\":{\"params\":{\"fromQueueOnly\":\"If \\\"true\\\", then the strategy has only been removed from the withdrawal queue.\",\"strategy\":\"Address of the strategy contract.\"}},\"StrategyReturnedToQueue(address)\":{\"params\":{\"strategy\":\"Address of the strategy contract.\"}},\"StrategyRevoked(address)\":{\"params\":{\"strategy\":\"Address of the strategy contract.\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"addStrategy(address,uint256)\":{\"params\":{\"debtRatio\":\"a ratio that shows how much of the new strategy can take, relative to other strategies.\",\"strategy\":\"a new strategy address.\"}},\"addStrategyToQueue(address)\":{\"params\":{\"strategy\":\"a strategy address.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Note that accounts cannot have allowance issued by their operators.\"},\"authorizeOperator(address)\":{\"details\":\"See {IERC777-authorizeOperator}.\"},\"availableCredit()\":{\"returns\":{\"_0\":\"Available credit as amount of tokens\"}},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by an account (`tokenHolder`).\"},\"burn(uint256,bytes)\":{\"details\":\"See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"currentDebt()\":{\"returns\":{\"_0\":\"Debt as amount of tokens\"}},\"decimals()\":{\"details\":\"See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\"},\"defaultOperators()\":{\"details\":\"See {IERC777-defaultOperators}.\"},\"deposit(uint256)\":{\"details\":\"Override to add the \\\"whenNotPaused\\\" modifier\"},\"granularity()\":{\"details\":\"See {IERC777-granularity}. This implementation always returns `1`.\"},\"isActivated()\":{\"returns\":{\"_0\":\"\\\"true\\\" if the borrower is active\"}},\"isOperatorFor(address,address)\":{\"details\":\"See {IERC777-isOperatorFor}.\"},\"name()\":{\"details\":\"See {IERC777-name}.\"},\"operatorBurn(address,uint256,bytes,bytes)\":{\"details\":\"See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events.\"},\"operatorSend(address,address,uint256,bytes,bytes)\":{\"details\":\"See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events.\"},\"outstandingDebt()\":{\"returns\":{\"_0\":\"Outstanding debt as amount of tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Explicitly overridden here to keep this function exposed via \\\"IVault\\\" interface.\",\"returns\":{\"_0\":\"\\\"true\\\" if the contract is paused, and \\\"false\\\" otherwise.\"}},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"removeStrategy(address,bool)\":{\"params\":{\"fromQueueOnly\":\"if \\\"true\\\", then the strategy will only be removed from the withdrawal queue.\",\"strategy\":\"a strategy to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reorderWithdrawalQueue(address[])\":{\"params\":{\"queue\":\"a new queue that will replace the existing one.        Should contain only those elements that already present in the existing queue.\"}},\"reportNegativeDebtManagement(uint256,uint256)\":{\"params\":{\"debtPayment\":\"is the funds that the borrower must release in order to pay off his outstanding debt (if any).\",\"loss\":\"a number of tokens by which the borrower's balance has decreased since the last report.        May include a portion of the outstanding debt that the borrower was unable to repay.\"}},\"reportPositiveDebtManagement(uint256,uint256)\":{\"params\":{\"debtPayment\":\"is the funds that the borrower must release in order to pay off his outstanding debt (if any).\",\"extraFreeFunds\":\"an extra amount of free funds borrower's contract has.                       This reporting amount must be greater than the borrower's outstanding debt.\"}},\"revokeOperator(address)\":{\"details\":\"See {IERC777-revokeOperator}.\"},\"revokeStrategy(address)\":{\"params\":{\"strategy\":\"a strategy to revoke.\"}},\"send(address,uint256,bytes)\":{\"details\":\"See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility.\"},\"setEmergencyShutdown(bool)\":{\"params\":{\"shutdown\":\"a new vault pause state. If \\\"true\\\" is passed, the vault will be paused.\"}},\"setLockedProfitReleaseRate(uint256)\":{\"params\":{\"rate\":\"the rate of release of locked profit (percent per second scaled to 1e18).             The desire value of this parameter can be calculated as 1e18 / DurationInSeconds.\"}},\"setManagementFee(uint256)\":{\"params\":{\"_managementFee\":\"a new management fee value (in BPS).\"}},\"setRewards(address)\":{\"params\":{\"_rewards\":\"a new rewards address.\"}},\"strategyDebt(address)\":{\"params\":{\"strategy\":\"the strategy address.\"}},\"strategyRatio(address)\":{\"params\":{\"strategy\":\"the strategy address.\"}},\"symbol()\":{\"details\":\"See {IERC777-symbol}.\"},\"totalAssets()\":{\"details\":\"Must be implemented by child contract.\"},\"totalSupply()\":{\"details\":\"See {IERC777-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"returns\":{\"_0\":\"a version in semantic versioning format\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new      variables without shifting down storage in the inheritance chain.      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"events\":{\"BorrowerDebtManagementReported(address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Event that must occur when the borrower reported the results of his debt management\"},\"Deposit(address,address,uint256,uint256)\":{\"notice\":\"`sender` has exchanged `assets` for `shares`, and transferred those `shares` to `owner`. emitted when tokens are deposited into the Vault via the mint and deposit methods.\"},\"LockedProfitReleaseRateChanged(uint256)\":{\"notice\":\"Event that should happen when the locked-in profit release rate changed.\"},\"StrategyAdded(address,uint256)\":{\"notice\":\"Event that should happen when the strategy connects to the vault.\"},\"StrategyRemoved(address,bool)\":{\"notice\":\"Event that should happen when the strategy has been removed from the vault.\"},\"StrategyReturnedToQueue(address)\":{\"notice\":\"Event that should happen when the strategy has been returned to the withdrawal queue.\"},\"StrategyRevoked(address)\":{\"notice\":\"Event that should happen when the strategy has been revoked from the vault.\"},\"Withdraw(address,address,address,uint256,uint256)\":{\"notice\":\"`sender` has exchanged `shares`, owned by `owner`, for `assets`, and transferred those `assets` to `receiver`. emitted when shares are withdrawn from the Vault in ERC4626.redeem or ERC4626.withdraw methods.\"}},\"kind\":\"user\",\"methods\":{\"LOCKED_PROFIT_RELEASE_SCALE()\":{\"notice\":\"Represents the maximum value of the locked-in profit ratio scale (where 1e18 is 100%).\"},\"addStrategy(address,uint256)\":{\"notice\":\"Adds a new strategy to the vault.\"},\"addStrategyToQueue(address)\":{\"notice\":\"Adds a strategy to the withdrawal queue. The strategy must already be registered as a borrower.\"},\"asset()\":{\"notice\":\"The underlying token managed by the Vault. Has units defined by the corresponding ERC-20 contract. Stored as address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\"},\"availableCredit()\":{\"notice\":\"Returns the number of tokens the borrower (caller of this function) can take from the lender\"},\"borrowersData(address)\":{\"notice\":\"Records with information on each borrower using the lender's services\"},\"convertToAssets(uint256)\":{\"notice\":\"The amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - is NOT inclusive of any fees that are charged against assets in the Vault. - do NOT show any variations depending on the caller. - do NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - do NOT revert unless due to integer overflow caused by an unreasonably large input. - round down towards 0. This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"convertToShares(uint256)\":{\"notice\":\"The amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - is NOT inclusive of any fees that are charged against assets in the Vault. - do NOT show any variations depending on the caller. - do NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - do NOT revert unless due to integer overflow caused by an unreasonably large input. - round down towards 0. This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and from.\"},\"currentDebt()\":{\"notice\":\"Returns the amount of funds taken by the borrower (caller of this function).\"},\"currentDebt(address)\":{\"notice\":\"Returns the current debt that the strategy has.\"},\"currentDebtRatio()\":{\"notice\":\"Returns the debt ratio of the borrower (caller of this function).\"},\"debtRatio()\":{\"notice\":\"Debt ratio for the Lender across all borrowers (in BPS, <= 10k)\"},\"deposit(uint256)\":{\"notice\":\"Mints the Vault shares for msg.sender, according to the number of deposited base tokens. - emits the Deposit event. - support ERC-20 approve / transferFrom on asset as a deposit flow.   MAY support an additional flow in which the underlying tokens are owned by the Vault contract   before the deposit execution, and are accounted for during deposit. - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc). Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"deposit(uint256,address)\":{\"notice\":\"Mints Vault shares to receiver by depositing exactly amount of underlying tokens. - emits the Deposit event. - support ERC-20 approve / transferFrom on asset as a deposit flow.   MAY support an additional flow in which the underlying tokens are owned by the Vault contract   before the deposit execution, and are accounted for during deposit. - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage,   the user not approving enough underlying tokens to the Vault contract, etc). Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"getQueueSize()\":{\"notice\":\"Returns the size of the withdrawal queue.\"},\"isActivated()\":{\"notice\":\"Returns the activation status of the borrower (caller of this function).\"},\"isActivated(address)\":{\"notice\":\"Returns the activation status of the specified borrower.\"},\"lastReport()\":{\"notice\":\"Returns the last report timestamp of the borrower (caller of this function).\"},\"lastReport(address)\":{\"notice\":\"Returns the last report timestamp of the specified borrower.\"},\"lastReportTimestamp()\":{\"notice\":\"Last time a report occurred by any borrower\"},\"lendingAssets()\":{\"notice\":\"Returns the total amount of all tokens (including those on the contract balance and taken by borrowers)\"},\"lockedProfitBaseline()\":{\"notice\":\"The amount of funds that cannot be withdrawn by users.         Decreases with time at the rate of \\\"lockedProfitReleaseRate\\\".\"},\"lockedProfitReleaseRate()\":{\"notice\":\"The rate of \\\"lockedProfitBaseline\\\" decline on the locked-in profit scale (scaled to 1e18).         Represents the amount of funds that will be unlocked when one second passes.\"},\"managementFee()\":{\"notice\":\"Vault management fee (in BPS).\"},\"maxDeposit(address)\":{\"notice\":\"Maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - returns the maximum amount of assets deposit would allow to be deposited   for receiver and not cause a revert, which MUST NOT be higher than the actual maximum   that would be accepted (it should underestimate if necessary).   This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset. - factor in both global and user-specific limits, like if deposits are entirely disabled (even temporarily) it MUST return 0. - return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\"},\"maxMint(address)\":{\"notice\":\"Maximum amount of shares that can be minted from the Vault for the receiver, through a mint call. - return the maximum amount of shares mint would allow to be deposited to receiver   and not cause a revert, which MUST NOT be higher than the actual maximum   that would be accepted (it should underestimate if necessary).   This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset. - factor in both global and user-specific limits,   like if mints are entirely disabled (even temporarily) it MUST return 0. - return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\"},\"maxRedeem(address)\":{\"notice\":\"Maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - return the maximum amount of shares that could be transferred from owner through redeem   and not cause a revert, which MUST NOT be higher than the actual maximum   that would be accepted (it should underestimate if necessary). - factor in both global and user-specific limits,   like if redemption is entirely disabled (even temporarily) it MUST return 0.\"},\"maxWithdraw(address)\":{\"notice\":\"Maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - return the maximum amount of assets that could be transferred from owner through withdraw   and not cause a revert, which MUST NOT be higher than the actual maximum   that would be accepted (it should underestimate if necessary). - factor in both global and user-specific limits,   like if withdrawals are entirely disabled (even temporarily) it MUST return 0.\"},\"mint(uint256)\":{\"notice\":\"Mints exactly requested Vault shares to msg.sender by depositing any required amount of underlying tokens. - emits the Deposit event. - support ERC-20 approve / transferFrom on asset as a deposit flow.   MAY support an additional flow in which the underlying tokens are owned by the Vault contract   before the deposit execution, and are accounted for during deposit. - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc). Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"mint(uint256,address)\":{\"notice\":\"Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - emits the Deposit event. - support ERC-20 approve / transferFrom on asset as a deposit flow.   MAY support an additional flow in which the underlying tokens are owned by the Vault contract   before the deposit execution, and are accounted for during deposit. - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc). Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\"},\"outstandingDebt()\":{\"notice\":\"Returns the outstanding debt that the borrower (caller of this function) must repay\"},\"paused()\":{\"notice\":\"Indicates if the vault was shutted down or not.\"},\"previewDeposit(uint256)\":{\"notice\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - return as close to and no more than the exact amount of Vault shares that would be minted   in a deposit call in the same transaction.   I.e. deposit should return the same or more shares as previewDeposit if called in the same transaction. - NOT account for deposit limits like those returned from maxDeposit   and should always act as though the deposit would be accepted,   regardless if the user has enough tokens approved, etc. - inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause deposit to revert. Note that any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"previewMint(uint256)\":{\"notice\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - return as close to and no fewer than the exact amount of assets that would be deposited   in a mint call in the same transaction.   I.e. mint should return the same or fewer assets as previewMint if called in the same transaction. - NOT account for mint limits like those returned from maxMint   and should always act as though the mint would be accepted,   regardless if the user has enough tokens approved, etc. - inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - NOT revert due to vault specific user/global limits.   MAY revert due to other conditions that would also cause mint to revert. Note that any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting.\"},\"previewRedeem(uint256)\":{\"notice\":\"Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - return as close to and no more than the exact amount of assets that would be withdrawn   in a redeem call in the same transaction.   I.e. redeem should return the same or more assets as previewRedeem   if called in the same transaction. - NOT account for redemption limits like those returned from maxRedeem   and should always act as though the redemption would be accepted,   regardless if the user has enough shares, etc. - inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - NOT revert due to vault specific user/global limits.   MAY revert due to other conditions that would also cause redeem to revert. Note that any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming.\"},\"previewWithdraw(uint256)\":{\"notice\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - return as close to and no fewer than the exact amount of Vault shares   that would be burned in a withdraw call in the same transaction.   I.e. withdraw should return the same or fewer shares as previewWithdraw   if called in the same transaction. - NOT account for withdrawal limits like those returned from maxWithdraw   and should always act as though the withdrawal would be accepted,   regardless if the user has enough shares, etc. - inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - NOT revert due to vault specific user/global limits.   MAY revert due to other conditions that would also cause withdraw to revert. Note that any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing.\"},\"redeem(uint256)\":{\"notice\":\"Burns exactly shares from msg.sender and sends assets of underlying tokens to msg.sender. - emit the Withdraw event. - support a redeem flow where the shares are burned from owner directly where owner is msg.sender. - MAY support an additional flow in which the shares are transferred to the Vault contract   before the redeem execution, and are accounted for during redeem. - revert if all of shares cannot be redeemed (due to withdrawal limit being reached,   slippage, the owner not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"redeem(uint256,address,address)\":{\"notice\":\"Burns exactly shares from owner and sends assets of underlying tokens to receiver. - emit the Withdraw event. - support a redeem flow where the shares are burned from owner directly where owner is msg.sender. - support a redeem flow where the shares are burned from owner directly where msg.sender   has ERC-20 approval over the shares of owner. - MAY support an additional flow in which the shares are transferred to the Vault contract   before the redeem execution, and are accounted for during redeem. - revert if all of shares cannot be redeemed (due to withdrawal limit being reached,   slippage, the owner not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"removeStrategy(address,bool)\":{\"notice\":\"Removes a strategy from the vault.\"},\"reorderWithdrawalQueue(address[])\":{\"notice\":\"Sets the withdrawal queue.\"},\"reportNegativeDebtManagement(uint256,uint256)\":{\"notice\":\"Reports a negative result of the borrower's debt management.         The borrower must call this function if he is unable to cover his outstanding debt or if he has incurred any losses.\"},\"reportPositiveDebtManagement(uint256,uint256)\":{\"notice\":\"Reports a positive result of the borrower's debt management.         Borrower must call this function if he has made any profit         or/and has a free funds available to repay the outstanding debt (if any).\"},\"revokeStrategy(address)\":{\"notice\":\"Revokes a strategy from the vault.         Sets strategy's dept ratio to zero, so that the strategy cannot take funds from the vault.\"},\"rewards()\":{\"notice\":\"Rewards contract where management fees are sent to.\"},\"setEmergencyShutdown(bool)\":{\"notice\":\"Switches the vault pause state.\"},\"setLockedProfitReleaseRate(uint256)\":{\"notice\":\"Changes the rate of release of locked-in profit.\"},\"setManagementFee(uint256)\":{\"notice\":\"Sets the vault management fee.\"},\"setRewards(address)\":{\"notice\":\"Sets the vault rewards address.\"},\"strategyDebt(address)\":{\"notice\":\"Returns the current debt of the strategy.\"},\"strategyRatio(address)\":{\"notice\":\"Returns the debt ratio of the strategy.\"},\"totalAssets()\":{\"notice\":\"Total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault. - include any compounding that occurs from yield. - inclusive of any fees that are charged against assets in the Vault. - is NOT revert\"},\"totalDebt()\":{\"notice\":\"Amount of tokens that all borrowers have taken\"},\"version()\":{\"notice\":\"Returns the current version of this contract\"},\"withdraw(uint256)\":{\"notice\":\"Burns shares from msg.sender and sends exactly assets of underlying tokens to msg.sender. - emit the Withdraw event. - support a withdraw flow where the shares are burned from owner directly where owner is msg.sender. - MAY support an additional flow in which the shares are transferred to the Vault contract   before the withdraw execution, and are accounted for during withdraw. - revert if all of assets cannot be withdrawn (due to withdrawal limit being reached,   slippage, the owner not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"withdraw(uint256,address,address)\":{\"notice\":\"Burns shares from owner and sends exactly assets of underlying tokens to receiver. - emit the Withdraw event. - support a withdraw flow where the shares are burned from owner directly where owner is msg.sender. - support a withdraw flow where the shares are burned from owner directly where msg.sender   has ERC-20 approval over the shares of owner. - MAY support an additional flow in which the shares are transferred to the Vault contract   before the withdraw execution, and are accounted for during withdraw. - revert if all of assets cannot be withdrawn (due to withdrawal limit being reached,   slippage, the owner not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately.\"},\"withdrawalQueue(uint256)\":{\"notice\":\"Arranged list of addresses of strategies, which defines the order for withdrawal.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":contracts/=src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x7967d130887c4b40666cd88f8744691d4527039a1b2a38aa0de41481ef646778\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC777/ERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC777Upgradeable.sol\\\";\\nimport \\\"./IERC777RecipientUpgradeable.sol\\\";\\nimport \\\"./IERC777SenderUpgradeable.sol\\\";\\nimport \\\"../ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/IERC1820RegistryUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n */\\ncontract ERC777Upgradeable is Initializable, ContextUpgradeable, IERC777Upgradeable, IERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    IERC1820RegistryUpgradeable internal constant _ERC1820_REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    function __ERC777_init(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        __ERC777_init_unchained(name_, symbol_, defaultOperators_);\\n    }\\n\\n    function __ERC777_init_unchained(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _defaultOperatorsArray = defaultOperators_;\\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\\n            _defaultOperators[defaultOperators_[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _send(_msgSender(), recipient, amount, \\\"\\\", \\\"\\\", false);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public virtual override {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\\n        return\\n            operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view virtual override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators cannot\\n     * call `transferFrom` (unless they have allowance), and accounts with\\n     * allowance cannot call `operatorSend` (unless they are operators).\\n     *\\n     * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(holder, spender, amount);\\n        _send(holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with the caller address as the `operator` and with\\n     * `userData` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        _mint(account, amount, userData, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If `requireReceptionAck` is set to true, and if a send hook is\\n     * registered for `account`, the corresponding function will be called with\\n     * `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(\\n        address from,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        // Update state variables\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(\\n        address holder,\\n        address spender,\\n        uint256 value\\n    ) internal virtual {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777SenderUpgradeable(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777RecipientUpgradeable(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {IERC20-Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC777: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[41] private __gap;\\n}\\n\",\"keccak256\":\"0x4a7a8fc2fe7824e02ca5729e20e47689eeec83de4645d4704ae501643a5141b0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777RecipientUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777RecipientUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1fbcfef49c67aea4ca9417b337a363e933127047e73194011b78c1741602615b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777SenderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n * their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777SenderUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x79fc5ced00b0715d84b75e016754292e434cf2cbbc58c1f275ef0754653a6d78\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777Upgradeable {\\n    /**\\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\\n     */\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\\n     */\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n}\\n\",\"keccak256\":\"0xe927ed4882471c3c8ff54736fcce6093f42963fab7b8e0a225476af65a083e07\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(\\n        address account,\\n        bytes32 _interfaceHash,\\n        address implementer\\n    ) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using or updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x98156a8359df02baf3ca7b902dd41c5a0f98c57597b6642a0c7695d43607288c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\\n        return expWad((lnWad(x) * y) / int256(WAD)); // Using ln(x) means x must be greater than 0.\\n    }\\n\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return 0;\\n\\n            // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n            // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n            if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5**18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n        }\\n    }\\n\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            require(x > 0, \\\"UNDEFINED\\\");\\n\\n            // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n            // We do this by multiplying by 2**96 / 10**18. But since\\n            // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n            // and add ln(2**96 / 10**18) at the end.\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            int256 k = int256(log2(uint256(x))) - 96;\\n            x <<= uint256(159 - k);\\n            x = int256(uint256(x) >> 159);\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // p is made monic, we will multiply by a scale factor later.\\n            int256 p = x + 3273285459638523848632254066296;\\n            p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n            p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n            p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n            p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n            p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n            p = p * x - (795164235651350426258249787498 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            // q is monic by convention.\\n            int256 q = x + 5573035233440673466300451813936;\\n            q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n            q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n            q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n            q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n            q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n            q = ((q * x) >> 96) + 909429971244387300277376558375;\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial is known not to have zeros in the domain.\\n                // No scaling required because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r is in the range (0, 0.125) * 2**96\\n\\n            // Finalization, we need to:\\n            // * multiply by the scale factor s = 5.549\\u2026\\n            // * add ln(2**96 / 10**18)\\n            // * add k * ln(2)\\n            // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n            // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n            r *= 1677202110996718588342820967067443963516166;\\n            // add ln(2) * k * 5e18 * 2**192\\n            r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n            // add ln(2**96 / 10**18) * 5e18 * 2**192\\n            r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n            // base conversion: mul 2**18 / 2**192\\n            r >>= 174;\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        require(x > 0, \\\"UNDEFINED\\\");\\n\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\\n            r := or(r, lt(0x1, shr(r, x)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x622fcd8a49e132df5ec7651cc6ae3aaf0cf59bdcd67a9a804a1b9e2485113b7d\",\"license\":\"MIT\"},\"src/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {ILender} from \\\"./lending/ILender.sol\\\";\\nimport {IERC4626} from \\\"./tokens/IERC4626.sol\\\";\\n\\ninterface IVault is ILender, IERC4626 {\\n    /// @notice Revokes a strategy from the vault.\\n    ///         Sets strategy's dept ratio to zero, so that the strategy cannot take funds from the vault.\\n    /// @param strategy a strategy to revoke.\\n    function revokeStrategy(address strategy) external;\\n\\n    /// @notice Indicates if the vault was shutted down or not.\\n    /// @return \\\"true\\\" if the contract is paused, and \\\"false\\\" otherwise.\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x98f31c4dddc397d2917363ba3497f2bd45fff7110b1a682c368eb3684cd1b734\",\"license\":\"AGPL-3.0\"},\"src/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {MathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {SafeERC20Upgradeable, IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {Lender, BorrowerDoesNotExist} from \\\"./lending/Lender.sol\\\";\\nimport {SafeERC4626Upgradeable, ERC4626Upgradeable} from \\\"./tokens/SafeERC4626Upgradeable.sol\\\";\\nimport {IStrategy} from \\\"./strategies/IStrategy.sol\\\";\\nimport {AddressList} from \\\"./structures/AddressList.sol\\\";\\nimport {SafeInitializable} from \\\"./upgradeable/SafeInitializable.sol\\\";\\nimport {SafeUUPSUpgradeable} from \\\"./upgradeable/SafeUUPSUpgradeable.sol\\\";\\nimport {IVersionable} from \\\"./upgradeable/IVersionable.sol\\\";\\n\\nerror ExceededMaximumFeeValue();\\nerror UnexpectedZeroAddress();\\nerror InappropriateStrategy();\\nerror StrategyNotFound();\\nerror StrategyAlreadyExists();\\nerror InsufficientVaultBalance(uint256 assets, uint256 shares);\\nerror WrongQueueSize(uint256 size);\\nerror InvalidLockedProfitReleaseRate(uint256 durationInSeconds);\\nerror AccessDeniedForCaller(address caller);\\n\\ncontract Vault is IVault, SafeUUPSUpgradeable, SafeERC4626Upgradeable, Lender {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressList for address[];\\n\\n    /// @notice Represents the maximum value of the locked-in profit ratio scale (where 1e18 is 100%).\\n    uint256 public constant LOCKED_PROFIT_RELEASE_SCALE = 10**18;\\n\\n    /// @notice Rewards contract where management fees are sent to.\\n    address public rewards;\\n\\n    /// @notice Vault management fee (in BPS).\\n    uint256 public managementFee;\\n\\n    /// @notice Arranged list of addresses of strategies, which defines the order for withdrawal.\\n    address[] public withdrawalQueue;\\n\\n    /// @notice The amount of funds that cannot be withdrawn by users.\\n    ///         Decreases with time at the rate of \\\"lockedProfitReleaseRate\\\".\\n    uint256 public lockedProfitBaseline;\\n\\n    /// @notice The rate of \\\"lockedProfitBaseline\\\" decline on the locked-in profit scale (scaled to 1e18).\\n    ///         Represents the amount of funds that will be unlocked when one second passes.\\n    uint256 public lockedProfitReleaseRate;\\n\\n    /// @notice Event that should happen when the strategy connects to the vault.\\n    /// @param strategy Address of the strategy contract.\\n    /// @param debtRatio Maximum portion of the loan that the strategy can take (in BPS).\\n    event StrategyAdded(address indexed strategy, uint256 debtRatio);\\n\\n    /// @notice Event that should happen when the strategy has been revoked from the vault.\\n    /// @param strategy Address of the strategy contract.\\n    event StrategyRevoked(address indexed strategy);\\n\\n    /// @notice Event that should happen when the strategy has been removed from the vault.\\n    /// @param strategy Address of the strategy contract.\\n    /// @param fromQueueOnly If \\\"true\\\", then the strategy has only been removed from the withdrawal queue.\\n    event StrategyRemoved(address indexed strategy, bool fromQueueOnly);\\n\\n    /// @notice Event that should happen when the strategy has been returned to the withdrawal queue.\\n    /// @param strategy Address of the strategy contract.\\n    event StrategyReturnedToQueue(address indexed strategy);\\n\\n    /// @notice Event that should happen when the locked-in profit release rate changed.\\n    event LockedProfitReleaseRateChanged(uint256 rate);\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    ///      variables without shifting down storage in the inheritance chain.\\n    ///      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    /// @inheritdoc IVersionable\\n    function version() external pure override returns (string memory) {\\n        return \\\"0.1.5\\\";\\n    }\\n\\n    modifier onlyOwnerOrStrategy(address strategy) {\\n        if (msg.sender != owner() && msg.sender != strategy) {\\n            revert AccessDeniedForCaller(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(bool needDisableInitializers) SafeInitializable(needDisableInitializers) {} // solhint-disable-line no-empty-blocks\\n\\n    function initialize(\\n        address _asset,\\n        address _rewards,\\n        uint256 _managementFee,\\n        uint256 _lockedProfitReleaseRate,\\n        string memory _name,\\n        string memory _symbol,\\n        address[] memory _defaultOperators\\n    ) public initializer {\\n        __SafeUUPSUpgradeable_init(); // Ownable under the hood\\n        __Lender_init();\\n        __SafeERC4626_init(\\n            IERC20Upgradeable(_asset),\\n            bytes(_name).length == 0\\n                ? string.concat(\\n                    IERC20Metadata(_asset).symbol(),\\n                    \\\" Eonian Vault Shares\\\"\\n                )\\n                : _name,\\n            bytes(_symbol).length == 0\\n                ? string.concat(\\\"eon\\\", IERC20Metadata(_asset).symbol())\\n                : _symbol,\\n            _defaultOperators\\n        );\\n\\n        setRewards(_rewards);\\n        setManagementFee(_managementFee);\\n        setLockedProfitReleaseRate(_lockedProfitReleaseRate);\\n    }\\n\\n    /// @dev Override to add the \\\"whenNotPaused\\\" modifier\\n    /// @inheritdoc SafeERC4626Upgradeable\\n    function deposit(uint256 assets)\\n        public\\n        override\\n        whenNotPaused\\n        returns (uint256 shares)\\n    {\\n        return super.deposit(assets);\\n    }\\n\\n    /// @notice Hook that is used before withdrawals to release assets from strategies if necessary.\\n    /// @inheritdoc ERC4626Upgradeable\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal override {\\n        // There is no need to withdraw assets from strategies, the vault has sufficient funds\\n        if (_freeAssets() >= assets) {\\n            return;\\n        }\\n\\n        for (uint256 i = 0; i < withdrawalQueue.length; i++) {\\n            // If the vault already has the required amount of funds, we need to finish the withdrawal\\n            uint256 vaultBalance = _freeAssets();\\n            if (assets <= vaultBalance) {\\n                break;\\n            }\\n\\n            address strategy = withdrawalQueue[i];\\n\\n            // We can only withdraw the amount that the strategy has as debt,\\n            // so that the strategy can work on the unreported (yet) funds it has earned\\n            uint256 requiredAmount = MathUpgradeable.min(\\n                assets - vaultBalance,\\n                borrowersData[strategy].debt\\n            );\\n\\n            // Skip this strategy is there is nothing to withdraw\\n            if (requiredAmount == 0) {\\n                continue;\\n            }\\n\\n            // Withdraw the required amount of funds from the strategy\\n            uint256 loss = IStrategy(strategy).withdraw(requiredAmount);\\n\\n            // If the strategy failed to return all of the requested funds, we need to reduce the strategy's debt ratio\\n            if (loss > 0) {\\n                _decreaseBorrowerCredibility(strategy, loss);\\n            }\\n        }\\n\\n        // Revert if insufficient assets remain in the vault after withdrawal from all strategies\\n        if (_freeAssets() < assets) {\\n            revert InsufficientVaultBalance(assets, shares);\\n        }\\n    }\\n\\n    /// @notice Adds a new strategy to the vault.\\n    /// @param strategy a new strategy address.\\n    /// @param debtRatio a ratio that shows how much of the new strategy can take, relative to other strategies.\\n    function addStrategy(address strategy, uint256 debtRatio)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        if (strategy == address(0)) {\\n            revert UnexpectedZeroAddress();\\n        }\\n\\n        // Strategy should refer to this vault and has the same underlying asset\\n        if (\\n            this != IStrategy(strategy).vault() ||\\n            asset != IStrategy(strategy).asset()\\n        ) {\\n            revert InappropriateStrategy();\\n        }\\n\\n        _registerBorrower(strategy, debtRatio);\\n        withdrawalQueue.add(strategy);\\n\\n        emit StrategyAdded(strategy, debtRatio);\\n    }\\n\\n    /// @notice Adds a strategy to the withdrawal queue. The strategy must already be registered as a borrower.\\n    /// @param strategy a strategy address.\\n    function addStrategyToQueue(address strategy) external onlyOwner {\\n        if (strategy == address(0)) {\\n            revert UnexpectedZeroAddress();\\n        }\\n\\n        if (withdrawalQueue.contains(strategy)) {\\n            revert StrategyAlreadyExists();\\n        }\\n\\n        if (borrowersData[strategy].activationTimestamp == 0) {\\n            revert BorrowerDoesNotExist();\\n        }\\n\\n        withdrawalQueue.add(strategy);\\n\\n        emit StrategyReturnedToQueue(strategy);\\n    }\\n\\n    /// @inheritdoc IVault\\n    function revokeStrategy(address strategy)\\n        external\\n        onlyOwnerOrStrategy(strategy)\\n    {\\n        _setBorrowerDebtRatio(strategy, 0);\\n        emit StrategyRevoked(strategy);\\n    }\\n\\n    /// @notice Removes a strategy from the vault.\\n    /// @param strategy a strategy to remove.\\n    /// @param fromQueueOnly if \\\"true\\\", then the strategy will only be removed from the withdrawal queue.\\n    function removeStrategy(address strategy, bool fromQueueOnly)\\n        external\\n        onlyOwner\\n    {\\n        bool removedFromQueue = withdrawalQueue.remove(strategy);\\n        if (!removedFromQueue) {\\n            revert StrategyNotFound();\\n        }\\n\\n        if (!fromQueueOnly) {\\n            _unregisterBorrower(strategy);\\n        }\\n\\n        emit StrategyRemoved(strategy, fromQueueOnly);\\n    }\\n\\n    /// @notice Sets the withdrawal queue.\\n    /// @param queue a new queue that will replace the existing one.\\n    ///        Should contain only those elements that already present in the existing queue.\\n    function reorderWithdrawalQueue(address[] memory queue) external onlyOwner {\\n        withdrawalQueue = withdrawalQueue.reorder(queue);\\n    }\\n\\n    /// @notice Sets the vault rewards address.\\n    /// @param _rewards a new rewards address.\\n    function setRewards(address _rewards) public onlyOwner {\\n        rewards = _rewards;\\n    }\\n\\n    /// @notice Sets the vault management fee.\\n    /// @param _managementFee a new management fee value (in BPS).\\n    function setManagementFee(uint256 _managementFee) public onlyOwner {\\n        if (_managementFee > MAX_BPS) {\\n            revert ExceededMaximumFeeValue();\\n        }\\n\\n        managementFee = _managementFee;\\n    }\\n\\n    /// @notice Switches the vault pause state.\\n    /// @param shutdown a new vault pause state. If \\\"true\\\" is passed, the vault will be paused.\\n    function setEmergencyShutdown(bool shutdown) external onlyOwner {\\n        shutdown ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Changes the rate of release of locked-in profit.\\n    /// @param rate the rate of release of locked profit (percent per second scaled to 1e18).\\n    ///             The desire value of this parameter can be calculated as 1e18 / DurationInSeconds.\\n    function setLockedProfitReleaseRate(uint256 rate) public onlyOwner {\\n        if (rate > LOCKED_PROFIT_RELEASE_SCALE) {\\n            revert InvalidLockedProfitReleaseRate(rate);\\n        }\\n\\n        lockedProfitReleaseRate = rate;\\n        emit LockedProfitReleaseRateChanged(rate);\\n    }\\n\\n    /// @notice Calculates the locked profit, takes into account the change since the last report.\\n    function _lockedProfit() internal view returns (uint256) {\\n        // Release rate should be small, since the timestamp can be manipulated by the node operator,\\n        // not expected to have much impact, since the changes will be applied to all users and cannot be abused directly.\\n        uint256 ratio = (block.timestamp - lastReportTimestamp) * lockedProfitReleaseRate; // solhint-disable-line not-rely-on-time\\n\\n        // In case the ratio >= scale, the calculation anyway leads to zero.\\n        if (ratio >= LOCKED_PROFIT_RELEASE_SCALE) {\\n            return 0;\\n        }\\n\\n        uint256 lockedProfitChange = (ratio * lockedProfitBaseline) / LOCKED_PROFIT_RELEASE_SCALE;\\n\\n        // Reducing locked profits over time frees up profits for users\\n        return lockedProfitBaseline - lockedProfitChange;\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _chargeFees(uint256 extraFreeFunds)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        uint256 fee = (extraFreeFunds * managementFee) / MAX_BPS;\\n        if (fee > 0) {\\n            _mint(rewards, convertToShares(fee), \\\"\\\", \\\"\\\", false);\\n        }\\n\\n        return fee;\\n    }\\n\\n    /// @notice Updates the locked-in profit value according to the positive debt management report of the strategy\\n    /// @inheritdoc Lender\\n    function _afterPositiveDebtManagementReport(\\n        uint256 extraFreeFunds,\\n        uint256 chargedFees\\n    ) internal override {\\n        // Locking every reported strategy profit, taking into account the charged fees.\\n        lockedProfitBaseline = _lockedProfit() + extraFreeFunds - chargedFees;\\n    }\\n\\n    /// @notice Updates the locked-in profit value according to the negative debt management report of the strategy\\n    /// @inheritdoc Lender\\n    function _afterNegativeDebtManagementReport(uint256 loss)\\n        internal\\n        override\\n    {\\n        uint256 currentLockedProfit = _lockedProfit();\\n\\n        // If a loss occurs, it is necessary to release the appropriate amount of funds that users were able to withdraw it.\\n        lockedProfitBaseline = currentLockedProfit > loss\\n            ? currentLockedProfit - loss\\n            : 0;\\n    }\\n\\n    /// @notice Returns the current debt of the strategy.\\n    /// @param strategy the strategy address.\\n    function strategyDebt(address strategy) external view returns (uint256) {\\n        return borrowersData[strategy].debt;\\n    }\\n\\n    /// @notice Returns the debt ratio of the strategy.\\n    /// @param strategy the strategy address.\\n    function strategyRatio(address strategy) external view returns (uint256) {\\n        return borrowersData[strategy].debtRatio;\\n    }\\n\\n    /// @notice Returns the size of the withdrawal queue.\\n    function getQueueSize() external view returns (uint256) {\\n        return withdrawalQueue.length;\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _freeAssets() internal view override returns (uint256) {\\n        return asset.balanceOf(address(this));\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _borrowerFreeAssets(address borrower)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return asset.balanceOf(borrower);\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function totalAssets() public view override returns (uint256) {\\n        return super.lendingAssets() - _lockedProfit();\\n    }\\n\\n    /// @inheritdoc IVault\\n    /// @dev Explicitly overridden here to keep this function exposed via \\\"IVault\\\" interface.\\n    function paused()\\n        public\\n        view\\n        override(IVault, PausableUpgradeable)\\n        returns (bool)\\n    {\\n        return super.paused();\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _transferFundsToBorrower(address borrower, uint256 amount)\\n        internal\\n        override\\n    {\\n        asset.safeTransfer(borrower, amount);\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _takeFundsFromBorrower(address borrower, uint256 amount)\\n        internal\\n        override\\n    {\\n        asset.safeTransferFrom(borrower, address(this), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x94f8a14564423b31a93544888dea9e31a9b06a683f9f79a9c6fc84f2319143ee\",\"license\":\"AGPL-3.0\"},\"src/lending/ILender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface ILender {\\n    /// @notice Returns the number of tokens the borrower (caller of this function) can take from the lender\\n    /// @return Available credit as amount of tokens\\n    function availableCredit() external view returns (uint256);\\n\\n    /// @notice Returns the outstanding debt that the borrower (caller of this function) must repay\\n    /// @return Outstanding debt as amount of tokens\\n    function outstandingDebt() external view returns (uint256);\\n\\n    /// @notice Returns the amount of funds taken by the borrower (caller of this function).\\n    /// @return Debt as amount of tokens\\n    function currentDebt() external view returns (uint256);\\n\\n    /// @notice Returns the debt ratio of the borrower (caller of this function).\\n    function currentDebtRatio() external view returns (uint256);\\n\\n    /// @notice Returns the last report timestamp of the borrower (caller of this function).\\n    function lastReport() external view returns (uint256);\\n\\n    /// @notice Returns the activation status of the borrower (caller of this function).\\n    /// @return \\\"true\\\" if the borrower is active\\n    function isActivated() external view returns (bool);\\n\\n    /// @notice Reports a positive result of the borrower's debt management.\\n    ///         Borrower must call this function if he has made any profit\\n    ///         or/and has a free funds available to repay the outstanding debt (if any).\\n    /// @param extraFreeFunds an extra amount of free funds borrower's contract has.\\n    ///                       This reporting amount must be greater than the borrower's outstanding debt.\\n    /// @param debtPayment is the funds that the borrower must release in order to pay off his outstanding debt (if any).\\n    function reportPositiveDebtManagement(\\n        uint256 extraFreeFunds,\\n        uint256 debtPayment\\n    ) external;\\n\\n    /// @notice Reports a negative result of the borrower's debt management.\\n    ///         The borrower must call this function if he is unable to cover his outstanding debt or if he has incurred any losses.\\n    /// @param loss a number of tokens by which the borrower's balance has decreased since the last report.\\n    ///        May include a portion of the outstanding debt that the borrower was unable to repay.\\n    /// @param debtPayment is the funds that the borrower must release in order to pay off his outstanding debt (if any).\\n    function reportNegativeDebtManagement(uint256 loss, uint256 debtPayment)\\n        external;\\n}\\n\",\"keccak256\":\"0x98405a336e0625385695fa8b1389b6dd35c289d38bcb06b347682088d87dd33b\",\"license\":\"AGPL-3.0\"},\"src/lending/Lender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {MathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {ILender} from \\\"./ILender.sol\\\";\\nimport {SafeInitializable} from \\\"../upgradeable/SafeInitializable.sol\\\";\\n\\nerror BorrowerAlreadyExists();\\nerror BorrowerDoesNotExist();\\nerror BorrowerHasDebt();\\nerror CallerIsNotABorrower();\\nerror LenderRatioExceeded(uint256 freeRatio);\\nerror FalsePositiveReport();\\n\\nabstract contract Lender is\\n    ILender,\\n    SafeInitializable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    struct BorrowerData {\\n        /// Timestamp of the block in which the borrower was activated\\n        uint256 activationTimestamp;\\n        /// Last time a borrower made a report\\n        uint256 lastReportTimestamp;\\n        /// Amount of tokens taken by the borrower\\n        uint256 debt;\\n        /// Maximum portion of the loan that the borrower can take (in BPS)\\n        /// Represents credibility of the borrower\\n        uint256 debtRatio;\\n    }\\n\\n    uint256 public constant MAX_BPS = 10_000;\\n\\n    /// @notice Amount of tokens that all borrowers have taken\\n    uint256 public totalDebt;\\n\\n    /// @notice Debt ratio for the Lender across all borrowers (in BPS, <= 10k)\\n    uint256 public debtRatio;\\n\\n    /// @notice Last time a report occurred by any borrower\\n    uint256 public lastReportTimestamp;\\n\\n    /// @notice Records with information on each borrower using the lender's services\\n    mapping(address => BorrowerData) public borrowersData;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /// @notice Event that must occur when the borrower reported the results of his debt management\\n    /// @param borrower Borrower's contract address\\n    /// @param debtPayment Amount of outstanding debt repaid by the borrower\\n    /// @param freeFunds Free funds on the borrower's contract that remain after the debt is paid\\n    /// @param fundsGiven Funds issued to the borrower by this lender\\n    /// @param fundsTaken Funds that have been taken from the borrower by the lender\\n    /// @param loss Amount of funds that the borrower realised as loss\\n    event BorrowerDebtManagementReported(\\n        address indexed borrower,\\n        uint256 debtPayment,\\n        uint256 freeFunds,\\n        uint256 fundsGiven,\\n        uint256 fundsTaken,\\n        uint256 loss\\n    );\\n\\n    modifier onlyBorrowers() {\\n        if (borrowersData[msg.sender].activationTimestamp == 0) {\\n            revert CallerIsNotABorrower();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Updates the last report timestamp for the specified borrower and this lender.\\n    modifier updateLastReportTime() {\\n        _;\\n        borrowersData[msg.sender].lastReportTimestamp = lastReportTimestamp = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    function __Lender_init() internal onlyInitializing {\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        __Lender_init_unchained();\\n    }\\n\\n    function __Lender_init_unchained() internal onlyInitializing {\\n        lastReportTimestamp = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /// @inheritdoc ILender\\n    function availableCredit() external view override returns (uint256) {\\n        return _availableCredit(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function outstandingDebt() external view override returns (uint256) {\\n        return _outstandingDebt(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function currentDebt() external view override returns (uint256) {\\n        return currentDebt(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function currentDebtRatio() external view override returns (uint256) {\\n        return borrowersData[msg.sender].debt;\\n    }\\n\\n    /// @inheritdoc ILender\\n    function isActivated() external view override returns (bool) {\\n        return isActivated(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function lastReport() external view override returns (uint256) {\\n        return lastReport(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function reportPositiveDebtManagement(\\n        uint256 extraFreeFunds,\\n        uint256 debtPayment\\n    ) external override onlyBorrowers updateLastReportTime nonReentrant {\\n        // Checking whether the borrower is telling the truth about his available funds\\n        if (_borrowerFreeAssets(msg.sender) < extraFreeFunds + debtPayment) {\\n            revert FalsePositiveReport();\\n        }\\n\\n        uint256 chargedFees = 0;\\n        // We can only charge a fees if the borrower has reported extra free funds,\\n        // if it's the first report at this block and only if the borrower was registered some time ago\\n        if (\\n            extraFreeFunds > 0 &&\\n            borrowersData[msg.sender].lastReportTimestamp < block.timestamp && // solhint-disable-line not-rely-on-time\\n            borrowersData[msg.sender].activationTimestamp < block.timestamp    // solhint-disable-line not-rely-on-time\\n        ) {\\n            chargedFees = _chargeFees(extraFreeFunds);\\n        }\\n\\n        _rebalanceBorrowerFunds(msg.sender, debtPayment, extraFreeFunds, 0);\\n\\n        _afterPositiveDebtManagementReport(extraFreeFunds, chargedFees);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function reportNegativeDebtManagement(uint256 loss, uint256 debtPayment)\\n        external\\n        override\\n        onlyBorrowers\\n        updateLastReportTime\\n        nonReentrant\\n    {\\n        // Checking whether the borrower has available funds for debt payment\\n        require(_borrowerFreeAssets(msg.sender) >= debtPayment, \\\"Not enough assets for payment\\\");\\n\\n        // Debt wasn't repaid, we need to decrease the ratio of this borrower\\n        if (loss > 0) {\\n            _decreaseBorrowerCredibility(msg.sender, loss);\\n        }\\n\\n        _rebalanceBorrowerFunds(msg.sender, debtPayment, 0, loss);\\n\\n        _afterNegativeDebtManagementReport(loss);\\n    }\\n\\n    /// @notice Balances the borrower's account and adjusts the current amount of funds the borrower can take.\\n    /// @param borrower a borrower's contract address.\\n    /// @param debtPayment an amount of outstanding debt since the previous report, that the borrower managed to cover. Can be zero.\\n    /// @param borrowerFreeFunds a funds that the borrower has earned since the previous report. Can be zero.\\n    /// @param loss a number of tokens by which the borrower's balance has decreased since the last report.\\n    function _rebalanceBorrowerFunds(\\n        address borrower,\\n        uint256 debtPayment,\\n        uint256 borrowerFreeFunds,\\n        uint256 loss\\n    ) private {\\n        // Calculate the amount of credit the lender can provide to the borrower (if any)\\n        uint256 borrowerAvailableCredit = _availableCredit(borrower);\\n\\n        // Make sure that the borrower's debt payment doesn't exceed his actual outstanding debt\\n        uint256 borrowerOutstandingDebt = _outstandingDebt(msg.sender);\\n        debtPayment = MathUpgradeable.min(debtPayment, borrowerOutstandingDebt);\\n\\n        // Take into account repaid debt, if any\\n        if (debtPayment > 0) {\\n            borrowersData[borrower].debt -= debtPayment;\\n            totalDebt -= debtPayment;\\n        }\\n\\n        // Allocate some funds to the borrower if possible\\n        if (borrowerAvailableCredit > 0) {\\n            borrowersData[borrower].debt += borrowerAvailableCredit;\\n            totalDebt += borrowerAvailableCredit;\\n        }\\n\\n        // Now we need to compare the allocated funds to the borrower and his current free balance.\\n        // If the number of unrealized tokens on the borrower's contract is less than the available credit, \\n        // the lender must give that difference to the borrower.\\n        // Otherwise (if the amount of the borrower's available funds is greater than \\n        // he should have according to his share), the lender must take that portion of the funds for himself.\\n        uint256 freeBorrowerBalance = borrowerFreeFunds + debtPayment;\\n        uint256 fundsGiven = 0;\\n        uint256 fundsTaken = 0;\\n        if (freeBorrowerBalance < borrowerAvailableCredit) {\\n            fundsGiven = borrowerAvailableCredit - freeBorrowerBalance;\\n            _transferFundsToBorrower(borrower, fundsGiven);\\n        } else if (freeBorrowerBalance > borrowerAvailableCredit) {\\n            fundsTaken = freeBorrowerBalance - borrowerAvailableCredit;\\n            _takeFundsFromBorrower(borrower, fundsTaken);\\n        }\\n\\n        emit BorrowerDebtManagementReported(\\n            borrower,\\n            debtPayment,\\n            borrowerFreeFunds,\\n            fundsGiven,\\n            fundsTaken,\\n            loss\\n        );\\n    }\\n\\n    /// @notice Returns the unrealized amount of the lender's tokens (lender's contract balance)\\n    function _freeAssets() internal view virtual returns (uint256);\\n\\n    /// @notice Returns the unrealized amount of the borrower's tokens (contract balance of the specified borrower)\\n    function _borrowerFreeAssets(address borrower)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /// @notice Transfers a specified amount of tokens to the borrower\\n    function _transferFundsToBorrower(address borrower, uint256 amount)\\n        internal\\n        virtual;\\n\\n    /// @notice Takes a specified amount of tokens from the borrower\\n    function _takeFundsFromBorrower(address borrower, uint256 amount)\\n        internal\\n        virtual;\\n\\n    /// @notice Returns the total amount of all tokens (including those on the contract balance and taken by borrowers)\\n    function lendingAssets() public view virtual returns (uint256) {\\n        return _freeAssets() + totalDebt;\\n    }\\n\\n    /// @notice Returns the current debt that the strategy has.\\n    function currentDebt(address borrower) public view returns (uint256) {\\n        return borrowersData[borrower].debt;\\n    }\\n\\n    /// @notice Returns the activation status of the specified borrower.\\n    function isActivated(address borrower) public view returns (bool) {\\n        return borrowersData[borrower].activationTimestamp > 0;\\n    }\\n\\n    /// @notice Returns the last report timestamp of the specified borrower.\\n    function lastReport(address borrower) public view returns (uint256) {\\n        return borrowersData[borrower].lastReportTimestamp;\\n    }\\n\\n    /// @notice Returns the total number of tokens borrowers can take.\\n    function _debtLimit() private view returns (uint256) {\\n        return (debtRatio * lendingAssets()) / MAX_BPS;\\n    }\\n\\n    /// @notice Lowers the borrower's debt he can take by specified loss and decreases his credibility.\\n    /// @dev This function has \\\"internal\\\" visibility because it's used in tests.\\n    function _decreaseBorrowerCredibility(address borrower, uint256 loss)\\n        internal\\n    {\\n        uint256 debt = borrowersData[borrower].debt;\\n\\n        // Make sure the borrower's loss is less than his entire debt\\n        require(debt >= loss, \\\"Loss is greater than the debt\\\");\\n\\n        // To decrease credibility of the borrower we should lower his \\\"debtRatio\\\"\\n        if (debtRatio > 0) {\\n            uint256 debtRatioChange = MathUpgradeable.min(\\n                (debtRatio * loss) / totalDebt,\\n                borrowersData[borrower].debtRatio\\n            );\\n            if (debtRatioChange != 0) {\\n                borrowersData[borrower].debtRatio -= debtRatioChange;\\n                debtRatio -= debtRatioChange;\\n            }\\n        }\\n\\n        // Also, need to reduce the max amount of funds that can be taken by the borrower\\n        borrowersData[borrower].debt -= loss;\\n        totalDebt -= loss;\\n    }\\n\\n    /// @notice See external implementation\\n    function _availableCredit(address borrower)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Lender is paused, no funds available for the borrower\\n        if (paused()) {\\n            return 0;\\n        }\\n\\n        uint256 lenderDebtLimit = _debtLimit();\\n        uint256 lenderDebt = totalDebt;\\n        uint256 borrowerDebtLimit = (borrowersData[borrower].debtRatio *\\n            lendingAssets()) / MAX_BPS;\\n        uint256 borrowerDebt = borrowersData[borrower].debt;\\n\\n        // There're no more funds for the borrower because he has outstanding debt or the lender's available funds have been exhausted\\n        if (\\n            lenderDebtLimit <= lenderDebt || borrowerDebtLimit <= borrowerDebt\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 lenderAvailableFunds = lenderDebtLimit - lenderDebt;\\n        uint256 borrowerIntendedCredit = borrowerDebtLimit - borrowerDebt;\\n\\n        // Borrower may not take more funds than the lender's limit\\n        uint256 borrowerAvailableCredit = MathUpgradeable.min(\\n            lenderAvailableFunds,\\n            borrowerIntendedCredit\\n        );\\n\\n        // Available credit is limited by the existing number of tokens on the lender's contract\\n        borrowerAvailableCredit = MathUpgradeable.min(\\n            borrowerAvailableCredit,\\n            _freeAssets()\\n        );\\n\\n        return borrowerAvailableCredit;\\n    }\\n\\n    /// @notice See external implementation\\n    function _outstandingDebt(address borrower)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 borrowerDebt = borrowersData[borrower].debt;\\n        if (paused() || debtRatio == 0) {\\n            return borrowerDebt;\\n        }\\n\\n        uint256 borrowerDebtLimit = (borrowersData[borrower].debtRatio *\\n            lendingAssets()) / MAX_BPS;\\n        if (borrowerDebt <= borrowerDebtLimit) {\\n            return 0;\\n        }\\n\\n        return borrowerDebt - borrowerDebtLimit;\\n    }\\n\\n    /// @notice Registers a new borrower and sets for him a certain debt ratio\\n    function _registerBorrower(address borrower, uint256 borrowerDebtRatio)\\n        internal\\n    {\\n        // Check if specified borrower has already registered\\n        if (isActivated(borrower)) {\\n            revert BorrowerAlreadyExists();\\n        }\\n\\n        if (debtRatio + borrowerDebtRatio > MAX_BPS) {\\n            revert LenderRatioExceeded(MAX_BPS - debtRatio);\\n        }\\n\\n        borrowersData[borrower] = BorrowerData(\\n            // Activation timestamp \\n            block.timestamp, // solhint-disable-line not-rely-on-time\\n            // Last report timestamp\\n            block.timestamp, // solhint-disable-line not-rely-on-time\\n            // Initial debt\\n            0, \\n            // Debt ratio\\n            borrowerDebtRatio \\n        );\\n\\n        debtRatio += borrowerDebtRatio;\\n    }\\n\\n    /// @notice Sets the borrower's debt ratio. Will be reverted if the borrower doesn't exist or the total debt ratio is exceeded.\\n    /// @dev In the case where you want to disable the borrower, you need to set its ratio to 0.\\n    ///      Thus, the borrower's current debt becomes an outstanding debt, which he must repay to the lender.\\n    function _setBorrowerDebtRatio(address borrower, uint256 borrowerDebtRatio)\\n        internal\\n    {\\n        if (!isActivated(borrower)) {\\n            revert BorrowerDoesNotExist();\\n        }\\n\\n        debtRatio -= borrowersData[borrower].debtRatio;\\n        borrowersData[borrower].debtRatio = borrowerDebtRatio;\\n        debtRatio += borrowerDebtRatio;\\n\\n        if (debtRatio > MAX_BPS) {\\n            revert LenderRatioExceeded(\\n                MAX_BPS - (debtRatio - borrowerDebtRatio)\\n            );\\n        }\\n    }\\n\\n    /// @notice Deletes the borrower from the list\\n    /// @dev Should be called after the borrower's debt ratio is changed to 0, because the lender must take back all the released funds.\\n    function _unregisterBorrower(address borrower) internal {\\n        if (borrowersData[borrower].debtRatio > 0) {\\n            revert BorrowerHasDebt();\\n        }\\n        delete borrowersData[borrower];\\n    }\\n\\n    /// @notice Charges a fee on the borrower's income.\\n    /// @param extraFreeFunds an income from which the fees will be calculated.\\n    /// @return The total amount of fees charged.\\n    function _chargeFees(uint256 extraFreeFunds)\\n        internal\\n        virtual\\n        returns (uint256);\\n\\n    /// @notice Callback that is called at the end of the positive report function.\\n    /// @param extraFreeFunds the reported extra amount of borrower's funds.\\n    /// @param chargedFees the total amount of charged fees.\\n    function _afterPositiveDebtManagementReport(\\n        uint256 extraFreeFunds,\\n        uint256 chargedFees\\n    ) internal virtual;\\n\\n    /// @notice Callback that is called at the end of the negative report function.\\n    /// @param loss the number of tokens by which the borrower's balance has decreased since the last report.\\n    function _afterNegativeDebtManagementReport(uint256 loss) internal virtual;\\n}\\n\",\"keccak256\":\"0xdbb8c857f21b245b127c8a0ff2e30c3be233ab09ee874375cb7efe2573ad2126\",\"license\":\"AGPL-3.0\"},\"src/strategies/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IVault} from \\\"../IVault.sol\\\";\\n\\ninterface IStrategy {\\n    /// @notice Returns the name of this strategy.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the contract address of the underlying asset of this strategy.\\n    function asset() external view returns (IERC20Upgradeable);\\n\\n    /// @notice Returns the contract address of the Vault to which this strategy is connected.\\n    function vault() external view returns (IVault);\\n\\n    /// @notice Transfers a specified amount of tokens to the vault.\\n    /// @param assets A amount of tokens to withdraw.\\n    /// @return loss A number of tokens that the strategy could not return.\\n    function withdraw(uint256 assets) external returns (uint256 loss);\\n}\\n\",\"keccak256\":\"0x775f2bb369ebe1c7aa4463000c8cfeb7a3cd75d9c2f19cce5f6f2f78644bfe1c\",\"license\":\"AGPL-3.0\"},\"src/structures/AddressList.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nerror ListsDoNotMatch();\\n\\nlibrary AddressList {\\n    /// @notice Adds an address to the list.\\n    /// @param list the list of addresses.\\n    /// @param addr the address to add.\\n    function add(address[] storage list, address addr) internal {\\n        list.push(addr);\\n    }\\n\\n    /// @notice Checks if the list contains the specified item.\\n    /// @param list the list of addresses.\\n    /// @param addr the address to find.\\n    function contains(address[] storage list, address addr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < list.length; i++) {\\n            if (list[i] == addr) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Removes an address from the list and fills the gap with the following items by moving them up.\\n    /// @param list the list of addresses.\\n    /// @param addr the address to remove.\\n    /// @return A boolean value that indicates if the address was found and removed from the list.\\n    function remove(address[] storage list, address addr)\\n        internal\\n        returns (bool)\\n    {\\n        bool addressFound;\\n        for (uint256 i = 0; i < list.length; i++) {\\n            if (list[i] == addr) {\\n                addressFound = true;\\n            }\\n            if (addressFound && i < list.length - 1) {\\n                list[i] = list[i + 1];\\n            }\\n        }\\n        if (addressFound) {\\n            list.pop();\\n        }\\n        return addressFound;\\n    }\\n\\n    /// @notice Checks if the list can be reordered in the specified way.\\n    /// @param list the list of addresses.\\n    /// @param reoderedList the desired reordered list, which must have the same content as the existing list.\\n    /// @return A reordered list\\n    function reorder(address[] storage list, address[] memory reoderedList)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 length = list.length;\\n        if (length != reoderedList.length) {\\n            revert ListsDoNotMatch();\\n        }\\n        for (uint256 i = 0; i < length; i++) {\\n            address existingAddress = list[i];\\n            for (uint256 j = 0; j < length; j++) {\\n                // Address is found, move to the next item\\n                if (existingAddress == reoderedList[j]) {\\n                    break;\\n                }\\n                // If this is the last iteration, then the address is not found\\n                if (j == length - 1) {\\n                    revert ListsDoNotMatch();\\n                }\\n            }\\n        }\\n        return reoderedList;\\n    }\\n}\\n\",\"keccak256\":\"0x6d1ba8d87163661acbb468bcfdd3339d7b23f20866e6bd62546a69b81d3c16df\",\"license\":\"AGPL-3.0\"},\"src/tokens/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {ERC777Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\n\\nimport {IERC4626} from \\\"./IERC4626.sol\\\";\\nimport {SafeInitializable} from \\\"../upgradeable/SafeInitializable.sol\\\";\\n\\n/// @title ERC4626 upgradable tokenized Vault implementation based on ERC-777.\\n/// More info in [EIP](https://eips.ethereum.org/EIPS/eip-4626)\\n/// Based on Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\n///\\n/// ERC-777 and ERC-20 tokens represent \\\"shares\\\"\\n/// Vault \\u201cshares\\u201d which represent a claim to ownership on a fraction of the Vault\\u2019s underlying holdings.\\n/// -\\n/// @notice Rationale\\n///  The mint method was included for symmetry and feature completeness.\\n///  Most current use cases of share-based Vaults do not ascribe special meaning to the shares\\n///  such that a user would optimize for a specific number of shares (mint)\\n///  rather than specific amount of underlying (deposit).\\n///  However, it is easy to imagine future Vault strategies which would have unique\\n///  and independently useful share representations.\\n///  The convertTo functions serve as rough estimates that do not account for operation specific details\\n///  like withdrawal fees, etc. They were included for frontends and applications that need an average\\n///  value of shares or assets, not an exact value possibly including slippage or other fees.\\n///  For applications that need an exact value that attempts to account for fees and slippage we have\\n///  included a corresponding preview function to match each mutable function.\\n///  These functions must not account for deposit or withdrawal limits, to ensure they are easily composable,\\n///  the max functions are provided for that purpose.\\nabstract contract ERC4626Upgradeable is\\n    SafeInitializable,\\n    ERC777Upgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IERC4626\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using FixedPointMathLib for uint256;\\n\\n    /// @notice The underlying token managed by the Vault. Has units defined by the corresponding ERC-20 contract.\\n    /// Stored as address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n    IERC20Upgradeable public asset;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /* ///////////////////////////// EVENTS ///////////////////////////// */\\n\\n    /// `sender` has exchanged `assets` for `shares`, and transferred those `shares` to `owner`.\\n    /// emitted when tokens are deposited into the Vault via the mint and deposit methods.\\n    event Deposit(\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /// `sender` has exchanged `shares`, owned by `owner`, for `assets`, and transferred those `assets` to `receiver`.\\n    /// emitted when shares are withdrawn from the Vault in ERC4626.redeem or ERC4626.withdraw methods.\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /* ///////////////////////////// CONSTRUCTORS ///////////////////////////// */\\n\\n    /**\\n     * Constructor for the ERC4626Upgradeable contract\\n     * @param _asset which will be stored in this Vault\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    function __ERC4626_init(\\n        IERC20Upgradeable _asset,\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        __ERC777_init(name_, symbol_, defaultOperators_);\\n        __ReentrancyGuard_init();\\n\\n        __ERC4626_init_unchained(_asset);\\n    }\\n\\n    /**\\n     * Unchained constructor for the ERC4626Upgradeable contract, without parents contracts init\\n     * @param _asset which will be stored in this Vault\\n     */\\n    function __ERC4626_init_unchained(IERC20Upgradeable _asset)\\n        internal\\n        onlyInitializing\\n    {\\n        asset = _asset;\\n    }\\n\\n    /* ///////////////////////////// DEPOSIT / WITHDRAWAL ///////////////////////////// */\\n\\n    /// @notice Mints Vault shares to receiver by depositing exactly amount of underlying tokens.\\n    /// - emits the Deposit event.\\n    /// - support ERC-20 approve / transferFrom on asset as a deposit flow.\\n    ///   MAY support an additional flow in which the underlying tokens are owned by the Vault contract\\n    ///   before the deposit execution, and are accounted for during deposit.\\n    /// - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage,\\n    ///   the user not approving enough underlying tokens to the Vault contract, etc).\\n    /// Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function deposit(uint256 assets, address receiver)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 shares)\\n    {\\n        shares = previewDeposit(assets);\\n        // Check for rounding error since we round down in previewDeposit.\\n        require(shares != 0, \\\"Given assets result in 0 shares.\\\");\\n\\n        _receiveAndDeposit(assets, shares, receiver);\\n    }\\n\\n    /// @notice Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n    /// - emits the Deposit event.\\n    /// - support ERC-20 approve / transferFrom on asset as a deposit flow.\\n    ///   MAY support an additional flow in which the underlying tokens are owned by the Vault contract\\n    ///   before the deposit execution, and are accounted for during deposit.\\n    /// - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc).\\n    /// Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function mint(uint256 shares, address receiver)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 assets)\\n    {\\n        // No need to check for rounding error, previewMint rounds up.\\n        assets = previewMint(shares);\\n\\n        _receiveAndDeposit(assets, shares, receiver);\\n    }\\n\\n    /// @notice Base deposit logic which common for public deposit and mint function\\n    /// Trasfer assets from sender and mint shares for receiver\\n    function _receiveAndDeposit(\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver\\n    ) internal {\\n        // cases when msg.sender != receiver are error prone\\n        // but they are allowed by the standard... we need take care of it ourselves\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares, \\\"\\\", \\\"\\\");\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    /// @notice Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n    /// - emit the Withdraw event.\\n    /// - support a withdraw flow where the shares are burned from owner directly where owner is msg.sender.\\n    /// - support a withdraw flow where the shares are burned from owner directly where msg.sender\\n    ///   has ERC-20 approval over the shares of owner.\\n    /// - MAY support an additional flow in which the shares are transferred to the Vault contract\\n    ///   before the withdraw execution, and are accounted for during withdraw.\\n    /// - revert if all of assets cannot be withdrawn (due to withdrawal limit being reached,\\n    ///   slippage, the owner not having enough shares, etc).\\n    /// Note that some implementations will require pre-requesting to the Vault\\n    /// before a withdrawal may be performed. Those methods should be performed separately.\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual nonReentrant returns (uint256 shares) {\\n        // No need to check for rounding error, previewWithdraw rounds up.\\n        shares = previewWithdraw(assets);\\n\\n        _withdrawAndSend(assets, shares, receiver, owner);\\n    }\\n\\n    /// @notice Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n    /// - emit the Withdraw event.\\n    /// - support a redeem flow where the shares are burned from owner directly where owner is msg.sender.\\n    /// - support a redeem flow where the shares are burned from owner directly where msg.sender\\n    ///   has ERC-20 approval over the shares of owner.\\n    /// - MAY support an additional flow in which the shares are transferred to the Vault contract\\n    ///   before the redeem execution, and are accounted for during redeem.\\n    /// - revert if all of shares cannot be redeemed (due to withdrawal limit being reached,\\n    ///   slippage, the owner not having enough shares, etc).\\n    /// Note that some implementations will require pre-requesting to the Vault\\n    /// before a withdrawal may be performed. Those methods should be performed separately.\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual nonReentrant returns (uint256 assets) {\\n        assets = previewRedeem(shares);\\n        // Check for rounding error since we round down in previewRedeem.\\n        require(assets != 0, \\\"Given shares result in 0 assets.\\\");\\n\\n        _withdrawAndSend(assets, shares, receiver, owner);\\n    }\\n\\n    /// @notice Burn owner shares and send tokens to receiver.\\n    function _withdrawAndSend(\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) internal {\\n        // cases when msg.sender != receiver != owner is error prune\\n        // but they allowed by standard... take care of it by self\\n        if (msg.sender != owner) {\\n            _spendAllowance(owner, msg.sender, shares);\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares, \\\"\\\", \\\"\\\");\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /* ///////////////////////////// ACCOUNTING ///////////////////////////// */\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block,\\n    /// given current on-chain conditions.\\n    /// - return as close to and no more than the exact amount of Vault shares that would be minted\\n    ///   in a deposit call in the same transaction.\\n    ///   I.e. deposit should return the same or more shares as previewDeposit if called in the same transaction.\\n    /// - NOT account for deposit limits like those returned from maxDeposit\\n    ///   and should always act as though the deposit would be accepted,\\n    ///   regardless if the user has enough tokens approved, etc.\\n    /// - inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n    /// - NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause deposit to revert.\\n    /// Note that any unfavorable discrepancy between convertToShares and previewDeposit\\n    /// SHOULD be considered slippage in share price or some other type of condition,\\n    /// meaning the depositor will lose assets by depositing.\\n    function previewDeposit(uint256 assets)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return convertToShares(assets);\\n    }\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate the effects of their mint at the current block,\\n    /// given current on-chain conditions.\\n    /// - return as close to and no fewer than the exact amount of assets that would be deposited\\n    ///   in a mint call in the same transaction.\\n    ///   I.e. mint should return the same or fewer assets as previewMint if called in the same transaction.\\n    /// - NOT account for mint limits like those returned from maxMint\\n    ///   and should always act as though the mint would be accepted,\\n    ///   regardless if the user has enough tokens approved, etc.\\n    /// - inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n    /// - NOT revert due to vault specific user/global limits.\\n    ///   MAY revert due to other conditions that would also cause mint to revert.\\n    /// Note that any unfavorable discrepancy between convertToAssets and previewMint\\n    /// SHOULD be considered slippage in share price or some other type of condition,\\n    /// meaning the depositor will lose assets by minting.\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n        if (supply == 0) {\\n            return shares;\\n        }\\n\\n        return shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate the effects of their withdrawal\\n    /// at the current block, given current on-chain conditions.\\n    /// - return as close to and no fewer than the exact amount of Vault shares\\n    ///   that would be burned in a withdraw call in the same transaction.\\n    ///   I.e. withdraw should return the same or fewer shares as previewWithdraw\\n    ///   if called in the same transaction.\\n    /// - NOT account for withdrawal limits like those returned from maxWithdraw\\n    ///   and should always act as though the withdrawal would be accepted,\\n    ///   regardless if the user has enough shares, etc.\\n    /// - inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n    /// - NOT revert due to vault specific user/global limits.\\n    ///   MAY revert due to other conditions that would also cause withdraw to revert.\\n    /// Note that any unfavorable discrepancy between convertToShares and previewWithdraw\\n    /// SHOULD be considered slippage in share price or some other type of condition,\\n    /// meaning the depositor will lose assets by depositing.\\n    function previewWithdraw(uint256 assets)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n        if (supply == 0) {\\n            return assets;\\n        }\\n        return assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate the effects of their\\n    /// redeemption at the current block, given current on-chain conditions.\\n    /// - return as close to and no more than the exact amount of assets that would be withdrawn\\n    ///   in a redeem call in the same transaction.\\n    ///   I.e. redeem should return the same or more assets as previewRedeem\\n    ///   if called in the same transaction.\\n    /// - NOT account for redemption limits like those returned from maxRedeem\\n    ///   and should always act as though the redemption would be accepted,\\n    ///   regardless if the user has enough shares, etc.\\n    /// - inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n    /// - NOT revert due to vault specific user/global limits.\\n    ///   MAY revert due to other conditions that would also cause redeem to revert.\\n    /// Note that any unfavorable discrepancy between convertToAssets and previewRedeem\\n    /// SHOULD be considered slippage in share price or some other type of condition,\\n    /// meaning the depositor will lose assets by redeeming.\\n    function previewRedeem(uint256 shares)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return convertToAssets(shares);\\n    }\\n\\n    /// @notice The amount of shares that the Vault would exchange for the amount of assets provided,\\n    /// in an ideal scenario where all the conditions are met.\\n    /// - is NOT inclusive of any fees that are charged against assets in the Vault.\\n    /// - do NOT show any variations depending on the caller.\\n    /// - do NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n    /// - do NOT revert unless due to integer overflow caused by an unreasonably large input.\\n    /// - round down towards 0.\\n    /// This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share,\\n    /// and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share,\\n    /// meaning what the average user should expect to see when exchanging to and from.\\n    function convertToShares(uint256 assets)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n        if (supply == 0) {\\n            return assets;\\n        }\\n\\n        return assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    /// @notice The amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met.\\n    /// - is NOT inclusive of any fees that are charged against assets in the Vault.\\n    /// - do NOT show any variations depending on the caller.\\n    /// - do NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n    /// - do NOT revert unless due to integer overflow caused by an unreasonably large input.\\n    /// - round down towards 0.\\n    /// This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share,\\n    /// and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share,\\n    /// meaning what the average user should expect to see when exchanging to and from.\\n    function convertToAssets(uint256 shares)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n        if (supply == 0) {\\n            return shares;\\n        }\\n\\n        return shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    /// @notice Total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n    /// - include any compounding that occurs from yield.\\n    /// - inclusive of any fees that are charged against assets in the Vault.\\n    /// - is NOT revert\\n    /// @dev Must be implemented by child contract.\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    /* //////////////////////////////// DEPOSIT / WITHDRAWAL LIMIT //////////////////////////////// */\\n\\n    /// @notice Maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n    /// through a deposit call.\\n    /// - returns the maximum amount of assets deposit would allow to be deposited\\n    ///   for receiver and not cause a revert, which MUST NOT be higher than the actual maximum\\n    ///   that would be accepted (it should underestimate if necessary).\\n    ///   This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset.\\n    /// - factor in both global and user-specific limits, like if deposits are entirely disabled (even temporarily) it MUST return 0.\\n    /// - return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /// @notice Maximum amount of shares that can be minted from the Vault for the receiver, through a mint call.\\n    /// - return the maximum amount of shares mint would allow to be deposited to receiver\\n    ///   and not cause a revert, which MUST NOT be higher than the actual maximum\\n    ///   that would be accepted (it should underestimate if necessary).\\n    ///   This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset.\\n    /// - factor in both global and user-specific limits,\\n    ///   like if mints are entirely disabled (even temporarily) it MUST return 0.\\n    /// - return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /// @notice Maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault,\\n    /// through a withdraw call.\\n    /// - return the maximum amount of assets that could be transferred from owner through withdraw\\n    ///   and not cause a revert, which MUST NOT be higher than the actual maximum\\n    ///   that would be accepted (it should underestimate if necessary).\\n    /// - factor in both global and user-specific limits,\\n    ///   like if withdrawals are entirely disabled (even temporarily) it MUST return 0.\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf(owner));\\n    }\\n\\n    /// @notice Maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n    /// through a redeem call.\\n    /// - return the maximum amount of shares that could be transferred from owner through redeem\\n    ///   and not cause a revert, which MUST NOT be higher than the actual maximum\\n    ///   that would be accepted (it should underestimate if necessary).\\n    /// - factor in both global and user-specific limits,\\n    ///   like if redemption is entirely disabled (even temporarily) it MUST return 0.\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /* //////////////////////////////// INTERNAL HOOKS //////////////////////////////// */\\n\\n    /// @notice Called before withdraw will be made the Vault.\\n    /// @dev allow implement additional logic for withdraw, hooks a prefered way rather then wrapping\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {} // solhint-disable-line no-empty-blocks\\n\\n    /// @notice Called when a deposit is made to the Vault.\\n    /// @dev allow implement additional logic for withdraw, hooks a prefered way rather then wrapping\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {} // solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0xf631f96fbf9599cc8818ca4dd872b8a8e359363c1996033906715165f18d3420\",\"license\":\"AGPL-3.0\"},\"src/tokens/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// @title ERC4626 complient Vault interface\\ninterface IERC4626 {\\n    /// @notice The underlying token managed by the Vault. Has units defined by the corresponding ERC-20 contract.\\n    /// Stored as address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n    function asset() external view returns (IERC20Upgradeable);\\n}\\n\",\"keccak256\":\"0x96fc9f01da0fe6c44d58caf2a47a48505b658a8159706dfe19529f2f2f59b7c2\",\"license\":\"AGPL-3.0\"},\"src/tokens/SafeERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\n\\nimport {ERC4626Upgradeable} from \\\"./ERC4626Upgradeable.sol\\\";\\n\\n/// @title Safier and limited implementation of ERC-4626\\n/// @notice ERC-4626 standard allow deposit and withdraw not for message sender.\\n///  It commonly known issue, which hardly to test and much error prune.\\n///  Such interfaces caused vulnarabilities, which resulted in million dollars hacks.\\n///  On anther hand, this interfaces not have any use cases which cannot be implemented without `transferFrom` method.\\n///  This implementation prevent spends and allowances from any methods except transferFrom/send\\n///  Also main business logic simplified to reduce gas consumption.\\nabstract contract SafeERC4626Upgradeable is ERC4626Upgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using FixedPointMathLib for uint256;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    /**\\n     * Constructor for the SafeERC4626Upgradeable contract\\n     * @param _asset which will be stored in this Vault\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    function __SafeERC4626_init(\\n        IERC20Upgradeable _asset,\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        __ERC4626_init(_asset, name_, symbol_, defaultOperators_);\\n    }\\n\\n    /**\\n     * Unchained constructor for the SafeERC4626Upgradeable contract, without parents contracts init\\n     * @param _asset which will be stored in this Vault\\n     */\\n    function __SafeERC4626Upgradeable_init_unchained(IERC20Upgradeable _asset)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC4626_init_unchained(_asset);\\n    }\\n\\n    /// @notice Mints the Vault shares for msg.sender, according to the number of deposited base tokens.\\n    /// - emits the Deposit event.\\n    /// - support ERC-20 approve / transferFrom on asset as a deposit flow.\\n    ///   MAY support an additional flow in which the underlying tokens are owned by the Vault contract\\n    ///   before the deposit execution, and are accounted for during deposit.\\n    /// - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc).\\n    /// Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function deposit(uint256 assets)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 shares)\\n    {\\n        shares = previewDeposit(assets);\\n        // Check for rounding error since we round down in previewDeposit.\\n        require(shares != 0, \\\"Given assets result in 0 shares.\\\");\\n\\n        _receiveAndDeposit(assets, shares, msg.sender);\\n    }\\n\\n    /// @notice Mints exactly requested Vault shares to msg.sender by depositing any required amount of underlying tokens.\\n    /// - emits the Deposit event.\\n    /// - support ERC-20 approve / transferFrom on asset as a deposit flow.\\n    ///   MAY support an additional flow in which the underlying tokens are owned by the Vault contract\\n    ///   before the deposit execution, and are accounted for during deposit.\\n    /// - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc).\\n    /// Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function mint(uint256 shares)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 assets)\\n    {\\n        // No need to check for rounding error, previewMint rounds up.\\n        assets = previewMint(shares);\\n\\n        _receiveAndDeposit(assets, shares, msg.sender);\\n    }\\n\\n    /// @notice Burns shares from msg.sender and sends exactly assets of underlying tokens to msg.sender.\\n    /// - emit the Withdraw event.\\n    /// - support a withdraw flow where the shares are burned from owner directly where owner is msg.sender.\\n    /// - MAY support an additional flow in which the shares are transferred to the Vault contract\\n    ///   before the withdraw execution, and are accounted for during withdraw.\\n    /// - revert if all of assets cannot be withdrawn (due to withdrawal limit being reached,\\n    ///   slippage, the owner not having enough shares, etc).\\n    /// Note that some implementations will require pre-requesting to the Vault\\n    /// before a withdrawal may be performed. Those methods should be performed separately.\\n    function withdraw(uint256 assets)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 shares)\\n    {\\n        // No need to check for rounding error, previewWithdraw rounds up.\\n        shares = previewWithdraw(assets);\\n\\n        _withdrawAndSend(assets, shares, msg.sender, msg.sender);\\n    }\\n\\n    /// @notice Burns exactly shares from msg.sender and sends assets of underlying tokens to msg.sender.\\n    /// - emit the Withdraw event.\\n    /// - support a redeem flow where the shares are burned from owner directly where owner is msg.sender.\\n    /// - MAY support an additional flow in which the shares are transferred to the Vault contract\\n    ///   before the redeem execution, and are accounted for during redeem.\\n    /// - revert if all of shares cannot be redeemed (due to withdrawal limit being reached,\\n    ///   slippage, the owner not having enough shares, etc).\\n    /// Note that some implementations will require pre-requesting to the Vault\\n    /// before a withdrawal may be performed. Those methods should be performed separately.\\n    function redeem(uint256 shares)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 assets)\\n    {\\n        assets = previewRedeem(shares);\\n        // Check for rounding error since we round down in previewRedeem.\\n        require(assets != 0, \\\"Given shares result in 0 assets.\\\");\\n\\n        _withdrawAndSend(assets, shares, msg.sender, msg.sender);\\n    }\\n\\n    /* //////////////////// Backwards compatible methods ////////////////////////// */\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function deposit(\\n        uint256 assets,\\n        address /* receiver */\\n    ) public virtual override returns (uint256 shares) {\\n        // nonReentrant under the hood\\n        return deposit(assets);\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function mint(\\n        uint256 shares,\\n        address /* receiver */\\n    ) public virtual override returns (uint256 assets) {\\n        // nonReentrant under the hood\\n        return mint(shares);\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function withdraw(\\n        uint256 assets,\\n        address, /* receiver */\\n        address /* owner */\\n    ) public virtual override returns (uint256 shares) {\\n        // nonReentrant under the hood\\n        return withdraw(assets);\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function redeem(\\n        uint256 shares,\\n        address, /* receiver */\\n        address /* owner */\\n    ) public virtual override returns (uint256 assets) {\\n        // nonReentrant under the hood\\n        return redeem(shares);\\n    }\\n}\\n\",\"keccak256\":\"0x8c3eaf2ed84e1ebff549cf33feb30788baec1f352a0a98a723621094535cf89e\",\"license\":\"AGPL-3.0\"},\"src/upgradeable/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\n/** \\n * Allow properly identify different versions of the same contract \\n * and track upgrades results \\n * */\\ninterface IVersionable  {\\n    /// @notice Returns the current version of this contract\\n    /// @return a version in semantic versioning format\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x13e08376fa8013858c0031556eaae03e4c8d517597cb5f0524040ef36a7c9006\",\"license\":\"AGPL-3.0\"},\"src/upgradeable/SafeInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IVersionable} from './IVersionable.sol';\\n\\n/** Implement best practices for initializable contracts */\\nabstract contract SafeInitializable is IVersionable, Initializable {\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /**\\n     * This constructor prevents UUPS Uninitialized Proxies Vulnerability in all contracts which inherit from it.\\n     * More info about vulnerability: https://medium.com/immunefi/wormhole-uninitialized-proxy-bugfix-review-90250c41a43a\\n     * \\n     * @dev Initial fix for this vulnerability was suggested as using `_disableInitializers()` function in constructor,\\n     *  but later, in version 4.3.2, OpenZeppelin implemented `onlyProxy` modifier for UUPS upgradable contracts,\\n     *  which fixed this vulnerability. Still, `_disableInitializers()` is a best practice which prevents unintended access \\n     *  to implementation contracts that can be used maliciously.\\n     *  \\n     *  More info: https://forum.openzeppelin.com/t/how-to-test-upgradeability-for-proxies/33436/7 \\n     *      and https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680\\n     * \\n     * To prevent code duplication of constructor, this contract can be used. On the other hand, \\n     * it can be used as a marker for contracts that are safe from this vulnerability.\\n     * Additionally, `needDisableInitializers` parameter can be used to enable initializers in mocks and unit tests.\\n     *\\n     * @param needDisableInitializers - if true, initializers will be disabled\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(bool needDisableInitializers) {\\n        if(needDisableInitializers) {\\n            _disableInitializers();\\n        }\\n    }\\n}\",\"keccak256\":\"0x5257e9d00381bec14e434ac2dab295ac12a561fb6487f3dbb91179acac5ac482\",\"license\":\"AGPL-3.0\"},\"src/upgradeable/SafeUUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {SafeInitializable} from \\\"./SafeInitializable.sol\\\";\\n\\n/** \\n * Implement basic safety mechanism for UUPS proxy\\n * based on owner authorization for upgrades\\n * */\\nabstract contract SafeUUPSUpgradeable is UUPSUpgradeable, SafeInitializable, OwnableUpgradeable {\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /** Init all required constructors, including ownable */\\n    function __SafeUUPSUpgradeable_init() internal onlyInitializing {\\n        __SafeUUPSUpgradeable_init_direct();\\n\\n        __Ownable_init();\\n    }\\n\\n    /** Init only direct constructors, UUPS only */\\n    function __SafeUUPSUpgradeable_init_direct() internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /** Authorise that upgrades can do only owner */\\n    function _authorizeUpgrade(address newImplementation) internal onlyOwner override {\\n    }\\n}\\n\",\"keccak256\":\"0x9d8fe2a2596388dc2a084aeb389a7325117733ca49f9e90f87eff4a7700436e3\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a0604052306080523480156200001557600080fd5b506040516200574338038062005743833981016040819052620000389162000114565b8080156200004a576200004a62000052565b50506200013f565b600054610100900460ff1615620000bf5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000112576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012757600080fd5b815180151581146200013857600080fd5b9392505050565b6080516155cc620001776000396000818161112e01528181611177015281816112fe0152818161133e01526113d101526155cc6000f3fe6080604052600436106104895760003560e01c8063959b8c3f11610255578063ce348c6f11610144578063ef8b30f7116100c1578063fc673c4f11610085578063fc673c4f14610e47578063fc7b9c1814610e67578063fd967f4714610e7e578063fdd9baa114610e94578063fe56e23214610ea9578063fe9d930314610ec957600080fd5b8063ef8b30f714610d64578063f2fde38b14610d84578063f5a3bfad14610da4578063f76e4caa14610e07578063fad8b32a14610e2757600080fd5b8063d95b637111610108578063d95b637114610c9e578063db006a7514610cbe578063dd62ed3e14610cde578063dd723c1b14610d24578063ec38a86214610d4457600080fd5b8063ce348c6f14610c11578063ce96cb7714610c27578063cea55f5714610c47578063cfbde32614610c5e578063d905777e14610c7e57600080fd5b8063b6b55f25116101d2578063c63d75b611610196578063c63d75b614610733578063c6e6f59214610b78578063c822adda14610b98578063c9411e2214610bb8578063c9faa7c514610bd857600080fd5b8063b6b55f2514610ab8578063ba08765214610ad8578063bb994d4814610af8578063c17047ed14610b18578063c3535b5214610b5257600080fd5b8063a0712d6811610219578063a0712d6814610a21578063a6f7f5d614610a41578063a9059cbb14610a58578063b3d7f6b914610a78578063b460af9414610a9857600080fd5b8063959b8c3f1461098b57806395d89b41146109ab57806399089a4e146109c05780639bd9bbc6146109e05780639ec5a89414610a0057600080fd5b8063402d267d1161037c5780636e553f65116102f9578063861d68d9116102bd578063861d68d9146108f5578063861fe6cb14610915578063884719f2146108bb5780638da5cb5b146109355780638dfa4f071461095457806394bf804d1461096b57600080fd5b80636e553f651461085057806370a0823114610870578063715018a6146108a6578063759076e51461059457806380d57855146108bb57600080fd5b806354fd4d501161034057806354fd4d50146107c2578063556f0dc7146107f057806357db845a146108045780635c975abb1461081b57806362ad1b831461083057600080fd5b8063402d267d146107335780634a8c1fb4146107555780634cdad5061461077a5780634f1ef2861461079a57806352d1902d146107ad57600080fd5b806314c644021161040a578063313ce567116103ce578063313ce567146106645780633306bc5b146106805780633659cfe6146106ba57806338d52e0f146106da57806339d97c531461071357600080fd5b806314c64402146105d157806318160ddd146105f357806323b872dd14610608578063267c1408146106285780632e1a7d4d1461064457600080fd5b806307cc692f1161045157806307cc692f1461052f578063095ea7b3146105445780630a28a477146105745780630baabd7a1461059457806312531729146105ba57600080fd5b806301e1d1141461048e57806306e48538146104b657806306f94a0d146104d857806306fdde03146104ed57806307a2d13a1461050f575b600080fd5b34801561049a57600080fd5b506104a3610ee9565b6040519081526020015b60405180910390f35b3480156104c257600080fd5b506104cb610f0a565b6040516104ad91906149b3565b3480156104e457600080fd5b506104a3610f6c565b3480156104f957600080fd5b50610502610f77565b6040516104ad9190614a50565b34801561051b57600080fd5b506104a361052a366004614a63565b611000565b34801561053b57600080fd5b506104a3611037565b34801561055057600080fd5b5061056461055f366004614a91565b611042565b60405190151581526020016104ad565b34801561058057600080fd5b506104a361058f366004614a63565b61105c565b3480156105a057600080fd5b5033600090815261022b60205260409020600201546104a3565b3480156105c657600080fd5b506104a36102615481565b3480156105dd57600080fd5b506105f16105ec366004614acb565b61108d565b005b3480156105ff57600080fd5b5060ca546104a3565b34801561061457600080fd5b50610564610623366004614ae8565b6110ad565b34801561063457600080fd5b506104a3670de0b6b3a764000081565b34801561065057600080fd5b506104a361065f366004614a63565b6110f3565b34801561067057600080fd5b50604051601281526020016104ad565b34801561068c57600080fd5b506104a361069b366004614b29565b6001600160a01b0316600090815261022b602052604090206001015490565b3480156106c657600080fd5b506105f16106d5366004614b29565b611124565b3480156106e657600080fd5b506101c3546106fb906001600160a01b031681565b6040516001600160a01b0390911681526020016104ad565b34801561071f57600080fd5b506105f161072e366004614b46565b611209565b34801561073f57600080fd5b506104a361074e366004614b29565b5060001990565b34801561076157600080fd5b5033600090815261022b60205260409020541515610564565b34801561078657600080fd5b506104a3610795366004614a63565b6112e9565b6105f16107a8366004614c2d565b6112f4565b3480156107b957600080fd5b506104a36113c4565b3480156107ce57600080fd5b50604080518082019091526005815264302e312e3560d81b6020820152610502565b3480156107fc57600080fd5b5060016104a3565b34801561081057600080fd5b506104a361022a5481565b34801561082757600080fd5b50610564611477565b34801561083c57600080fd5b506105f161084b366004614c7d565b611485565b34801561085c57600080fd5b506104a361086b366004614d10565b6114c1565b34801561087c57600080fd5b506104a361088b366004614b29565b6001600160a01b0316600090815260c9602052604090205490565b3480156108b257600080fd5b506105f16114cc565b3480156108c757600080fd5b506104a36108d6366004614b29565b6001600160a01b0316600090815261022b602052604090206002015490565b34801561090157600080fd5b506105f1610910366004614d40565b6114e0565b34801561092157600080fd5b506105f1610930366004614dec565b61156e565b34801561094157600080fd5b5061015f546001600160a01b03166106fb565b34801561096057600080fd5b506104a36102625481565b34801561097757600080fd5b506104a3610986366004614d10565b6117db565b34801561099757600080fd5b506105f16109a6366004614b29565b6117e6565b3480156109b757600080fd5b50610502611903565b3480156109cc57600080fd5b506105f16109db366004614ead565b611912565b3480156109ec57600080fd5b506105f16109fb366004614ee2565b61193b565b348015610a0c57600080fd5b5061025e546106fb906001600160a01b031681565b348015610a2d57600080fd5b506104a3610a3c366004614a63565b61195e565b348015610a4d57600080fd5b506104a361025f5481565b348015610a6457600080fd5b50610564610a73366004614a91565b61197e565b348015610a8457600080fd5b506104a3610a93366004614a63565b6119b6565b348015610aa457600080fd5b506104a3610ab3366004614f3b565b6119e6565b348015610ac457600080fd5b506104a3610ad3366004614a63565b6119f9565b348015610ae457600080fd5b506104a3610af3366004614f3b565b611a0c565b348015610b0457600080fd5b506105f1610b13366004614b29565b611a17565b348015610b2457600080fd5b506104a3610b33366004614b29565b6001600160a01b0316600090815261022b602052604090206003015490565b348015610b5e57600080fd5b5033600090815261022b60205260409020600101546104a3565b348015610b8457600080fd5b506104a3610b93366004614a63565b611ab8565b348015610ba457600080fd5b506106fb610bb3366004614a63565b611ae9565b348015610bc457600080fd5b506105f1610bd3366004614a91565b611b14565b348015610be457600080fd5b50610564610bf3366004614b29565b6001600160a01b0316600090815261022b6020526040902054151590565b348015610c1d57600080fd5b50610260546104a3565b348015610c3357600080fd5b506104a3610c42366004614b29565b611cb9565b348015610c5357600080fd5b506104a36102295481565b348015610c6a57600080fd5b506105f1610c79366004614a63565b611cdb565b348015610c8a57600080fd5b506104a3610c99366004614b29565b611d4b565b348015610caa57600080fd5b50610564610cb9366004614f7d565b611d69565b348015610cca57600080fd5b506104a3610cd9366004614a63565b611e0a565b348015610cea57600080fd5b506104a3610cf9366004614f7d565b6001600160a01b03918216600090815260d16020908152604080832093909416825291909152205490565b348015610d3057600080fd5b506105f1610d3f366004614b46565b611e7b565b348015610d5057600080fd5b506105f1610d5f366004614b29565b611f57565b348015610d7057600080fd5b506104a3610d7f366004614a63565b611f82565b348015610d9057600080fd5b506105f1610d9f366004614b29565b611f8d565b348015610db057600080fd5b50610de7610dbf366004614b29565b61022b6020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016104ad565b348015610e1357600080fd5b506105f1610e22366004614b29565b612003565b348015610e3357600080fd5b506105f1610e42366004614b29565b6120d8565b348015610e5357600080fd5b506105f1610e62366004614fab565b6121f3565b348015610e7357600080fd5b506104a36102285481565b348015610e8a57600080fd5b506104a361271081565b348015610ea057600080fd5b506104a361222b565b348015610eb557600080fd5b506105f1610ec4366004614a63565b612243565b348015610ed557600080fd5b506105f1610ee436600461502b565b612274565b6000610ef361228f565b610efb61222b565b610f059190615072565b905090565b606060cd805480602002602001604051908101604052809291908181526020018280548015610f6257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610f44575b5050505050905090565b6000610f0533612304565b606060cb8054610f8690615085565b80601f0160208091040260200160405190810160405280929190818152602001828054610fb290615085565b8015610f625780601f10610fd457610100808354040283529160200191610f62565b820191906000526020600020905b815481529060010190602001808311610fe257509395945050505050565b60008061100c60ca5490565b90508060000361101d575090919050565b611030611028610ee9565b84908361239b565b9392505050565b6000610f05336123ba565b6000336110508185856124a8565b60019150505b92915050565b60008061106860ca5490565b905080600003611079575090919050565b61103081611085610ee9565b8591906125cf565b6110956125fd565b806110a5576110a2612658565b50565b6110a26126aa565b6000336110bb8582856126e7565b6110e885858560405180602001604052806000815250604051806020016040528060008152506000612773565b506001949350505050565b60006110fd61286f565b6111068261105c565b9050611114828233336128ca565b61111f600161012d55565b919050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036111755760405162461bcd60e51b815260040161116c906150bf565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111be600080516020615550833981519152546001600160a01b031690565b6001600160a01b0316146111e45760405162461bcd60e51b815260040161116c9061510b565b6111ed81612984565b604080516000808252602082019092526110a29183919061298c565b33600090815261022b6020526040812054900361123957604051630160ef0b60e51b815260040160405180910390fd5b61124161286f565b8061124b33612af7565b10156112995760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420656e6f7567682061737365747320666f72207061796d656e74000000604482015260640161116c565b81156112a9576112a93383612b67565b6112b63382600085612cc7565b6112bf82612e48565b6112ca600161012d55565b50504261022a81905533600090815261022b6020526040902060010155565b600061105682611000565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016300361133c5760405162461bcd60e51b815260040161116c906150bf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611385600080516020615550833981519152546001600160a01b031690565b6001600160a01b0316146113ab5760405162461bcd60e51b815260040161116c9061510b565b6113b482612984565b6113c08282600161298c565b5050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146114645760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161116c565b5060008051602061555083398151915290565b6000610f0560fb5460ff1690565b61148f3386611d69565b6114ab5760405162461bcd60e51b815260040161116c90615157565b6114ba85858585856001612773565b5050505050565b6000611030836119f9565b6114d46125fd565b6114de6000612e74565b565b6114e86125fd565b60006114f661026084612ec7565b90508061151657604051632df15a4160e11b815260040160405180910390fd5b816115245761152483612ffc565b826001600160a01b03167fb6a4d3fee462ca7c56e3e87f5942581b478433cf0003d49e1750c1ad1539ee3083604051611561911515815260200190565b60405180910390a2505050565b600054610100900460ff161580801561158e5750600054600160ff909116105b806115a85750303b1580156115a8575060005460ff166001145b61160b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161116c565b6000805460ff19166001179055801561162e576000805461ff0019166101001790555b611636613066565b61163e61309d565b61177088855160001461165157856116d7565b896001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa15801561168f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116b791908101906151a3565b6040516020016116c79190615211565b6040516020818303038152906040525b8551156116e4578561176a565b8a6001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa158015611722573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174a91908101906151a3565b60405160200161175a9190615249565b6040516020818303038152906040525b856130dc565b61177987611f57565b61178286612243565b61178b85611cdb565b80156117d1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b60006110308361195e565b6001600160a01b038116330361184a5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a20617574686f72697a696e672073656c66206173206f70657260448201526330ba37b960e11b606482015260840161116c565b6001600160a01b038116600090815260ce602052604090205460ff161561189b5733600090815260d0602090815260408083206001600160a01b03851684529091529020805460ff191690556118ca565b33600090815260cf602090815260408083206001600160a01b03851684529091529020805460ff191660011790555b60405133906001600160a01b038316907ff4caeb2d6ca8932a215a353d0703c326ec2d81fc68170f320eb2ab49e9df61f990600090a350565b606060cc8054610f8690615085565b61191a6125fd565b6119266102608261310f565b80516113c09161026091602090910190614939565b61195933848484604051806020016040528060008152506001612773565b505050565b600061196861286f565b611971826119b6565b9050611114818333613201565b60006119ad33848460405180602001604052806000815250604051806020016040528060008152506000612773565b50600192915050565b6000806119c260ca5490565b9050806000036119d3575090919050565b6110306119de610ee9565b8490836125cf565b60006119f1846110f3565b949350505050565b6000611a0361328f565b611056826132d7565b60006119f184611e0a565b80611a2b61015f546001600160a01b031690565b6001600160a01b0316336001600160a01b031614158015611a555750336001600160a01b03821614155b15611a7557604051630869704160e41b815233600482015260240161116c565b611a80826000613347565b6040516001600160a01b038316907f4201c688d84c01154d321afa0c72f1bffe9eef53005c9de9d035074e71e9b32a90600090a25050565b600080611ac460ca5490565b905080600003611ad5575090919050565b61103081611ae1610ee9565b85919061239b565b6102608181548110611afa57600080fd5b6000918252602090912001546001600160a01b0316905081565b611b1c6125fd565b611b2461328f565b6001600160a01b038216611b4b5760405163f5bf603960e01b815260040160405180910390fd5b816001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bad9190615274565b6001600160a01b0316306001600160a01b0316141580611c3e5750816001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2a9190615274565b6101c3546001600160a01b03908116911614155b15611c5c57604051631120dc3360e21b815260040160405180910390fd5b611c66828261342f565b611c72610260836134ff565b816001600160a01b03167f2f564a83158ad1831793ad3e69257b52f39ece5d49cb0d8746708ecb9ef964da82604051611cad91815260200190565b60405180910390a25050565b6001600160a01b038116600090815260c9602052604081205461105690611000565b611ce36125fd565b670de0b6b3a7640000811115611d0f57604051639058c3f760e01b81526004810182905260240161116c565b6102628190556040518181527f6619a135102d0d043ca15a77ad3878b0c97fb8ead5829208b0f79c00711fa7c79060200160405180910390a150565b6001600160a01b038116600090815260c96020526040812054611056565b6000816001600160a01b0316836001600160a01b03161480611dd457506001600160a01b038316600090815260ce602052604090205460ff168015611dd457506001600160a01b03808316600090815260d0602090815260408083209387168352929052205460ff16155b806110305750506001600160a01b03908116600090815260cf602090815260408083209490931682529290925290205460ff1690565b6000611e1461286f565b611e1d826112e9565b905080600003611e6f5760405162461bcd60e51b815260206004820181905260248201527f476976656e2073686172657320726573756c7420696e2030206173736574732e604482015260640161116c565b611114818333336128ca565b33600090815261022b60205260408120549003611eab57604051630160ef0b60e51b815260040160405180910390fd5b611eb361286f565b611ebd8183615291565b611ec633612af7565b1015611ee55760405163112093df60e31b815260040160405180910390fd5b60008083118015611f08575033600090815261022b602052604090206001015442115b8015611f23575033600090815261022b602052604090205442115b15611f3457611f3183613533565b90505b611f413383856000612cc7565b611f4b838261359b565b506112ca600161012d55565b611f5f6125fd565b61025e80546001600160a01b0319166001600160a01b0392909216919091179055565b600061105682611ab8565b611f956125fd565b6001600160a01b038116611ffa5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161116c565b6110a281612e74565b61200b6125fd565b6001600160a01b0381166120325760405163f5bf603960e01b815260040160405180910390fd5b61203e610260826135b9565b1561205c5760405163c45546f760e01b815260040160405180910390fd5b6001600160a01b038116600090815261022b60205260408120549003612095576040516332ffc55b60e11b815260040160405180910390fd5b6120a1610260826134ff565b6040516001600160a01b038216907f0bd7504c563a4658373bef3dbb51f91f63b8c6d5ba60806c678e75df33b4569890600090a250565b336001600160a01b0382160361213a5760405162461bcd60e51b815260206004820152602160248201527f4552433737373a207265766f6b696e672073656c66206173206f70657261746f6044820152603960f91b606482015260840161116c565b6001600160a01b038116600090815260ce602052604090205460ff161561218e5733600090815260d0602090815260408083206001600160a01b03851684529091529020805460ff191660011790556121ba565b33600090815260cf602090815260408083206001600160a01b03851684529091529020805460ff191690555b60405133906001600160a01b038316907f50546e66e5f44d728365dc3908c63bc5cfeeab470722c1677e3073a6ac294aa190600090a350565b6121fd3385611d69565b6122195760405162461bcd60e51b815260040161116c90615157565b61222584848484613622565b50505050565b6000610228546122396137d7565b610f059190615291565b61224b6125fd565b61271081111561226e57604051630bc4369360e21b815260040160405180910390fd5b61025f55565b6113c033838360405180602001604052806000815250613622565b6000806102625461022a54426122a59190615072565b6122af91906152a4565b9050670de0b6b3a764000081106122c857600091505090565b6000670de0b6b3a764000061026154836122e291906152a4565b6122ec91906152bb565b905080610261546122fd9190615072565b9250505090565b6001600160a01b038116600090815261022b6020526040812060020154612329611477565b80612335575061022954155b156123405792915050565b600061271061234d61222b565b6001600160a01b038616600090815261022b602052604090206003015461237491906152a4565b61237e91906152bb565b9050808211612391575060009392505050565b6119f18183615072565b8282028115158415858304851417166123b357600080fd5b0492915050565b60006123c4611477565b156123d157506000919050565b60006123db613845565b6102285490915060006127106123ef61222b565b6001600160a01b038716600090815261022b602052604090206003015461241691906152a4565b61242091906152bb565b6001600160a01b038616600090815261022b6020526040902060020154909150828411158061244f5750808211155b156124605750600095945050505050565b600061246c8486615072565b9050600061247a8385615072565b90506000612488838361386a565b905061249b816124966137d7565b61386a565b9998505050505050505050565b6001600160a01b03831661250c5760405162461bcd60e51b815260206004820152602560248201527f4552433737373a20617070726f76652066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161116c565b6001600160a01b03821661256e5760405162461bcd60e51b815260206004820152602360248201527f4552433737373a20617070726f766520746f20746865207a65726f206164647260448201526265737360e81b606482015260840161116c565b6001600160a01b03838116600081815260d1602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b8282028115158415858304851417166125e757600080fd5b6001826001830304018115150290509392505050565b61015f546001600160a01b031633146114de5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161116c565b612660613880565b60fb805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6126b261328f565b60fb805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861268d3390565b6001600160a01b03838116600090815260d16020908152604080832093861683529290522054600019811461222557818110156127665760405162461bcd60e51b815260206004820152601e60248201527f4552433737373a20696e73756666696369656e7420616c6c6f77616e63650000604482015260640161116c565b61222584848484036124a8565b6001600160a01b0386166127d85760405162461bcd60e51b815260206004820152602660248201527f4552433737373a207472616e736665722066726f6d20746865207a65726f206160448201526564647265737360d01b606482015260840161116c565b6001600160a01b03851661283a5760405162461bcd60e51b8152602060048201526024808201527f4552433737373a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161116c565b336128498188888888886138cb565b6128578188888888886139f2565b61286681888888888888613b58565b50505050505050565b600261012d54036128c25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161116c565b600261012d55565b336001600160a01b038216146128e5576128e58133856126e7565b6128ef8484613d13565b61291981846040518060200160405280600081525060405180602001604052806000815250613622565b60408051858152602081018590526001600160a01b03808416929085169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a46101c354612225906001600160a01b03168386613e83565b600161012d55565b6110a26125fd565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156129bf5761195983613ee6565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612a19575060408051601f3d908101601f19168201909252612a16918101906152dd565b60015b612a7c5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b606482015260840161116c565b6000805160206155508339815191528114612aeb5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b606482015260840161116c565b50611959838383613f82565b6101c3546040516370a0823160e01b81526001600160a01b03838116600483015260009216906370a0823190602401602060405180830381865afa158015612b43573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105691906152dd565b6001600160a01b038216600090815261022b602052604090206002015481811015612bd45760405162461bcd60e51b815260206004820152601d60248201527f4c6f73732069732067726561746572207468616e207468652064656274000000604482015260640161116c565b6102295415612c77576000612c21610228548461022954612bf591906152a4565b612bff91906152bb565b6001600160a01b038616600090815261022b602052604090206003015461386a565b90508015612c75576001600160a01b038416600090815261022b602052604081206003018054839290612c55908490615072565b92505081905550806102296000828254612c6f9190615072565b90915550505b505b6001600160a01b038316600090815261022b602052604081206002018054849290612ca3908490615072565b92505081905550816102286000828254612cbd9190615072565b9091555050505050565b6000612cd2856123ba565b90506000612cdf33612304565b9050612ceb858261386a565b94508415612d3f576001600160a01b038616600090815261022b602052604081206002018054879290612d1f908490615072565b92505081905550846102286000828254612d399190615072565b90915550505b8115612d91576001600160a01b038616600090815261022b602052604081206002018054849290612d71908490615291565b92505081905550816102286000828254612d8b9190615291565b90915550505b6000612d9d8686615291565b905060008084831015612dc557612db48386615072565b9150612dc08983613fa7565b612de3565b84831115612de357612dd78584615072565b9050612de38982613fbf565b604080518981526020810189905290810183905260608101829052608081018790526001600160a01b038a16907f92a0cdbae2e10dc214d482504ecbf0461593fd2fbfbedad5a195f5ebb7dcee739060a00160405180910390a2505050505050505050565b6000612e5261228f565b9050818111612e62576000612e6c565b612e6c8282615072565b610261555050565b61015f80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008060005b8454811015612fbc57836001600160a01b0316858281548110612ef257612ef26152f6565b6000918252602090912001546001600160a01b031603612f1157600191505b818015612f2a57508454612f2790600190615072565b81105b15612faa5784612f3b826001615291565b81548110612f4b57612f4b6152f6565b9060005260206000200160009054906101000a90046001600160a01b0316858281548110612f7b57612f7b6152f6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80612fb48161530c565b915050612ecd565b5080156110305783805480612fd357612fd3615325565b600082815260209020810160001990810180546001600160a01b03191690550190559392505050565b6001600160a01b038116600090815261022b6020526040902060030154156130375760405163c69bfc5f60e01b815260040160405180910390fd5b6001600160a01b0316600090815261022b60205260408120818155600181018290556002810182905560030155565b600054610100900460ff1661308d5760405162461bcd60e51b815260040161116c9061533b565b613095613fd8565b6114de614007565b600054610100900460ff166130c45760405162461bcd60e51b815260040161116c9061533b565b6130cc614036565b6130d4614065565b6114de614094565b600054610100900460ff166131035760405162461bcd60e51b815260040161116c9061533b565b612225848484846140c2565b81548151606091908114613136576040516336c2ff5d60e01b815260040160405180910390fd5b60005b818110156131f8576000858281548110613155576131556152f6565b60009182526020822001546001600160a01b031691505b838110156131e357858181518110613186576131866152f6565b60200260200101516001600160a01b0316826001600160a01b031603156131e3576131b2600185615072565b81036131d1576040516336c2ff5d60e01b815260040160405180910390fd5b806131db8161530c565b91505061316c565b505080806131f09061530c565b915050613139565b50919392505050565b6101c35461321a906001600160a01b0316333086614105565b6132448183604051806020016040528060008152506040518060200160405280600081525061413d565b60408051848152602081018490526001600160a01b0383169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3505050565b613297611477565b156114de5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161116c565b60006132e161286f565b6132ea82611f82565b90508060000361333c5760405162461bcd60e51b815260206004820181905260248201527f476976656e2061737365747320726573756c7420696e2030207368617265732e604482015260640161116c565b611114828233613201565b6001600160a01b038216600090815261022b602052604090205461337e576040516332ffc55b60e11b815260040160405180910390fd5b6001600160a01b038216600090815261022b60205260408120600301546102298054919290916133af908490615072565b90915550506001600160a01b038216600090815261022b6020526040812060030182905561022980548392906133e6908490615291565b90915550506102295461271010156113c05780610229546134079190615072565b61341390612710615072565b604051639eb4cd0560e01b815260040161116c91815260200190565b6001600160a01b038216600090815261022b602052604090205415613467576040516312635b0b60e21b815260040160405180910390fd5b61271081610229546134799190615291565b111561348f576102295461341390612710615072565b604080516080810182524280825260208083019182526000838501818152606085018781526001600160a01b038916835261022b909352948120935184559151600184015592516002830155915160039091015561022980548392906134f6908490615291565b90915550505050565b81546001810183556000928352602090922090910180546001600160a01b0319166001600160a01b03909216919091179055565b60008061271061025f548461354891906152a4565b61355291906152bb565b905080156110565761025e54611056906001600160a01b031661357483611ab8565b60405180602001604052806000815250604051806020016040528060008152506000614147565b80826135a561228f565b6135af9190615291565b612e6c9190615072565b6000805b835481101561361857826001600160a01b03168482815481106135e2576135e26152f6565b6000918252602090912001546001600160a01b031603613606576001915050611056565b806136108161530c565b9150506135bd565b5060009392505050565b6001600160a01b0384166136835760405162461bcd60e51b815260206004820152602260248201527f4552433737373a206275726e2066726f6d20746865207a65726f206164647265604482015261737360f01b606482015260840161116c565b33613693818660008787876138cb565b6001600160a01b038516600090815260c96020526040902054848110156137085760405162461bcd60e51b815260206004820152602360248201527f4552433737373a206275726e20616d6f756e7420657863656564732062616c616044820152626e636560e81b606482015260840161116c565b6001600160a01b038616600090815260c960205260408120868303905560ca8054879290613737908490615072565b92505081905550856001600160a01b0316826001600160a01b03167fa78a9be3a7b862d26933ad85fb11d80ef66b8f972d7cbba06621d583943a409887878760405161378593929190615386565b60405180910390a36040518581526000906001600160a01b038816907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3505050505050565b6101c3546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015613821573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0591906152dd565b600061271061385261222b565b6102295461386091906152a4565b610f0591906152bb565b60008183106138795781611030565b5090919050565b613888611477565b6114de5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161116c565b60405163555ddc6560e11b81526001600160a01b03861660048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe8956024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa15801561394c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139709190615274565b90506001600160a01b0381161561286657604051633ad5cbc160e11b81526001600160a01b038216906375ab9782906139b7908a908a908a908a908a908a906004016153bb565b600060405180830381600087803b1580156139d157600080fd5b505af11580156139e5573d6000803e3d6000fd5b5050505050505050505050565b6001600160a01b038516600090815260c9602052604090205483811015613a6b5760405162461bcd60e51b815260206004820152602760248201527f4552433737373a207472616e7366657220616d6f756e7420657863656564732060448201526662616c616e636560c81b606482015260840161116c565b6001600160a01b03808716600090815260c96020526040808220878503905591871681529081208054869290613aa2908490615291565b92505081905550846001600160a01b0316866001600160a01b0316886001600160a01b03167f06b541ddaa720db2b10a4d0cdac39b8d360425fc073085fac19bc82614677987878787604051613afa93929190615386565b60405180910390a4846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef86604051613b4791815260200190565b60405180910390a350505050505050565b60405163555ddc6560e11b81526001600160a01b03861660048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b6024820152600090731820a4b7618bde71dce8cdc73aab6c95905fad249063aabbb8ca90604401602060405180830381865afa158015613bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bfd9190615274565b90506001600160a01b03811615613c79576040516223de2960e01b81526001600160a01b038216906223de2990613c42908b908b908b908b908b908b906004016153bb565b600060405180830381600087803b158015613c5c57600080fd5b505af1158015613c70573d6000803e3d6000fd5b505050506117d1565b81156117d1576001600160a01b0386163b156117d15760405162461bcd60e51b815260206004820152604d60248201527f4552433737373a20746f6b656e20726563697069656e7420636f6e747261637460448201527f20686173206e6f20696d706c656d656e74657220666f7220455243373737546f60648201526c1ad95b9cd49958da5c1a595b9d609a1b608482015260a40161116c565b81613d1c6137d7565b10613d25575050565b60005b61026054811015613e50576000613d3d6137d7565b9050808411613d4c5750613e50565b60006102608381548110613d6257613d626152f6565b60009182526020822001546001600160a01b03169150613da7613d858488615072565b6001600160a01b038416600090815261022b602052604090206002015461386a565b905080600003613db957505050613e3e565b604051632e1a7d4d60e01b8152600481018290526000906001600160a01b03841690632e1a7d4d906024016020604051808303816000875af1158015613e03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e2791906152dd565b90508015613e3957613e398382612b67565b505050505b80613e488161530c565b915050613d28565b5081613e5a6137d7565b10156113c05760405163bce5067160e01b8152600481018390526024810182905260440161116c565b6040516001600160a01b03831660248201526044810182905261195990849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152614284565b6001600160a01b0381163b613f535760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161116c565b60008051602061555083398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b613f8b83614356565b600082511180613f985750805b15611959576122258383614396565b6101c3546113c0906001600160a01b03168383613e83565b6101c3546113c0906001600160a01b0316833084614105565b600054610100900460ff16613fff5760405162461bcd60e51b815260040161116c9061533b565b6114de61448a565b600054610100900460ff1661402e5760405162461bcd60e51b815260040161116c9061533b565b6114de6144b1565b600054610100900460ff1661405d5760405162461bcd60e51b815260040161116c9061533b565b6114de6144e1565b600054610100900460ff1661408c5760405162461bcd60e51b815260040161116c9061533b565b6114de614514565b600054610100900460ff166140bb5760405162461bcd60e51b815260040161116c9061533b565b4261022a55565b600054610100900460ff166140e95760405162461bcd60e51b815260040161116c9061533b565b6140f483838361453b565b6140fc614065565b6122258461456d565b6040516001600160a01b03808516602483015283166044820152606481018290526122259085906323b872dd60e01b90608401613eaf565b6122258484848460015b6001600160a01b03851661419d5760405162461bcd60e51b815260206004820181905260248201527f4552433737373a206d696e7420746f20746865207a65726f2061646472657373604482015260640161116c565b60003390508460ca60008282546141b49190615291565b90915550506001600160a01b038616600090815260c96020526040812080548792906141e1908490615291565b909155506141f790508160008888888888613b58565b856001600160a01b0316816001600160a01b03167f2fe5be0146f74c5bce36c0b80911af6c7d86ff27e89d5cfa61fc681327954e5d87878760405161423e93929190615386565b60405180910390a36040518581526001600160a01b038716906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016137c7565b60006142d9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166145b79092919063ffffffff16565b80519091501561195957808060200190518101906142f79190615408565b6119595760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161116c565b61435f81613ee6565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6143fe5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161116c565b600080846001600160a01b0316846040516144199190615425565b600060405180830381855af49150503d8060008114614454576040519150601f19603f3d011682016040523d82523d6000602084013e614459565b606091505b50915091506144818282604051806060016040528060278152602001615570602791396145c6565b95945050505050565b600054610100900460ff166114de5760405162461bcd60e51b815260040161116c9061533b565b600054610100900460ff166144d85760405162461bcd60e51b815260040161116c9061533b565b6114de33612e74565b600054610100900460ff166145085760405162461bcd60e51b815260040161116c9061533b565b60fb805460ff19169055565b600054610100900460ff1661297c5760405162461bcd60e51b815260040161116c9061533b565b600054610100900460ff166145625760405162461bcd60e51b815260040161116c9061533b565b6119598383836145df565b600054610100900460ff166145945760405162461bcd60e51b815260040161116c9061533b565b6101c380546001600160a01b0319166001600160a01b0392909216919091179055565b60606119f184846000856147bb565b606083156145d5575081611030565b6110308383614896565b600054610100900460ff166146065760405162461bcd60e51b815260040161116c9061533b565b60cb614612848261548f565b5060cc61461f838261548f565b5080516146339060cd906020840190614939565b5060005b815181101561469c57600160ce6000848481518110614658576146586152f6565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055806146948161530c565b915050614637565b506040516329965a1d60e01b815230600482018190527fac7fbab5f54a3ca8194167523c6753bfeb96a445279294b6125b68cce217705460248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad24906329965a1d90606401600060405180830381600087803b15801561471657600080fd5b505af115801561472a573d6000803e3d6000fd5b50506040516329965a1d60e01b815230600482018190527faea199e31a596269b42cdafd93407f14436db6e4cad65417994c2eb37381e05a60248301526044820152731820a4b7618bde71dce8cdc73aab6c95905fad2492506329965a1d9150606401600060405180830381600087803b1580156147a757600080fd5b505af1158015612866573d6000803e3d6000fd5b60608247101561481c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161116c565b600080866001600160a01b031685876040516148389190615425565b60006040518083038185875af1925050503d8060008114614875576040519150601f19603f3d011682016040523d82523d6000602084013e61487a565b606091505b509150915061488b878383876148c0565b979650505050505050565b8151156148a65781518083602001fd5b8060405162461bcd60e51b815260040161116c9190614a50565b6060831561492f578251600003614928576001600160a01b0385163b6149285760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161116c565b50816119f1565b6119f18383614896565b82805482825590600052602060002090810192821561498e579160200282015b8281111561498e57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614959565b5061499a92915061499e565b5090565b5b8082111561499a576000815560010161499f565b6020808252825182820181905260009190848201906040850190845b818110156149f45783516001600160a01b0316835292840192918401916001016149cf565b50909695505050505050565b60005b83811015614a1b578181015183820152602001614a03565b50506000910152565b60008151808452614a3c816020860160208601614a00565b601f01601f19169290920160200192915050565b6020815260006110306020830184614a24565b600060208284031215614a7557600080fd5b5035919050565b6001600160a01b03811681146110a257600080fd5b60008060408385031215614aa457600080fd5b8235614aaf81614a7c565b946020939093013593505050565b80151581146110a257600080fd5b600060208284031215614add57600080fd5b813561103081614abd565b600080600060608486031215614afd57600080fd5b8335614b0881614a7c565b92506020840135614b1881614a7c565b929592945050506040919091013590565b600060208284031215614b3b57600080fd5b813561103081614a7c565b60008060408385031215614b5957600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614ba757614ba7614b68565b604052919050565b600067ffffffffffffffff821115614bc957614bc9614b68565b50601f01601f191660200190565b600082601f830112614be857600080fd5b8135614bfb614bf682614baf565b614b7e565b818152846020838601011115614c1057600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215614c4057600080fd5b8235614c4b81614a7c565b9150602083013567ffffffffffffffff811115614c6757600080fd5b614c7385828601614bd7565b9150509250929050565b600080600080600060a08688031215614c9557600080fd5b8535614ca081614a7c565b94506020860135614cb081614a7c565b935060408601359250606086013567ffffffffffffffff80821115614cd457600080fd5b614ce089838a01614bd7565b93506080880135915080821115614cf657600080fd5b50614d0388828901614bd7565b9150509295509295909350565b60008060408385031215614d2357600080fd5b823591506020830135614d3581614a7c565b809150509250929050565b60008060408385031215614d5357600080fd5b8235614d5e81614a7c565b91506020830135614d3581614abd565b600082601f830112614d7f57600080fd5b8135602067ffffffffffffffff821115614d9b57614d9b614b68565b8160051b614daa828201614b7e565b9283528481018201928281019087851115614dc457600080fd5b83870192505b8483101561488b578235614ddd81614a7c565b82529183019190830190614dca565b600080600080600080600060e0888a031215614e0757600080fd5b8735614e1281614a7c565b96506020880135614e2281614a7c565b95506040880135945060608801359350608088013567ffffffffffffffff80821115614e4d57600080fd5b614e598b838c01614bd7565b945060a08a0135915080821115614e6f57600080fd5b614e7b8b838c01614bd7565b935060c08a0135915080821115614e9157600080fd5b50614e9e8a828b01614d6e565b91505092959891949750929550565b600060208284031215614ebf57600080fd5b813567ffffffffffffffff811115614ed657600080fd5b6119f184828501614d6e565b600080600060608486031215614ef757600080fd5b8335614f0281614a7c565b925060208401359150604084013567ffffffffffffffff811115614f2557600080fd5b614f3186828701614bd7565b9150509250925092565b600080600060608486031215614f5057600080fd5b833592506020840135614f6281614a7c565b91506040840135614f7281614a7c565b809150509250925092565b60008060408385031215614f9057600080fd5b8235614f9b81614a7c565b91506020830135614d3581614a7c565b60008060008060808587031215614fc157600080fd5b8435614fcc81614a7c565b935060208501359250604085013567ffffffffffffffff80821115614ff057600080fd5b614ffc88838901614bd7565b9350606087013591508082111561501257600080fd5b5061501f87828801614bd7565b91505092959194509250565b6000806040838503121561503e57600080fd5b82359150602083013567ffffffffffffffff811115614c6757600080fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156110565761105661505c565b600181811c9082168061509957607f821691505b6020821081036150b957634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602c908201527f4552433737373a2063616c6c6572206973206e6f7420616e206f70657261746f60408201526b39103337b9103437b63232b960a11b606082015260800190565b6000602082840312156151b557600080fd5b815167ffffffffffffffff8111156151cc57600080fd5b8201601f810184136151dd57600080fd5b80516151eb614bf682614baf565b81815285602083850101111561520057600080fd5b614481826020830160208601614a00565b60008251615223818460208701614a00565b7320456f6e69616e205661756c742053686172657360601b920191825250601401919050565b6232b7b760e91b815260008251615267816003850160208701614a00565b9190910160030192915050565b60006020828403121561528657600080fd5b815161103081614a7c565b808201808211156110565761105661505c565b80820281158282048414176110565761105661505c565b6000826152d857634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156152ef57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60006001820161531e5761531e61505c565b5060010190565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b83815260606020820152600061539f6060830185614a24565b82810360408401526153b18185614a24565b9695505050505050565b6001600160a01b0387811682528681166020830152851660408201526060810184905260c0608082018190526000906153f690830185614a24565b82810360a084015261249b8185614a24565b60006020828403121561541a57600080fd5b815161103081614abd565b60008251615437818460208701614a00565b9190910192915050565b601f82111561195957600081815260208120601f850160051c810160208610156154685750805b601f850160051c820191505b8181101561548757828155600101615474565b505050505050565b815167ffffffffffffffff8111156154a9576154a9614b68565b6154bd816154b78454615085565b84615441565b602080601f8311600181146154f257600084156154da5750858301515b600019600386901b1c1916600185901b178555615487565b600085815260208120601f198616915b8281101561552157888601518255948401946001909101908401615502565b508582101561553f5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212203dc4e404ab080887df26d71e40bc3c596c0dbfe8e580503f9af7da4a8fbe40a064736f6c63430008130033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "AuthorizedOperator(address,address)": {
        "details": "Emitted when `operator` is made operator for `tokenHolder`."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is upgraded."
      },
      "BorrowerDebtManagementReported(address,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "borrower": "Borrower's contract address",
          "debtPayment": "Amount of outstanding debt repaid by the borrower",
          "freeFunds": "Free funds on the borrower's contract that remain after the debt is paid",
          "fundsGiven": "Funds issued to the borrower by this lender",
          "fundsTaken": "Funds that have been taken from the borrower by the lender",
          "loss": "Amount of funds that the borrower realised as loss"
        }
      },
      "Burned(address,address,uint256,bytes,bytes)": {
        "details": "Emitted when `operator` destroys `amount` tokens from `account`. Note that some additional user `data` and `operatorData` can be logged in the event."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Minted(address,address,uint256,bytes,bytes)": {
        "details": "Emitted when `amount` tokens are created by `operator` and assigned to `to`. Note that some additional user `data` and `operatorData` can be logged in the event."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RevokedOperator(address,address)": {
        "details": "Emitted when `operator` is revoked its operator status for `tokenHolder`."
      },
      "StrategyAdded(address,uint256)": {
        "params": {
          "debtRatio": "Maximum portion of the loan that the strategy can take (in BPS).",
          "strategy": "Address of the strategy contract."
        }
      },
      "StrategyRemoved(address,bool)": {
        "params": {
          "fromQueueOnly": "If \"true\", then the strategy has only been removed from the withdrawal queue.",
          "strategy": "Address of the strategy contract."
        }
      },
      "StrategyReturnedToQueue(address)": {
        "params": {
          "strategy": "Address of the strategy contract."
        }
      },
      "StrategyRevoked(address)": {
        "params": {
          "strategy": "Address of the strategy contract."
        }
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "addStrategy(address,uint256)": {
        "params": {
          "debtRatio": "a ratio that shows how much of the new strategy can take, relative to other strategies.",
          "strategy": "a new strategy address."
        }
      },
      "addStrategyToQueue(address)": {
        "params": {
          "strategy": "a strategy address."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}. Note that operator and allowance concepts are orthogonal: operators may not have allowance, and accounts with allowance may not be operators themselves."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Note that accounts cannot have allowance issued by their operators."
      },
      "authorizeOperator(address)": {
        "details": "See {IERC777-authorizeOperator}."
      },
      "availableCredit()": {
        "returns": {
          "_0": "Available credit as amount of tokens"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens owned by an account (`tokenHolder`)."
      },
      "burn(uint256,bytes)": {
        "details": "See {IERC777-burn}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "currentDebt()": {
        "returns": {
          "_0": "Debt as amount of tokens"
        }
      },
      "decimals()": {
        "details": "See {ERC20-decimals}. Always returns 18, as per the [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility)."
      },
      "defaultOperators()": {
        "details": "See {IERC777-defaultOperators}."
      },
      "deposit(uint256)": {
        "details": "Override to add the \"whenNotPaused\" modifier"
      },
      "granularity()": {
        "details": "See {IERC777-granularity}. This implementation always returns `1`."
      },
      "isActivated()": {
        "returns": {
          "_0": "\"true\" if the borrower is active"
        }
      },
      "isOperatorFor(address,address)": {
        "details": "See {IERC777-isOperatorFor}."
      },
      "name()": {
        "details": "See {IERC777-name}."
      },
      "operatorBurn(address,uint256,bytes,bytes)": {
        "details": "See {IERC777-operatorBurn}. Emits {Burned} and {IERC20-Transfer} events."
      },
      "operatorSend(address,address,uint256,bytes,bytes)": {
        "details": "See {IERC777-operatorSend}. Emits {Sent} and {IERC20-Transfer} events."
      },
      "outstandingDebt()": {
        "returns": {
          "_0": "Outstanding debt as amount of tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Explicitly overridden here to keep this function exposed via \"IVault\" interface.",
        "returns": {
          "_0": "\"true\" if the contract is paused, and \"false\" otherwise."
        }
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "removeStrategy(address,bool)": {
        "params": {
          "fromQueueOnly": "if \"true\", then the strategy will only be removed from the withdrawal queue.",
          "strategy": "a strategy to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reorderWithdrawalQueue(address[])": {
        "params": {
          "queue": "a new queue that will replace the existing one.        Should contain only those elements that already present in the existing queue."
        }
      },
      "reportNegativeDebtManagement(uint256,uint256)": {
        "params": {
          "debtPayment": "is the funds that the borrower must release in order to pay off his outstanding debt (if any).",
          "loss": "a number of tokens by which the borrower's balance has decreased since the last report.        May include a portion of the outstanding debt that the borrower was unable to repay."
        }
      },
      "reportPositiveDebtManagement(uint256,uint256)": {
        "params": {
          "debtPayment": "is the funds that the borrower must release in order to pay off his outstanding debt (if any).",
          "extraFreeFunds": "an extra amount of free funds borrower's contract has.                       This reporting amount must be greater than the borrower's outstanding debt."
        }
      },
      "revokeOperator(address)": {
        "details": "See {IERC777-revokeOperator}."
      },
      "revokeStrategy(address)": {
        "params": {
          "strategy": "a strategy to revoke."
        }
      },
      "send(address,uint256,bytes)": {
        "details": "See {IERC777-send}. Also emits a {IERC20-Transfer} event for ERC20 compatibility."
      },
      "setEmergencyShutdown(bool)": {
        "params": {
          "shutdown": "a new vault pause state. If \"true\" is passed, the vault will be paused."
        }
      },
      "setLockedProfitReleaseRate(uint256)": {
        "params": {
          "rate": "the rate of release of locked profit (percent per second scaled to 1e18).             The desire value of this parameter can be calculated as 1e18 / DurationInSeconds."
        }
      },
      "setManagementFee(uint256)": {
        "params": {
          "_managementFee": "a new management fee value (in BPS)."
        }
      },
      "setRewards(address)": {
        "params": {
          "_rewards": "a new rewards address."
        }
      },
      "strategyDebt(address)": {
        "params": {
          "strategy": "the strategy address."
        }
      },
      "strategyRatio(address)": {
        "params": {
          "strategy": "the strategy address."
        }
      },
      "symbol()": {
        "details": "See {IERC777-symbol}."
      },
      "totalAssets()": {
        "details": "Must be implemented by child contract."
      },
      "totalSupply()": {
        "details": "See {IERC777-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient} interface if it is a contract. Also emits a {Sent} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Note that operator and allowance concepts are orthogonal: operators cannot call `transferFrom` (unless they have allowance), and accounts with allowance cannot call `operatorSend` (unless they are operators). Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "returns": {
          "_0": "a version in semantic versioning format"
        }
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new      variables without shifting down storage in the inheritance chain.      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BorrowerDebtManagementReported(address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Event that must occur when the borrower reported the results of his debt management"
      },
      "Deposit(address,address,uint256,uint256)": {
        "notice": "`sender` has exchanged `assets` for `shares`, and transferred those `shares` to `owner`. emitted when tokens are deposited into the Vault via the mint and deposit methods."
      },
      "LockedProfitReleaseRateChanged(uint256)": {
        "notice": "Event that should happen when the locked-in profit release rate changed."
      },
      "StrategyAdded(address,uint256)": {
        "notice": "Event that should happen when the strategy connects to the vault."
      },
      "StrategyRemoved(address,bool)": {
        "notice": "Event that should happen when the strategy has been removed from the vault."
      },
      "StrategyReturnedToQueue(address)": {
        "notice": "Event that should happen when the strategy has been returned to the withdrawal queue."
      },
      "StrategyRevoked(address)": {
        "notice": "Event that should happen when the strategy has been revoked from the vault."
      },
      "Withdraw(address,address,address,uint256,uint256)": {
        "notice": "`sender` has exchanged `shares`, owned by `owner`, for `assets`, and transferred those `assets` to `receiver`. emitted when shares are withdrawn from the Vault in ERC4626.redeem or ERC4626.withdraw methods."
      }
    },
    "kind": "user",
    "methods": {
      "LOCKED_PROFIT_RELEASE_SCALE()": {
        "notice": "Represents the maximum value of the locked-in profit ratio scale (where 1e18 is 100%)."
      },
      "addStrategy(address,uint256)": {
        "notice": "Adds a new strategy to the vault."
      },
      "addStrategyToQueue(address)": {
        "notice": "Adds a strategy to the withdrawal queue. The strategy must already be registered as a borrower."
      },
      "asset()": {
        "notice": "The underlying token managed by the Vault. Has units defined by the corresponding ERC-20 contract. Stored as address of the underlying token used for the Vault for accounting, depositing, and withdrawing."
      },
      "availableCredit()": {
        "notice": "Returns the number of tokens the borrower (caller of this function) can take from the lender"
      },
      "borrowersData(address)": {
        "notice": "Records with information on each borrower using the lender's services"
      },
      "convertToAssets(uint256)": {
        "notice": "The amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met. - is NOT inclusive of any fees that are charged against assets in the Vault. - do NOT show any variations depending on the caller. - do NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - do NOT revert unless due to integer overflow caused by an unreasonably large input. - round down towards 0. This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "convertToShares(uint256)": {
        "notice": "The amount of shares that the Vault would exchange for the amount of assets provided, in an ideal scenario where all the conditions are met. - is NOT inclusive of any fees that are charged against assets in the Vault. - do NOT show any variations depending on the caller. - do NOT reflect slippage or other on-chain conditions, when performing the actual exchange. - do NOT revert unless due to integer overflow caused by an unreasonably large input. - round down towards 0. This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and from."
      },
      "currentDebt()": {
        "notice": "Returns the amount of funds taken by the borrower (caller of this function)."
      },
      "currentDebt(address)": {
        "notice": "Returns the current debt that the strategy has."
      },
      "currentDebtRatio()": {
        "notice": "Returns the debt ratio of the borrower (caller of this function)."
      },
      "debtRatio()": {
        "notice": "Debt ratio for the Lender across all borrowers (in BPS, <= 10k)"
      },
      "deposit(uint256)": {
        "notice": "Mints the Vault shares for msg.sender, according to the number of deposited base tokens. - emits the Deposit event. - support ERC-20 approve / transferFrom on asset as a deposit flow.   MAY support an additional flow in which the underlying tokens are owned by the Vault contract   before the deposit execution, and are accounted for during deposit. - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc). Note that most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "deposit(uint256,address)": {
        "notice": "Mints Vault shares to receiver by depositing exactly amount of underlying tokens. - emits the Deposit event. - support ERC-20 approve / transferFrom on asset as a deposit flow.   MAY support an additional flow in which the underlying tokens are owned by the Vault contract   before the deposit execution, and are accounted for during deposit. - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage,   the user not approving enough underlying tokens to the Vault contract, etc). Note that most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "getQueueSize()": {
        "notice": "Returns the size of the withdrawal queue."
      },
      "isActivated()": {
        "notice": "Returns the activation status of the borrower (caller of this function)."
      },
      "isActivated(address)": {
        "notice": "Returns the activation status of the specified borrower."
      },
      "lastReport()": {
        "notice": "Returns the last report timestamp of the borrower (caller of this function)."
      },
      "lastReport(address)": {
        "notice": "Returns the last report timestamp of the specified borrower."
      },
      "lastReportTimestamp()": {
        "notice": "Last time a report occurred by any borrower"
      },
      "lendingAssets()": {
        "notice": "Returns the total amount of all tokens (including those on the contract balance and taken by borrowers)"
      },
      "lockedProfitBaseline()": {
        "notice": "The amount of funds that cannot be withdrawn by users.         Decreases with time at the rate of \"lockedProfitReleaseRate\"."
      },
      "lockedProfitReleaseRate()": {
        "notice": "The rate of \"lockedProfitBaseline\" decline on the locked-in profit scale (scaled to 1e18).         Represents the amount of funds that will be unlocked when one second passes."
      },
      "managementFee()": {
        "notice": "Vault management fee (in BPS)."
      },
      "maxDeposit(address)": {
        "notice": "Maximum amount of the underlying asset that can be deposited into the Vault for the receiver, through a deposit call. - returns the maximum amount of assets deposit would allow to be deposited   for receiver and not cause a revert, which MUST NOT be higher than the actual maximum   that would be accepted (it should underestimate if necessary).   This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset. - factor in both global and user-specific limits, like if deposits are entirely disabled (even temporarily) it MUST return 0. - return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited."
      },
      "maxMint(address)": {
        "notice": "Maximum amount of shares that can be minted from the Vault for the receiver, through a mint call. - return the maximum amount of shares mint would allow to be deposited to receiver   and not cause a revert, which MUST NOT be higher than the actual maximum   that would be accepted (it should underestimate if necessary).   This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset. - factor in both global and user-specific limits,   like if mints are entirely disabled (even temporarily) it MUST return 0. - return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted."
      },
      "maxRedeem(address)": {
        "notice": "Maximum amount of Vault shares that can be redeemed from the owner balance in the Vault, through a redeem call. - return the maximum amount of shares that could be transferred from owner through redeem   and not cause a revert, which MUST NOT be higher than the actual maximum   that would be accepted (it should underestimate if necessary). - factor in both global and user-specific limits,   like if redemption is entirely disabled (even temporarily) it MUST return 0."
      },
      "maxWithdraw(address)": {
        "notice": "Maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault, through a withdraw call. - return the maximum amount of assets that could be transferred from owner through withdraw   and not cause a revert, which MUST NOT be higher than the actual maximum   that would be accepted (it should underestimate if necessary). - factor in both global and user-specific limits,   like if withdrawals are entirely disabled (even temporarily) it MUST return 0."
      },
      "mint(uint256)": {
        "notice": "Mints exactly requested Vault shares to msg.sender by depositing any required amount of underlying tokens. - emits the Deposit event. - support ERC-20 approve / transferFrom on asset as a deposit flow.   MAY support an additional flow in which the underlying tokens are owned by the Vault contract   before the deposit execution, and are accounted for during deposit. - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc). Note that most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "mint(uint256,address)": {
        "notice": "Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens. - emits the Deposit event. - support ERC-20 approve / transferFrom on asset as a deposit flow.   MAY support an additional flow in which the underlying tokens are owned by the Vault contract   before the deposit execution, and are accounted for during deposit. - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc). Note that most implementations will require pre-approval of the Vault with the Vault’s underlying asset token."
      },
      "outstandingDebt()": {
        "notice": "Returns the outstanding debt that the borrower (caller of this function) must repay"
      },
      "paused()": {
        "notice": "Indicates if the vault was shutted down or not."
      },
      "previewDeposit(uint256)": {
        "notice": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions. - return as close to and no more than the exact amount of Vault shares that would be minted   in a deposit call in the same transaction.   I.e. deposit should return the same or more shares as previewDeposit if called in the same transaction. - NOT account for deposit limits like those returned from maxDeposit   and should always act as though the deposit would be accepted,   regardless if the user has enough tokens approved, etc. - inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause deposit to revert. Note that any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "previewMint(uint256)": {
        "notice": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions. - return as close to and no fewer than the exact amount of assets that would be deposited   in a mint call in the same transaction.   I.e. mint should return the same or fewer assets as previewMint if called in the same transaction. - NOT account for mint limits like those returned from maxMint   and should always act as though the mint would be accepted,   regardless if the user has enough tokens approved, etc. - inclusive of deposit fees. Integrators should be aware of the existence of deposit fees. - NOT revert due to vault specific user/global limits.   MAY revert due to other conditions that would also cause mint to revert. Note that any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by minting."
      },
      "previewRedeem(uint256)": {
        "notice": "Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block, given current on-chain conditions. - return as close to and no more than the exact amount of assets that would be withdrawn   in a redeem call in the same transaction.   I.e. redeem should return the same or more assets as previewRedeem   if called in the same transaction. - NOT account for redemption limits like those returned from maxRedeem   and should always act as though the redemption would be accepted,   regardless if the user has enough shares, etc. - inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - NOT revert due to vault specific user/global limits.   MAY revert due to other conditions that would also cause redeem to revert. Note that any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by redeeming."
      },
      "previewWithdraw(uint256)": {
        "notice": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions. - return as close to and no fewer than the exact amount of Vault shares   that would be burned in a withdraw call in the same transaction.   I.e. withdraw should return the same or fewer shares as previewWithdraw   if called in the same transaction. - NOT account for withdrawal limits like those returned from maxWithdraw   and should always act as though the withdrawal would be accepted,   regardless if the user has enough shares, etc. - inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees. - NOT revert due to vault specific user/global limits.   MAY revert due to other conditions that would also cause withdraw to revert. Note that any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in share price or some other type of condition, meaning the depositor will lose assets by depositing."
      },
      "redeem(uint256)": {
        "notice": "Burns exactly shares from msg.sender and sends assets of underlying tokens to msg.sender. - emit the Withdraw event. - support a redeem flow where the shares are burned from owner directly where owner is msg.sender. - MAY support an additional flow in which the shares are transferred to the Vault contract   before the redeem execution, and are accounted for during redeem. - revert if all of shares cannot be redeemed (due to withdrawal limit being reached,   slippage, the owner not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      },
      "redeem(uint256,address,address)": {
        "notice": "Burns exactly shares from owner and sends assets of underlying tokens to receiver. - emit the Withdraw event. - support a redeem flow where the shares are burned from owner directly where owner is msg.sender. - support a redeem flow where the shares are burned from owner directly where msg.sender   has ERC-20 approval over the shares of owner. - MAY support an additional flow in which the shares are transferred to the Vault contract   before the redeem execution, and are accounted for during redeem. - revert if all of shares cannot be redeemed (due to withdrawal limit being reached,   slippage, the owner not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      },
      "removeStrategy(address,bool)": {
        "notice": "Removes a strategy from the vault."
      },
      "reorderWithdrawalQueue(address[])": {
        "notice": "Sets the withdrawal queue."
      },
      "reportNegativeDebtManagement(uint256,uint256)": {
        "notice": "Reports a negative result of the borrower's debt management.         The borrower must call this function if he is unable to cover his outstanding debt or if he has incurred any losses."
      },
      "reportPositiveDebtManagement(uint256,uint256)": {
        "notice": "Reports a positive result of the borrower's debt management.         Borrower must call this function if he has made any profit         or/and has a free funds available to repay the outstanding debt (if any)."
      },
      "revokeStrategy(address)": {
        "notice": "Revokes a strategy from the vault.         Sets strategy's dept ratio to zero, so that the strategy cannot take funds from the vault."
      },
      "rewards()": {
        "notice": "Rewards contract where management fees are sent to."
      },
      "setEmergencyShutdown(bool)": {
        "notice": "Switches the vault pause state."
      },
      "setLockedProfitReleaseRate(uint256)": {
        "notice": "Changes the rate of release of locked-in profit."
      },
      "setManagementFee(uint256)": {
        "notice": "Sets the vault management fee."
      },
      "setRewards(address)": {
        "notice": "Sets the vault rewards address."
      },
      "strategyDebt(address)": {
        "notice": "Returns the current debt of the strategy."
      },
      "strategyRatio(address)": {
        "notice": "Returns the debt ratio of the strategy."
      },
      "totalAssets()": {
        "notice": "Total amount of the underlying asset that is “managed” by Vault. - include any compounding that occurs from yield. - inclusive of any fees that are charged against assets in the Vault. - is NOT revert"
      },
      "totalDebt()": {
        "notice": "Amount of tokens that all borrowers have taken"
      },
      "version()": {
        "notice": "Returns the current version of this contract"
      },
      "withdraw(uint256)": {
        "notice": "Burns shares from msg.sender and sends exactly assets of underlying tokens to msg.sender. - emit the Withdraw event. - support a withdraw flow where the shares are burned from owner directly where owner is msg.sender. - MAY support an additional flow in which the shares are transferred to the Vault contract   before the withdraw execution, and are accounted for during withdraw. - revert if all of assets cannot be withdrawn (due to withdrawal limit being reached,   slippage, the owner not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      },
      "withdraw(uint256,address,address)": {
        "notice": "Burns shares from owner and sends exactly assets of underlying tokens to receiver. - emit the Withdraw event. - support a withdraw flow where the shares are burned from owner directly where owner is msg.sender. - support a withdraw flow where the shares are burned from owner directly where msg.sender   has ERC-20 approval over the shares of owner. - MAY support an additional flow in which the shares are transferred to the Vault contract   before the withdraw execution, and are accounted for during withdraw. - revert if all of assets cannot be withdrawn (due to withdrawal limit being reached,   slippage, the owner not having enough shares, etc). Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed. Those methods should be performed separately."
      },
      "withdrawalQueue(uint256)": {
        "notice": "Arranged list of addresses of strategies, which defines the order for withdrawal."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 573,
        "contract": "src/Vault.sol:Vault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 576,
        "contract": "src/Vault.sol:Vault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 555,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 870,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12046,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3139,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1523,
        "contract": "src/Vault.sol:Vault",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1525,
        "contract": "src/Vault.sol:Vault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "202",
        "type": "t_uint256"
      },
      {
        "astId": 1527,
        "contract": "src/Vault.sol:Vault",
        "label": "_name",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 1529,
        "contract": "src/Vault.sol:Vault",
        "label": "_symbol",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 1542,
        "contract": "src/Vault.sol:Vault",
        "label": "_defaultOperatorsArray",
        "offset": 0,
        "slot": "205",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1546,
        "contract": "src/Vault.sol:Vault",
        "label": "_defaultOperators",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1552,
        "contract": "src/Vault.sol:Vault",
        "label": "_operators",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1558,
        "contract": "src/Vault.sol:Vault",
        "label": "_revokedDefaultOperators",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1564,
        "contract": "src/Vault.sol:Vault",
        "label": "_allowances",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2610,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_uint256)41_storage"
      },
      {
        "astId": 892,
        "contract": "src/Vault.sol:Vault",
        "label": "_paused",
        "offset": 0,
        "slot": "251",
        "type": "t_bool"
      },
      {
        "astId": 997,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1012,
        "contract": "src/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "301",
        "type": "t_uint256"
      },
      {
        "astId": 1070,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 56,
        "contract": "src/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "351",
        "type": "t_address"
      },
      {
        "astId": 176,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12080,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11246,
        "contract": "src/Vault.sol:Vault",
        "label": "asset",
        "offset": 0,
        "slot": "451",
        "type": "t_contract(IERC20Upgradeable)1149"
      },
      {
        "astId": 11251,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "452",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11795,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "502",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8098,
        "contract": "src/Vault.sol:Vault",
        "label": "totalDebt",
        "offset": 0,
        "slot": "552",
        "type": "t_uint256"
      },
      {
        "astId": 8101,
        "contract": "src/Vault.sol:Vault",
        "label": "debtRatio",
        "offset": 0,
        "slot": "553",
        "type": "t_uint256"
      },
      {
        "astId": 8104,
        "contract": "src/Vault.sol:Vault",
        "label": "lastReportTimestamp",
        "offset": 0,
        "slot": "554",
        "type": "t_uint256"
      },
      {
        "astId": 8110,
        "contract": "src/Vault.sol:Vault",
        "label": "borrowersData",
        "offset": 0,
        "slot": "555",
        "type": "t_mapping(t_address,t_struct(BorrowerData)8092_storage)"
      },
      {
        "astId": 8115,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "556",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6388,
        "contract": "src/Vault.sol:Vault",
        "label": "rewards",
        "offset": 0,
        "slot": "606",
        "type": "t_address"
      },
      {
        "astId": 6391,
        "contract": "src/Vault.sol:Vault",
        "label": "managementFee",
        "offset": 0,
        "slot": "607",
        "type": "t_uint256"
      },
      {
        "astId": 6395,
        "contract": "src/Vault.sol:Vault",
        "label": "withdrawalQueue",
        "offset": 0,
        "slot": "608",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6398,
        "contract": "src/Vault.sol:Vault",
        "label": "lockedProfitBaseline",
        "offset": 0,
        "slot": "609",
        "type": "t_uint256"
      },
      {
        "astId": 6401,
        "contract": "src/Vault.sol:Vault",
        "label": "lockedProfitReleaseRate",
        "offset": 0,
        "slot": "610",
        "type": "t_uint256"
      },
      {
        "astId": 6435,
        "contract": "src/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "611",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)41_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[41]",
        "numberOfBytes": "1312"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)1149": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BorrowerData)8092_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Lender.BorrowerData)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowerData)8092_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BorrowerData)8092_storage": {
        "encoding": "inplace",
        "label": "struct Lender.BorrowerData",
        "members": [
          {
            "astId": 8082,
            "contract": "src/Vault.sol:Vault",
            "label": "activationTimestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8085,
            "contract": "src/Vault.sol:Vault",
            "label": "lastReportTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8088,
            "contract": "src/Vault.sol:Vault",
            "label": "debt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8091,
            "contract": "src/Vault.sol:Vault",
            "label": "debtRatio",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}