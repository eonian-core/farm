{
  "address": "0xB3519044B8935E8bFc74ceE8460BDFDA83e69E80",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "needDisableInitializers",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "founder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requiredPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextTokenPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nextTokenPriceMultiplier",
          "type": "uint256"
        }
      ],
      "name": "FounderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IERC5484.BurnAuth",
          "name": "burnAuth",
          "type": "uint8"
        }
      ],
      "name": "Issued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OwnerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RewardDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALANCE_UPDATER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BURNER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requestSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "senderMaxWithdraw",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC4626HookPayload",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "afterDepositTrigger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "assets",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "requestSender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "senderMaxWithdraw",
              "type": "uint256"
            }
          ],
          "internalType": "struct ERC4626HookPayload",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "beforeWithdrawTrigger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burnAuth",
      "outputs": [
        {
          "internalType": "enum IERC5484.BurnAuth",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "calcReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "plusReward",
          "type": "uint256"
        }
      ],
      "name": "depositReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxCountTokens_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nextTokenPriceMultiplier_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialTokenPrice_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCountTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextTokenPriceMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberCoins",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardOwnerIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nextTokenPriceMultiplier_",
          "type": "uint256"
        }
      ],
      "name": "setNextTokenMultiplier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Vault",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "tryToMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract Vault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xff403b83fa94fb9ef14ef26f90c15a34f3f3bf47b0c228cb2d5d0e7c0ba7a875",
  "receipt": {
    "to": null,
    "from": "0x5eCC8564556901132aEaae1E55eC3F4Ea521DBA6",
    "contractAddress": "0xB3519044B8935E8bFc74ceE8460BDFDA83e69E80",
    "transactionIndex": 6,
    "gasUsed": "3760012",
    "logsBloom": "0x
    "blockHash": "0x3124f78dcad4460aed568856e87263273321cbed2d306c2ad31075efb590c9d5",
    "transactionHash": "0xff403b83fa94fb9ef14ef26f90c15a34f3f3bf47b0c228cb2d5d0e7c0ba7a875",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 3823592,
        "transactionHash": "0xff403b83fa94fb9ef14ef26f90c15a34f3f3bf47b0c228cb2d5d0e7c0ba7a875",
        "address": "0xB3519044B8935E8bFc74ceE8460BDFDA83e69E80",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 14,
        "blockHash": "0x3124f78dcad4460aed568856e87263273321cbed2d306c2ad31075efb590c9d5"
      }
    ],
    "blockNumber": 3823592,
    "cumulativeGasUsed": "4620938",
    "status": 1,
    "byzantium": true
  },
  "args": [
    true
  ],
  "numDeployments": 6,
  "solcInputHash": "23e18428f374718784ca9d12b9e8b78f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"needDisableInitializers\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"founder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTokenPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nextTokenPriceMultiplier\",\"type\":\"uint256\"}],\"name\":\"FounderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IERC5484.BurnAuth\",\"name\":\"burnAuth\",\"type\":\"uint8\"}],\"name\":\"Issued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OwnerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RewardDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALANCE_UPDATER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURNER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requestSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMaxWithdraw\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC4626HookPayload\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"afterDepositTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requestSender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"senderMaxWithdraw\",\"type\":\"uint256\"}],\"internalType\":\"struct ERC4626HookPayload\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"beforeWithdrawTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnAuth\",\"outputs\":[{\"internalType\":\"enum IERC5484.BurnAuth\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calcReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"plusReward\",\"type\":\"uint256\"}],\"name\":\"depositReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxCountTokens_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nextTokenPriceMultiplier_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialTokenPrice_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCountTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenPriceMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberCoins\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardOwnerIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextTokenPriceMultiplier_\",\"type\":\"uint256\"}],\"name\":\"setNextTokenMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Vault\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"tryToMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract Vault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"FounderAdded(address,uint256,uint256,uint256,uint256)\":{\"params\":{\"founder\":\"Address of the founder.\",\"nextTokenPrice\":\"Price of the next token.\",\"nextTokenPriceMultiplier\":\"Next token price multiplier in percents.\",\"requiredPrice\":\"Required price for the token.\",\"tokenPrice\":\"Price of the token.\"}},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Issued(address,address,uint256,uint8)\":{\"details\":\"This emit is an add-on to nft's transfer emit in order to distinguish sbt from vanilla nft while providing backward compatibility.\",\"params\":{\"from\":\"The issuer\",\"to\":\"The receiver\",\"tokenId\":\"The id of the issued token\"}},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}.\"},\"burnAuth(uint256)\":{\"details\":\"unassigned tokenIds are invalid, and queries do throw\",\"params\":{\"tokenId\":\"The identifier for a token.\"}},\"claimReward()\":{\"details\":\"claim reward for token owner\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"depositReward(uint256)\":{\"details\":\"deposit reward to the contract to be claimed by token owners\",\"params\":{\"plusReward\":\"amount of reward to be deposited\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setNextTokenMultiplier(uint256)\":{\"details\":\"set multiplicator for the next token in percents in case nextTokenPriceMultiplier_ = 13_000 the next price of the token will be: curPrice * 130%\",\"params\":{\"nextTokenPriceMultiplier_\":\"persent multiplicator\"}},\"setTokenURI(string)\":{\"details\":\"set token metadata uri can be used as utility method and custom logic on front-end\"},\"setTokenURI(string,uint256)\":{\"details\":\"set token metadata uri can be used as utility method and custom logic on front-end by owner of the contract in case of end user has a wrong uri or somebody corrupted it\"},\"setVault(address)\":{\"details\":\"set vault\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"tryToMint(address,string,uint256)\":{\"details\":\"function for mint new SBT token\",\"params\":{\"amount\":\"holder balance, used as token price\",\"to\":\"address of user who will receive token\",\"uri\":\"token metadata uri\"},\"returns\":{\"_0\":\"true if token was minted\"}},\"upgradeTo(address)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"version()\":{\"returns\":{\"_0\":\"a version in semantic versioning format\"}}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"},\"nextTokenPrice\":{\"details\":\"return price for the next token\"}},\"version\":1},\"userdoc\":{\"events\":{\"FounderAdded(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emit when new token minted and token price updated.\"},\"Issued(address,address,uint256,uint8)\":{\"notice\":\"Emitted when a soulbound token is issued.\"},\"OwnerAdded(address,uint256)\":{\"notice\":\"Emitted when a new owner is added\"},\"RewardClaimed(uint256,address)\":{\"notice\":\"Emitted reward is claimed by a token owner\"},\"RewardDeposited(address,uint256)\":{\"notice\":\"Emitted when new rewards are deposited\"}},\"kind\":\"user\",\"methods\":{\"burnAuth(uint256)\":{\"notice\":\"provides burn authorization of the token id.\"},\"depositReward(uint256)\":{\"notice\":\"only role with BALANCE_UPDATER_ROLE can call this function\"},\"rewardIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the opening of the token\"},\"rewardOwnerIndex(address)\":{\"notice\":\"The owners' reward indexes for eachas of the last time they accrued\"},\"setVault(address)\":{\"notice\":\"that is mandatory to be set before reward can be claimed\"},\"version()\":{\"notice\":\"Returns the current version of this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/tokens/VaultFounderToken.sol\":\"VaultFounderToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":contracts/=src/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":forge-std/=lib/forge-std/src/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xfeefb24d068524440e1ba885efdf105d91f83504af3c2d745ffacc4595396831\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x121966b3220d263a6669dcf59c1254bd48ed237adf4d8a595add70a7927eada1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x47d6e06872b12e72c79d1b5eb55842f860b5fb1207b2317c2358d2766b950a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC4906Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"./IERC721Upgradeable.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906Upgradeable is IERC165Upgradeable, IERC721Upgradeable {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x869de080935f0a9f8ae29134bc7bd33176d2912ab13f080ff678a5a26ea542b7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721Upgradeable.sol\\\";\\n\",\"keccak256\":\"0x9256117dac3a66dbce2e7245c6ceb7361f8ae7425e3d896ac26ecece3e3d12e3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x584ebdf9c1118a7c773f98788e3f3ede01982bdf8932aa06f5acc7d54876e161\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb607cb94c27e89750f5ae2ccebcb94e654e926f6125f4fd4c6262c89875118ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x4dae161227d332808312ee2caf6384929321b83c16cc89b5642985fbec6b814c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x09fa60c34ff9b067e5ad3af7719d490a12e0ca39132df6f870746eb0d32308ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x2c98457c4171d86094adf9a4fd8cd2402b7e3e309e961f07910a60a576dd100f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"../../../interfaces/IERC4906Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorageUpgradeable is Initializable, IERC4906Upgradeable, ERC721Upgradeable {\\n    function __ERC721URIStorage_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721URIStorage_init_unchained() internal onlyInitializing {\\n    }\\n    using StringsUpgradeable for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x486985bf5203d0ee4568f8f89ae35b8accf6a95ecee280435102eedb807c2764\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf1870306db8391db9cf14b41be0da76857a88df0e5c623d2b2338fb30a3bd5ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC777/ERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC777Upgradeable.sol\\\";\\nimport \\\"./IERC777RecipientUpgradeable.sol\\\";\\nimport \\\"./IERC777SenderUpgradeable.sol\\\";\\nimport \\\"../ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/IERC1820RegistryUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC777} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * Support for ERC20 is included in this contract, as specified by the EIP: both\\n * the ERC777 and ERC20 interfaces can be safely used when interacting with it.\\n * Both {IERC777-Sent} and {IERC20-Transfer} events are emitted on token\\n * movements.\\n *\\n * Additionally, the {IERC777-granularity} value is hard-coded to `1`, meaning that there\\n * are no special restrictions in the amount of tokens that created, moved, or\\n * destroyed. This makes integration with ERC20 applications seamless.\\n *\\n * CAUTION: This file is deprecated as of v4.9 and will be removed in the next major release.\\n */\\ncontract ERC777Upgradeable is Initializable, ContextUpgradeable, IERC777Upgradeable, IERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    IERC1820RegistryUpgradeable internal constant _ERC1820_REGISTRY = IERC1820RegistryUpgradeable(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\\n\\n    mapping(address => uint256) private _balances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\\\"ERC777TokensSender\\\");\\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\\\"ERC777TokensRecipient\\\");\\n\\n    // This isn't ever read from - it's only used to respond to the defaultOperators query.\\n    address[] private _defaultOperatorsArray;\\n\\n    // Immutable, but accounts may revoke them (tracked in __revokedDefaultOperators).\\n    mapping(address => bool) private _defaultOperators;\\n\\n    // For each account, a mapping of its operators and revoked default operators.\\n    mapping(address => mapping(address => bool)) private _operators;\\n    mapping(address => mapping(address => bool)) private _revokedDefaultOperators;\\n\\n    // ERC20-allowances\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    /**\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    function __ERC777_init(string memory name_, string memory symbol_, address[] memory defaultOperators_) internal onlyInitializing {\\n        __ERC777_init_unchained(name_, symbol_, defaultOperators_);\\n    }\\n\\n    function __ERC777_init_unchained(string memory name_, string memory symbol_, address[] memory defaultOperators_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        _defaultOperatorsArray = defaultOperators_;\\n        for (uint256 i = 0; i < defaultOperators_.length; i++) {\\n            _defaultOperators[defaultOperators_[i]] = true;\\n        }\\n\\n        // register interfaces\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC777Token\\\"), address(this));\\n        _ERC1820_REGISTRY.setInterfaceImplementer(address(this), keccak256(\\\"ERC20Token\\\"), address(this));\\n    }\\n\\n    /**\\n     * @dev See {IERC777-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-decimals}.\\n     *\\n     * Always returns 18, as per the\\n     * [ERC777 EIP](https://eips.ethereum.org/EIPS/eip-777#backward-compatibility).\\n     */\\n    function decimals() public pure virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-granularity}.\\n     *\\n     * This implementation always returns `1`.\\n     */\\n    function granularity() public view virtual override returns (uint256) {\\n        return 1;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`tokenHolder`).\\n     */\\n    function balanceOf(address tokenHolder) public view virtual override(IERC20Upgradeable, IERC777Upgradeable) returns (uint256) {\\n        return _balances[tokenHolder];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-send}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function send(address recipient, uint256 amount, bytes memory data) public virtual override {\\n        _send(_msgSender(), recipient, amount, data, \\\"\\\", true);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Unlike `send`, `recipient` is _not_ required to implement the {IERC777Recipient}\\n     * interface if it is a contract.\\n     *\\n     * Also emits a {Sent} event.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _send(_msgSender(), recipient, amount, \\\"\\\", \\\"\\\", false);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-burn}.\\n     *\\n     * Also emits a {IERC20-Transfer} event for ERC20 compatibility.\\n     */\\n    function burn(uint256 amount, bytes memory data) public virtual override {\\n        _burn(_msgSender(), amount, data, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC777-isOperatorFor}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) public view virtual override returns (bool) {\\n        return\\n            operator == tokenHolder ||\\n            (_defaultOperators[operator] && !_revokedDefaultOperators[tokenHolder][operator]) ||\\n            _operators[tokenHolder][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC777-authorizeOperator}.\\n     */\\n    function authorizeOperator(address operator) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC777: authorizing self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            delete _revokedDefaultOperators[_msgSender()][operator];\\n        } else {\\n            _operators[_msgSender()][operator] = true;\\n        }\\n\\n        emit AuthorizedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-revokeOperator}.\\n     */\\n    function revokeOperator(address operator) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC777: revoking self as operator\\\");\\n\\n        if (_defaultOperators[operator]) {\\n            _revokedDefaultOperators[_msgSender()][operator] = true;\\n        } else {\\n            delete _operators[_msgSender()][operator];\\n        }\\n\\n        emit RevokedOperator(operator, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC777-defaultOperators}.\\n     */\\n    function defaultOperators() public view virtual override returns (address[] memory) {\\n        return _defaultOperatorsArray;\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorSend}.\\n     *\\n     * Emits {Sent} and {IERC20-Transfer} events.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), sender), \\\"ERC777: caller is not an operator for holder\\\");\\n        _send(sender, recipient, amount, data, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev See {IERC777-operatorBurn}.\\n     *\\n     * Emits {Burned} and {IERC20-Transfer} events.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes memory data,\\n        bytes memory operatorData\\n    ) public virtual override {\\n        require(isOperatorFor(_msgSender(), account), \\\"ERC777: caller is not an operator for holder\\\");\\n        _burn(account, amount, data, operatorData);\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators may\\n     * not have allowance, and accounts with allowance may not be operators\\n     * themselves.\\n     */\\n    function allowance(address holder, address spender) public view virtual override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function approve(address spender, uint256 value) public virtual override returns (bool) {\\n        address holder = _msgSender();\\n        _approve(holder, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Note that operator and allowance concepts are orthogonal: operators cannot\\n     * call `transferFrom` (unless they have allowance), and accounts with\\n     * allowance cannot call `operatorSend` (unless they are operators).\\n     *\\n     * Emits {Sent}, {IERC20-Transfer} and {IERC20-Approval} events.\\n     */\\n    function transferFrom(address holder, address recipient, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(holder, spender, amount);\\n        _send(holder, recipient, amount, \\\"\\\", \\\"\\\", false);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with the caller address as the `operator` and with\\n     * `userData` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(address account, uint256 amount, bytes memory userData, bytes memory operatorData) internal virtual {\\n        _mint(account, amount, userData, operatorData, true);\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * If `requireReceptionAck` is set to true, and if a send hook is\\n     * registered for `account`, the corresponding function will be called with\\n     * `operator`, `data` and `operatorData`.\\n     *\\n     * See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits {Minted} and {IERC20-Transfer} events.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - if `account` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC777: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, amount);\\n\\n        // Update state variables\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n\\n        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);\\n\\n        emit Minted(operator, account, amount, userData, operatorData);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Send tokens\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _send(\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC777: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC777: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, to, amount, userData, operatorData);\\n\\n        _move(operator, from, to, amount, userData, operatorData);\\n\\n        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);\\n    }\\n\\n    /**\\n     * @dev Burn tokens\\n     * @param from address token holder address\\n     * @param amount uint256 amount of tokens to burn\\n     * @param data bytes extra information provided by the token holder\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _burn(address from, uint256 amount, bytes memory data, bytes memory operatorData) internal virtual {\\n        require(from != address(0), \\\"ERC777: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _callTokensToSend(operator, from, address(0), amount, data, operatorData);\\n\\n        _beforeTokenTransfer(operator, from, address(0), amount);\\n\\n        // Update state variables\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Burned(operator, from, amount, data, operatorData);\\n        emit Transfer(from, address(0), amount);\\n    }\\n\\n    function _move(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        _beforeTokenTransfer(operator, from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC777: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Sent(operator, from, to, amount, userData, operatorData);\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_approve}.\\n     *\\n     * Note that accounts cannot have allowance issued by their operators.\\n     */\\n    function _approve(address holder, address spender, uint256 value) internal virtual {\\n        require(holder != address(0), \\\"ERC777: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC777: approve to the zero address\\\");\\n\\n        _allowances[holder][spender] = value;\\n        emit Approval(holder, spender, value);\\n    }\\n\\n    /**\\n     * @dev Call from.tokensToSend() if the interface is registered\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     */\\n    function _callTokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(from, _TOKENS_SENDER_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777SenderUpgradeable(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);\\n        }\\n    }\\n\\n    /**\\n     * @dev Call to.tokensReceived() if the interface is registered. Reverts if the recipient is a contract but\\n     * tokensReceived() was not registered for the recipient\\n     * @param operator address operator requesting the transfer\\n     * @param from address token holder address\\n     * @param to address recipient address\\n     * @param amount uint256 amount of tokens to transfer\\n     * @param userData bytes extra information provided by the token holder (if any)\\n     * @param operatorData bytes extra information provided by the operator (if any)\\n     * @param requireReceptionAck if true, contract recipients are required to implement ERC777TokensRecipient\\n     */\\n    function _callTokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes memory userData,\\n        bytes memory operatorData,\\n        bool requireReceptionAck\\n    ) private {\\n        address implementer = _ERC1820_REGISTRY.getInterfaceImplementer(to, _TOKENS_RECIPIENT_INTERFACE_HASH);\\n        if (implementer != address(0)) {\\n            IERC777RecipientUpgradeable(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);\\n        } else if (requireReceptionAck) {\\n            require(!to.isContract(), \\\"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {IERC20-Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC777: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes\\n     * calls to {send}, {transfer}, {operatorSend}, {transferFrom}, minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address operator, address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[41] private __gap;\\n}\\n\",\"keccak256\":\"0x828f2bcdf4a940221fffc84f904d1ae56f25cf90039b73572e3ec71c995abee2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777RecipientUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777RecipientUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1fbcfef49c67aea4ca9417b337a363e933127047e73194011b78c1741602615b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777SenderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Sender.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensSender standard as defined in the EIP.\\n *\\n * {IERC777} Token holders can be notified of operations performed on their\\n * tokens by having a contract implement this interface (contract holders can be\\n * their own implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777SenderUpgradeable {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever a registered holder's\\n     * (`from`) tokens are about to be moved or destroyed. The type of operation\\n     * is conveyed by `to` being the zero address or not.\\n     *\\n     * This call occurs _before_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the pre-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensToSend(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x79fc5ced00b0715d84b75e016754292e434cf2cbbc58c1f275ef0754653a6d78\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC777/IERC777Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777Upgradeable {\\n    /**\\n     * @dev Emitted when `amount` tokens are created by `operator` and assigned to `to`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` destroys `amount` tokens from `account`.\\n     *\\n     * Note that some additional user `data` and `operatorData` can be logged in the event.\\n     */\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    /**\\n     * @dev Emitted when `operator` is made operator for `tokenHolder`.\\n     */\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Emitted when `operator` is revoked its operator status for `tokenHolder`.\\n     */\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(address account, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n}\\n\",\"keccak256\":\"0xfcc6168646fb2829c61565249e12d02ea4bd2831faebe1ca096412ceca37bd02\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x07ac95acad040f1fb1f6120dd0aa5f702db69446e95f82613721879d30de0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\nimport \\\"./math/SignedMathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMathUpgradeable.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb96dc79b65b7c37937919dcdb356a969ce0aa2e8338322bf4dc027a3c9c9a7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC1820RegistryUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/IERC1820Registry.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the global ERC1820 Registry, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\\n * implementers for interfaces in this registry, as well as query support.\\n *\\n * Implementers may be shared by multiple accounts, and can also implement more\\n * than a single interface for each account. Contracts can implement interfaces\\n * for themselves, but externally-owned accounts (EOA) must delegate this to a\\n * contract.\\n *\\n * {IERC165} interfaces can also be queried via the registry.\\n *\\n * For an in-depth explanation and source code analysis, see the EIP text.\\n */\\ninterface IERC1820RegistryUpgradeable {\\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\\n\\n    event ManagerChanged(address indexed account, address indexed newManager);\\n\\n    /**\\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\\n     * account is able to set interface implementers for it.\\n     *\\n     * By default, each account is its own manager. Passing a value of `0x0` in\\n     * `newManager` will reset the manager to this initial state.\\n     *\\n     * Emits a {ManagerChanged} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     */\\n    function setManager(address account, address newManager) external;\\n\\n    /**\\n     * @dev Returns the manager for `account`.\\n     *\\n     * See {setManager}.\\n     */\\n    function getManager(address account) external view returns (address);\\n\\n    /**\\n     * @dev Sets the `implementer` contract as ``account``'s implementer for\\n     * `interfaceHash`.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     * The zero address can also be used in `implementer` to remove an old one.\\n     *\\n     * See {interfaceHash} to learn how these are created.\\n     *\\n     * Emits an {InterfaceImplementerSet} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the current manager for `account`.\\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\\n     * end in 28 zeroes).\\n     * - `implementer` must implement {IERC1820Implementer} and return true when\\n     * queried for support, unless `implementer` is the caller. See\\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\\n     */\\n    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\\n\\n    /**\\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\\n     * implementer is registered, returns the zero address.\\n     *\\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\\n     * zeroes), `account` will be queried for support of it.\\n     *\\n     * `account` being the zero address is an alias for the caller's address.\\n     */\\n    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\\n\\n    /**\\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\\n     * corresponding\\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\\n     */\\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Updates the cache with whether the contract implements an ERC165 interface or not.\\n     * @param account Address of the contract for which to update the cache.\\n     * @param interfaceId ERC165 interface for which to update the cache.\\n     */\\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not.\\n     * If the result is not cached a direct lookup on the contract address is performed.\\n     * If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\\n     * {updateERC165Cache} with the contract address.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\\n\\n    /**\\n     * @notice Checks whether a contract implements an ERC165 interface or not without using or updating the cache.\\n     * @param account Address of the contract to check.\\n     * @param interfaceId ERC165 interface to check.\\n     * @return True if `account` implements `interfaceId`, false otherwise.\\n     */\\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x02761f489482c11d04fda6e9e21592e819d4c349c20d133162445b46854b4660\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88f6b7bba3ee33eeb741f9a0f5bc98b6e6e352d0fe4905377bb328590f84095a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"lib/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\\n        return expWad((lnWad(x) * y) / int256(WAD)); // Using ln(x) means x must be greater than 0.\\n    }\\n\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return 0;\\n\\n            // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n            // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n            if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5**18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n        }\\n    }\\n\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            require(x > 0, \\\"UNDEFINED\\\");\\n\\n            // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n            // We do this by multiplying by 2**96 / 10**18. But since\\n            // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n            // and add ln(2**96 / 10**18) at the end.\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            int256 k = int256(log2(uint256(x))) - 96;\\n            x <<= uint256(159 - k);\\n            x = int256(uint256(x) >> 159);\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // p is made monic, we will multiply by a scale factor later.\\n            int256 p = x + 3273285459638523848632254066296;\\n            p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n            p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n            p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n            p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n            p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n            p = p * x - (795164235651350426258249787498 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            // q is monic by convention.\\n            int256 q = x + 5573035233440673466300451813936;\\n            q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n            q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n            q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n            q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n            q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n            q = ((q * x) >> 96) + 909429971244387300277376558375;\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial is known not to have zeros in the domain.\\n                // No scaling required because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r is in the range (0, 0.125) * 2**96\\n\\n            // Finalization, we need to:\\n            // * multiply by the scale factor s = 5.549\\u2026\\n            // * add ln(2**96 / 10**18)\\n            // * add k * ln(2)\\n            // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n            // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n            r *= 1677202110996718588342820967067443963516166;\\n            // add ln(2) * k * 5e18 * 2**192\\n            r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n            // add ln(2**96 / 10**18) * 5e18 * 2**192\\n            r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n            // base conversion: mul 2**18 / 2**192\\n            r >>= 174;\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        require(x > 0, \\\"UNDEFINED\\\");\\n\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\\n            r := or(r, lt(0x1, shr(r, x)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x622fcd8a49e132df5ec7651cc6ae3aaf0cf59bdcd67a9a804a1b9e2485113b7d\",\"license\":\"MIT\"},\"src/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IStrategiesLender} from \\\"./lending/IStrategiesLender.sol\\\";\\nimport {IERC4626} from \\\"./tokens/IERC4626.sol\\\";\\n\\ninterface IVault is IStrategiesLender, IERC4626 { // solhint-disable-line no-empty-blocks\\n\\n}\\n\",\"keccak256\":\"0xff813ad44bf332ed444da13c7df42b2e3e325056c16665f4a9edd1c361e7912f\",\"license\":\"AGPL-3.0\"},\"src/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {MathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\nimport {IVault} from \\\"./IVault.sol\\\";\\nimport {ILender} from \\\"./lending/ILender.sol\\\";\\nimport {Lender, BorrowerDoesNotExist} from \\\"./lending/Lender.sol\\\";\\nimport {StrategiesLender} from \\\"./lending/StrategiesLender.sol\\\";\\nimport {SafeERC4626Upgradeable, ERC4626Upgradeable} from \\\"./tokens/SafeERC4626Upgradeable.sol\\\";\\nimport {IERC4626} from \\\"./tokens/IERC4626.sol\\\";\\nimport {IStrategy} from \\\"./strategies/IStrategy.sol\\\";\\nimport {AddressList} from \\\"./structures/AddressList.sol\\\";\\nimport {SafeInitializable} from \\\"./upgradeable/SafeInitializable.sol\\\";\\nimport {SafeUUPSUpgradeable} from \\\"./upgradeable/SafeUUPSUpgradeable.sol\\\";\\nimport {IVersionable} from \\\"./upgradeable/IVersionable.sol\\\";\\nimport {ERC4626Lifecycle} from \\\"./tokens/ERC4626Lifecycle.sol\\\";\\nimport {IVaultHook} from \\\"./tokens/IVaultHook.sol\\\";\\nimport {VaultFounderToken} from \\\"./tokens/VaultFounderToken.sol\\\";\\nimport {RewardHolder} from \\\"./tokens/RewardHolder.sol\\\";\\n\\n\\nerror ExceededMaximumFeeValue();\\n\\nerror InsufficientVaultBalance(uint256 assets, uint256 shares);\\nerror InvalidLockedProfitReleaseRate(uint256 durationInSeconds);\\nerror InappropriateStrategy();\\nerror FoundersNotSet();\\n\\ncontract Vault is IVault, SafeUUPSUpgradeable, SafeERC4626Upgradeable, StrategiesLender, ERC4626Lifecycle {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    /// @notice Represents the maximum value of the locked-in profit ratio scale (where 1e18 is 100%).\\n    uint256 public constant LOCKED_PROFIT_RELEASE_SCALE = 10**18;\\n\\n    /// @notice Rewards contract where management fees are sent to.\\n    address public rewards;\\n\\n    /// @notice Vault management fee (in BPS).\\n    uint256 public managementFee;\\n\\n    /// @notice The amount of funds that cannot be withdrawn by users.\\n    ///         Decreases with time at the rate of \\\"lockedProfitReleaseRate\\\".\\n    uint256 public lockedProfitBaseline;\\n\\n    /// @notice The rate of \\\"lockedProfitBaseline\\\" decline on the locked-in profit scale (scaled to 1e18).\\n    ///         Represents the amount of funds that will be unlocked when one second passes.\\n    uint256 public lockedProfitReleaseRate;\\n\\n    /// @notice Vault Founders Token contract where rewards for founders are sent to.\\n    address public founders;\\n\\n    /// @notice Vault founders reward (in BPS).\\n    uint256 public foundersFee;\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    ///      variables without shifting down storage in the inheritance chain.\\n    ///      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[48] private __gap;\\n\\n    /// @notice Event that should happen when the locked-in profit release rate changed.\\n    event LockedProfitReleaseRateChanged(uint256 rate);\\n\\n    /// @inheritdoc IVersionable\\n    function version() external pure override returns (string memory) {\\n        return \\\"0.2.2\\\";\\n    }\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(bool needDisableInitializers) SafeInitializable(needDisableInitializers) {} // solhint-disable-line no-empty-blocks\\n\\n    function initialize(\\n        address _asset,\\n        address _rewards,\\n        uint256 _managementFee,\\n        uint256 _lockedProfitReleaseRate,\\n        string memory _name,\\n        string memory _symbol,\\n        address[] memory _defaultOperators,\\n        uint256 _foundersFee\\n    ) public initializer {\\n        __SafeUUPSUpgradeable_init(); // Ownable under the hood\\n        __StrategiesLender_init_lenderSpecific(); // require Ownable\\n        __SafeERC4626_init(\\n            IERC20Upgradeable(_asset),\\n            bytes(_name).length == 0\\n                ? string.concat(\\n                    IERC20Metadata(_asset).symbol(),\\n                    \\\" Eonian Vault Shares\\\"\\n                )\\n                : _name,\\n            bytes(_symbol).length == 0\\n                ? string.concat(\\\"eon\\\", IERC20Metadata(_asset).symbol())\\n                : _symbol,\\n            _defaultOperators\\n        );\\n\\n        setRewards(_rewards);\\n        setManagementFee(_managementFee);\\n        setLockedProfitReleaseRate(_lockedProfitReleaseRate);\\n        setFoundersFee(_foundersFee);\\n    }\\n\\n    /// @dev Override to add the \\\"whenNotPaused\\\" modifier\\n    /// @inheritdoc SafeERC4626Upgradeable\\n    function deposit(uint256 assets)\\n        public\\n        override\\n        whenNotPaused\\n        returns (uint256 shares)\\n    {\\n        return super.deposit(assets);\\n    }\\n\\n    /// @notice Hook that is used before withdrawals to release assets from strategies if necessary.\\n    /// @inheritdoc ERC4626Upgradeable\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal override(ERC4626Upgradeable, ERC4626Lifecycle) {\\n        // There is no need to withdraw assets from strategies, the vault has sufficient funds\\n        if (_freeAssets() >= assets) {\\n            return;\\n        }\\n\\n        for (uint256 i = 0; i < withdrawalQueue.length; i++) {\\n            // If the vault already has the required amount of funds, we need to finish the withdrawal\\n            uint256 vaultBalance = _freeAssets();\\n            if (assets <= vaultBalance) {\\n                break;\\n            }\\n\\n            address strategy = withdrawalQueue[i];\\n\\n            // We can only withdraw the amount that the strategy has as debt,\\n            // so that the strategy can work on the unreported (yet) funds it has earned\\n            uint256 requiredAmount = MathUpgradeable.min(\\n                assets - vaultBalance,\\n                borrowersData[strategy].debt\\n            );\\n\\n            // Skip this strategy is there is nothing to withdraw\\n            if (requiredAmount == 0) {\\n                continue;\\n            }\\n\\n            // Withdraw the required amount of funds from the strategy\\n            uint256 loss = IStrategy(strategy).withdraw(requiredAmount);\\n\\n            // If the strategy failed to return all of the requested funds, we need to reduce the strategy's debt ratio\\n            if (loss > 0) {\\n                _decreaseBorrowerCredibility(strategy, loss);\\n            }\\n        }\\n\\n        // Revert if insufficient assets remain in the vault after withdrawal from all strategies\\n        if (_freeAssets() < assets) {\\n            revert InsufficientVaultBalance(assets, shares);\\n        }\\n\\n        // apply the hook\\n        ERC4626Lifecycle.beforeWithdraw(assets, shares);\\n    }\\n\\n    /// Check that all new strategies refer to this vault and has the same underlying asset\\n    function _beforeStrategyRegistered(IStrategy strategy) internal view override {\\n        if (this != strategy.lender() || asset != strategy.asset()) {\\n            revert InappropriateStrategy();\\n        }\\n    }\\n\\n    /// @notice Sets the vault rewards address.\\n    /// @param _rewards a new rewards address.\\n    function setRewards(address _rewards) public onlyOwner {\\n        rewards = _rewards;\\n    }\\n\\n    /// @notice Sets the vault management fee. Both management and foundersReward fee can't exceed 100%\\n    /// @param _managementFee a new management fee value (in BPS).\\n    function setManagementFee(uint256 _managementFee) public onlyOwner {\\n        if (_managementFee + foundersFee > MAX_BPS) {\\n            revert ExceededMaximumFeeValue();\\n        }\\n\\n        managementFee = _managementFee;\\n    }\\n\\n    /// @notice Sets the vault founder token contract;\\n    /// @param _founders a new founder token contract address.\\n    function setFounders(address _founders) external onlyOwner {\\n        founders = _founders;\\n        addDepositHook(IVaultHook(founders));\\n    }\\n\\n    /// @notice Sets the vault founder token reward rate. Both management and foundersReward fee can't exceed 100%\\n    /// @param _foundersFee a new founder token reward fee (in BPS).\\n    function setFoundersFee(uint256 _foundersFee) public onlyOwner {\\n        if (_foundersFee + managementFee > MAX_BPS) {\\n            revert ExceededMaximumFeeValue();\\n        }\\n        foundersFee = _foundersFee;\\n    }\\n\\n    /// @notice Changes the rate of release of locked-in profit.\\n    /// @param rate the rate of release of locked profit (percent per second scaled to 1e18).\\n    ///             The desire value of this parameter can be calculated as 1e18 / DurationInSeconds.\\n    function setLockedProfitReleaseRate(uint256 rate) public onlyOwner {\\n        if (rate > LOCKED_PROFIT_RELEASE_SCALE) {\\n            revert InvalidLockedProfitReleaseRate(rate);\\n        }\\n\\n        lockedProfitReleaseRate = rate;\\n        emit LockedProfitReleaseRateChanged(rate);\\n    }\\n\\n    /// @notice Calculates the locked profit, takes into account the change since the last report.\\n    function _lockedProfit() internal view returns (uint256) {\\n        // Release rate should be small, since the timestamp can be manipulated by the node operator,\\n        // not expected to have much impact, since the changes will be applied to all users and cannot be abused directly.\\n        uint256 ratio = (block.timestamp - lastReportTimestamp) * lockedProfitReleaseRate; // solhint-disable-line not-rely-on-time\\n\\n        // In case the ratio >= scale, the calculation anyway leads to zero.\\n        if (ratio >= LOCKED_PROFIT_RELEASE_SCALE) {\\n            return 0;\\n        }\\n\\n        uint256 lockedProfitChange = (ratio * lockedProfitBaseline) / LOCKED_PROFIT_RELEASE_SCALE;\\n\\n        // Reducing locked profits over time frees up profits for users\\n        return lockedProfitBaseline - lockedProfitChange;\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _chargeFees(uint256 extraFreeFunds)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        uint256 fee = (extraFreeFunds * managementFee) / MAX_BPS;\\n        if (fee > 0) {\\n            _mint(rewards, convertToShares(fee), \\\"\\\", \\\"\\\", false);\\n        }\\n        if(founders == address(0)) {\\n            return fee;\\n        }\\n        uint256 vaultFoundersReward = (extraFreeFunds * foundersFee) / MAX_BPS;\\n        if (vaultFoundersReward > 0) {\\n            // if rewards are set, we mint the tokens to the vault and update index for Claim rewards contract\\n            uint256 shares = convertToShares(vaultFoundersReward);\\n            _mint(founders, shares, \\\"\\\", \\\"\\\", false);\\n            RewardHolder(founders).depositReward(shares);\\n        }\\n        return fee + vaultFoundersReward;\\n    }\\n\\n    /// @notice Updates the locked-in profit value according to the positive debt management report of the strategy\\n    /// @inheritdoc Lender\\n    function _afterPositiveDebtManagementReport(\\n        uint256 extraFreeFunds,\\n        uint256 chargedFees\\n    ) internal override {\\n        // Locking every reported strategy profit, taking into account the charged fees.\\n        lockedProfitBaseline = _lockedProfit() + extraFreeFunds - chargedFees;\\n    }\\n\\n    /// @notice Updates the locked-in profit value according to the negative debt management report of the strategy\\n    /// @inheritdoc Lender\\n    function _afterNegativeDebtManagementReport(uint256 loss)\\n        internal\\n        override\\n    {\\n        uint256 currentLockedProfit = _lockedProfit();\\n\\n        // If a loss occurs, it is necessary to release the appropriate amount of funds that users were able to withdraw it.\\n        lockedProfitBaseline = currentLockedProfit > loss\\n            ? currentLockedProfit - loss\\n            : 0;\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _freeAssets() internal view override returns (uint256) {\\n        return asset.balanceOf(address(this));\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _borrowerFreeAssets(address borrower)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return asset.balanceOf(borrower);\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function totalAssets() public view override(ERC4626Upgradeable, IERC4626) returns (uint256) {\\n        return super.fundAssets() - _lockedProfit();\\n    }\\n\\n    /// @inheritdoc ILender\\n    /// @dev Explicitly overridden here to keep this function exposed via \\\"ILender\\\" interface.\\n    function paused()\\n        public\\n        view\\n        override(ILender, StrategiesLender)\\n        returns (bool)\\n    {\\n        return super.paused();\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _transferFundsToBorrower(address borrower, uint256 amount)\\n        internal\\n        override\\n    {\\n        asset.safeTransfer(borrower, amount);\\n    }\\n\\n    /// @inheritdoc Lender\\n    function _takeFundsFromBorrower(address borrower, uint256 amount)\\n        internal\\n        override\\n    {\\n        asset.safeTransferFrom(borrower, address(this), amount);\\n    }\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal override(ERC4626Upgradeable, ERC4626Lifecycle) {\\n        ERC4626Lifecycle.afterDeposit(assets, shares);\\n    }\\n\\n    /// @notice Removes the registered hook from the lifecycle.\\n    /// @param hook the hook address to remove.\\n    function unregisterLifecycleHook(IVaultHook hook) external onlyOwner returns (bool) {\\n        return removeDepositHook(hook) || removeWithdrawHook(hook);\\n    }\\n}\\n\",\"keccak256\":\"0xf597d05a0c2e5e1af06a7c69b4ae32babce6517ee16dd6a01a0511ad8e99b7b2\",\"license\":\"AGPL-3.0\"},\"src/lending/ILender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/// Base contract for lending protocols, can be used for colletaralized and not colletaralized lending.\\ninterface ILender {\\n\\n    /// @notice Returns the number of tokens the borrower (caller of this function) can take from the lender\\n    /// @return Available credit as amount of tokens\\n    function availableCredit() external view returns (uint256);\\n\\n    /// @notice Returns the outstanding debt that the borrower (caller of this function) must repay\\n    /// @return Outstanding debt as amount of tokens\\n    function outstandingDebt() external view returns (uint256);\\n\\n    /// @notice Returns the amount of funds taken by the borrower (caller of this function).\\n    /// @return Debt as amount of tokens\\n    function currentDebt() external view returns (uint256);\\n\\n    /// @notice Returns the debt ratio of the borrower (caller of this function).\\n    function currentDebtRatio() external view returns (uint256);\\n\\n    /// @notice Returns the last report timestamp of the borrower (caller of this function).\\n    function lastReport() external view returns (uint256);\\n\\n    /// @notice Returns the activation status of the borrower (caller of this function).\\n    /// @return \\\"true\\\" if the borrower is active\\n    function isActivated() external view returns (bool);\\n\\n    /// @notice Indicates if the vault was shutted down or not.\\n    /// @return \\\"true\\\" if the contract is paused, and \\\"false\\\" otherwise.\\n    function paused() external view returns (bool);\\n\\n    /// @notice Reports a positive result of the borrower's debt management.\\n    ///         Borrower must call this function if he has made any profit\\n    ///         or/and has a free funds available to repay the outstanding debt (if any).\\n    /// @param extraFreeFunds an extra amount of free funds borrower's contract has.\\n    ///                       This reporting amount must be greater than the borrower's outstanding debt.\\n    /// @param debtPayment is the funds that the borrower must release in order to pay off his outstanding debt (if any).\\n    function reportPositiveDebtManagement(\\n        uint256 extraFreeFunds,\\n        uint256 debtPayment\\n    ) external;\\n\\n    /// @notice Reports a negative result of the borrower's debt management.\\n    ///         The borrower must call this function if he is unable to cover his outstanding debt or if he has incurred any losses.\\n    /// @param loss a number of tokens by which the borrower's balance has decreased since the last report.\\n    ///        May include a portion of the outstanding debt that the borrower was unable to repay.\\n    /// @param debtPayment is the funds that the borrower must release in order to pay off his outstanding debt (if any).\\n    function reportNegativeDebtManagement(uint256 loss, uint256 debtPayment)\\n        external;\\n}\\n\",\"keccak256\":\"0x5d79dc98497b5172dab5fb9184b1eb6531f4949e3435d273c1327fe4e14fb752\",\"license\":\"AGPL-3.0\"},\"src/lending/IStrategiesLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {ILender} from \\\"./ILender.sol\\\";\\n\\n/// Lender contract which targeted to lend specifically for investments strategies.\\n/// Basically represent specific case of implementation of whitelist not colletaraized lending contract.\\ninterface IStrategiesLender is ILender {\\n\\n    /// @notice Arranged list of addresses of strategies, which defines the order for withdrawal.\\n    function withdrawalQueue(uint256 index) external view returns (address);\\n\\n    /// @notice Revokes a strategy from the vault.\\n    ///         Sets strategy's dept ratio to zero, so that the strategy cannot take funds from the vault.\\n    /// @param strategy a strategy to revoke.\\n    function revokeStrategy(address strategy) external;\\n\\n    /// @notice Returns average interst rate of lender per block. \\n    ///         Based on last report utilization rate and possibly cached interest rate of each strategy.\\n    ///         Can be outadated, but close enough to real state for on chain calculations.\\n    ///         Calculate average by combining utilisation rate of each strategy with its interest rate.\\n    ///         Returns additional total utilisation rate of lender, as additional product of calculation, usefull to safe gas.\\n    /// @return interstRate - The interest rate per block, scaled by 1e18\\n    /// @return utilisationRate - The utilisation rate of the lender, in BPS (scaled by 1e4)\\n    function interestRatePerBlock() external view returns (uint256 interstRate, uint256 utilisationRate);\\n}\\n\",\"keccak256\":\"0xa70a854391820bf8c7314c9fffefd3e07cca320acd72bf4a539ea5fcd6637139\",\"license\":\"AGPL-3.0\"},\"src/lending/Lender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {MathUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {ILender} from \\\"./ILender.sol\\\";\\nimport {SafeInitializable} from \\\"../upgradeable/SafeInitializable.sol\\\";\\n\\nerror BorrowerAlreadyExists();\\nerror BorrowerDoesNotExist();\\nerror BorrowerHasDebt();\\nerror CallerIsNotABorrower();\\nerror LenderRatioExceeded(uint256 freeRatio);\\nerror FalsePositiveReport();\\n\\nabstract contract Lender is\\n    ILender,\\n    SafeInitializable,\\n    PausableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    struct BorrowerData {\\n        /// Timestamp of the block in which the borrower was activated\\n        uint256 activationTimestamp;\\n        /// Last time a borrower made a report\\n        uint256 lastReportTimestamp;\\n        /// Amount of tokens taken by the borrower\\n        uint256 debt;\\n        /// Maximum portion of the loan that the borrower can take (in BPS)\\n        /// Represents credibility of the borrower\\n        uint256 debtRatio;\\n    }\\n\\n    uint256 public constant MAX_BPS = 10_000;\\n\\n    /// @notice Amount of tokens that all borrowers have taken\\n    uint256 public totalDebt;\\n\\n    /// @notice Debt ratio for the Lender across all borrowers (in BPS, <= 10k)\\n    uint256 public debtRatio;\\n\\n    /// @notice Last time a report occurred by any borrower\\n    uint256 public lastReportTimestamp;\\n\\n    /// @notice Records with information on each borrower using the lender's services\\n    mapping(address => BorrowerData) public borrowersData;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /// @notice Event that must occur when the borrower reported the results of his debt management\\n    /// @param borrower Borrower's contract address\\n    /// @param debtPayment Amount of outstanding debt repaid by the borrower\\n    /// @param freeFunds Free funds on the borrower's contract that remain after the debt is paid\\n    /// @param fundsGiven Funds issued to the borrower by this lender\\n    /// @param fundsTaken Funds that have been taken from the borrower by the lender\\n    /// @param loss Amount of funds that the borrower realised as loss\\n    event BorrowerDebtManagementReported(\\n        address indexed borrower,\\n        uint256 debtPayment,\\n        uint256 freeFunds,\\n        uint256 fundsGiven,\\n        uint256 fundsTaken,\\n        uint256 loss\\n    );\\n\\n    modifier onlyBorrowers() {\\n        if (borrowersData[msg.sender].activationTimestamp == 0) {\\n            revert CallerIsNotABorrower();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Updates the last report timestamp for the specified borrower and this lender.\\n    modifier updateLastReportTime() {\\n        _;\\n        borrowersData[msg.sender].lastReportTimestamp = lastReportTimestamp = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    function __Lender_init() internal onlyInitializing {\\n        __Pausable_init();\\n        __ReentrancyGuard_init();\\n\\n        __Lender_init_unchained();\\n    }\\n\\n    function __Lender_init_unchained() internal onlyInitializing {\\n        lastReportTimestamp = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /// @inheritdoc ILender\\n    function availableCredit() external view override returns (uint256) {\\n        return _availableCredit(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function outstandingDebt() external view override returns (uint256) {\\n        return _outstandingDebt(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function currentDebt() external view override returns (uint256) {\\n        return currentDebt(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function currentDebtRatio() external view override returns (uint256) {\\n        return currentDebtRatio(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function isActivated() external view override returns (bool) {\\n        return isActivated(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function lastReport() external view override returns (uint256) {\\n        return lastReport(msg.sender);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function reportPositiveDebtManagement(\\n        uint256 extraFreeFunds,\\n        uint256 debtPayment\\n    ) external override onlyBorrowers updateLastReportTime nonReentrant {\\n        // Checking whether the borrower is telling the truth about his available funds\\n        if (_borrowerFreeAssets(msg.sender) < extraFreeFunds + debtPayment) {\\n            revert FalsePositiveReport();\\n        }\\n\\n        uint256 chargedFees = 0;\\n        // We can only charge a fees if the borrower has reported extra free funds,\\n        // if it's the first report at this block and only if the borrower was registered some time ago\\n        if (\\n            extraFreeFunds > 0 &&\\n            borrowersData[msg.sender].lastReportTimestamp < block.timestamp && // solhint-disable-line not-rely-on-time\\n            borrowersData[msg.sender].activationTimestamp < block.timestamp    // solhint-disable-line not-rely-on-time\\n        ) {\\n            chargedFees = _chargeFees(extraFreeFunds);\\n        }\\n\\n        _rebalanceBorrowerFunds(msg.sender, debtPayment, extraFreeFunds, 0);\\n\\n        _afterPositiveDebtManagementReport(extraFreeFunds, chargedFees);\\n    }\\n\\n    /// @inheritdoc ILender\\n    function reportNegativeDebtManagement(uint256 loss, uint256 debtPayment)\\n        external\\n        override\\n        onlyBorrowers\\n        updateLastReportTime\\n        nonReentrant\\n    {\\n        // Checking whether the borrower has available funds for debt payment\\n        require(_borrowerFreeAssets(msg.sender) >= debtPayment, \\\"Not enough assets for payment\\\");\\n\\n        // Debt wasn't repaid, we need to decrease the ratio of this borrower\\n        if (loss > 0) {\\n            _decreaseBorrowerCredibility(msg.sender, loss);\\n        }\\n\\n        _rebalanceBorrowerFunds(msg.sender, debtPayment, 0, loss);\\n\\n        _afterNegativeDebtManagementReport(loss);\\n    }\\n\\n    /// @notice Balances the borrower's account and adjusts the current amount of funds the borrower can take.\\n    /// @param borrower a borrower's contract address.\\n    /// @param debtPayment an amount of outstanding debt since the previous report, that the borrower managed to cover. Can be zero.\\n    /// @param borrowerFreeFunds a funds that the borrower has earned since the previous report. Can be zero.\\n    /// @param loss a number of tokens by which the borrower's balance has decreased since the last report.\\n    function _rebalanceBorrowerFunds(\\n        address borrower,\\n        uint256 debtPayment,\\n        uint256 borrowerFreeFunds,\\n        uint256 loss\\n    ) private {\\n        // Calculate the amount of credit the lender can provide to the borrower (if any)\\n        uint256 borrowerAvailableCredit = _availableCredit(borrower);\\n\\n        // Make sure that the borrower's debt payment doesn't exceed his actual outstanding debt\\n        uint256 borrowerOutstandingDebt = _outstandingDebt(msg.sender);\\n        debtPayment = MathUpgradeable.min(debtPayment, borrowerOutstandingDebt);\\n\\n        // Take into account repaid debt, if any\\n        if (debtPayment > 0) {\\n            borrowersData[borrower].debt -= debtPayment;\\n            totalDebt -= debtPayment;\\n        }\\n\\n        // Allocate some funds to the borrower if possible\\n        if (borrowerAvailableCredit > 0) {\\n            borrowersData[borrower].debt += borrowerAvailableCredit;\\n            totalDebt += borrowerAvailableCredit;\\n        }\\n\\n        // Now we need to compare the allocated funds to the borrower and his current free balance.\\n        // If the number of unrealized tokens on the borrower's contract is less than the available credit, \\n        // the lender must give that difference to the borrower.\\n        // Otherwise (if the amount of the borrower's available funds is greater than \\n        // he should have according to his share), the lender must take that portion of the funds for himself.\\n        uint256 freeBorrowerBalance = borrowerFreeFunds + debtPayment;\\n        uint256 fundsGiven = 0;\\n        uint256 fundsTaken = 0;\\n        if (freeBorrowerBalance < borrowerAvailableCredit) {\\n            fundsGiven = borrowerAvailableCredit - freeBorrowerBalance;\\n            _transferFundsToBorrower(borrower, fundsGiven);\\n        } else if (freeBorrowerBalance > borrowerAvailableCredit) {\\n            fundsTaken = freeBorrowerBalance - borrowerAvailableCredit;\\n            _takeFundsFromBorrower(borrower, fundsTaken);\\n        }\\n\\n        emit BorrowerDebtManagementReported(\\n            borrower,\\n            debtPayment,\\n            borrowerFreeFunds,\\n            fundsGiven,\\n            fundsTaken,\\n            loss\\n        );\\n    }\\n\\n    /// @notice Returns the unrealized amount of the lender's tokens (lender's contract balance)\\n    function _freeAssets() internal view virtual returns (uint256);\\n\\n    /// @notice Returns the unrealized amount of the borrower's tokens (contract balance of the specified borrower)\\n    function _borrowerFreeAssets(address borrower)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /// @notice Transfers a specified amount of tokens to the borrower\\n    function _transferFundsToBorrower(address borrower, uint256 amount)\\n        internal\\n        virtual;\\n\\n    /// @notice Takes a specified amount of tokens from the borrower\\n    function _takeFundsFromBorrower(address borrower, uint256 amount)\\n        internal\\n        virtual;\\n\\n    /// @notice Returns the total amount of all tokens (including those on the contract balance and taken by borrowers)\\n    function fundAssets() public view virtual returns (uint256) {\\n        return _freeAssets() + totalDebt;\\n    }\\n\\n    /// @notice Returns the current debt that the strategy has.\\n    function currentDebt(address borrower) public view returns (uint256) {\\n        return borrowersData[borrower].debt;\\n    }\\n\\n    /// @notice Returns the debt ratio of the borrower.\\n    function currentDebtRatio(address borrower) public view returns (uint256) {\\n        return borrowersData[borrower].debtRatio;\\n    }\\n\\n    /// @notice Returns the activation status of the specified borrower.\\n    function isActivated(address borrower) public view returns (bool) {\\n        return borrowersData[borrower].activationTimestamp > 0;\\n    }\\n\\n    /// @notice Returns the last report timestamp of the specified borrower.\\n    function lastReport(address borrower) public view returns (uint256) {\\n        return borrowersData[borrower].lastReportTimestamp;\\n    }\\n\\n    /// @notice Returns the total number of tokens borrowers can take.\\n    function _debtLimit() private view returns (uint256) {\\n        return (debtRatio * fundAssets()) / MAX_BPS;\\n    }\\n\\n    /// @notice Lowers the borrower's debt he can take by specified loss and decreases his credibility.\\n    /// @dev This function has \\\"internal\\\" visibility because it's used in tests.\\n    function _decreaseBorrowerCredibility(address borrower, uint256 loss)\\n        internal\\n    {\\n        uint256 debt = borrowersData[borrower].debt;\\n\\n        // Make sure the borrower's loss is less than his entire debt\\n        require(debt >= loss, \\\"Loss is greater than the debt\\\");\\n\\n        // To decrease credibility of the borrower we should lower his \\\"debtRatio\\\"\\n        if (debtRatio > 0) {\\n            uint256 debtRatioChange = MathUpgradeable.min(\\n                (debtRatio * loss) / totalDebt,\\n                borrowersData[borrower].debtRatio\\n            );\\n            if (debtRatioChange != 0) {\\n                borrowersData[borrower].debtRatio -= debtRatioChange;\\n                debtRatio -= debtRatioChange;\\n            }\\n        }\\n\\n        // Also, need to reduce the max amount of funds that can be taken by the borrower\\n        borrowersData[borrower].debt -= loss;\\n        totalDebt -= loss;\\n    }\\n\\n    /// @notice See external implementation\\n    function _availableCredit(address borrower)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // Lender is paused, no funds available for the borrower\\n        if (paused()) {\\n            return 0;\\n        }\\n\\n        uint256 lenderDebtLimit = _debtLimit();\\n        uint256 lenderDebt = totalDebt;\\n        uint256 borrowerDebtLimit = (borrowersData[borrower].debtRatio *\\n            fundAssets()) / MAX_BPS;\\n        uint256 borrowerDebt = borrowersData[borrower].debt;\\n\\n        // There're no more funds for the borrower because he has outstanding debt or the lender's available funds have been exhausted\\n        if (\\n            lenderDebtLimit <= lenderDebt || borrowerDebtLimit <= borrowerDebt\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 lenderAvailableFunds = lenderDebtLimit - lenderDebt;\\n        uint256 borrowerIntendedCredit = borrowerDebtLimit - borrowerDebt;\\n\\n        // Borrower may not take more funds than the lender's limit\\n        uint256 borrowerAvailableCredit = MathUpgradeable.min(\\n            lenderAvailableFunds,\\n            borrowerIntendedCredit\\n        );\\n\\n        // Available credit is limited by the existing number of tokens on the lender's contract\\n        borrowerAvailableCredit = MathUpgradeable.min(\\n            borrowerAvailableCredit,\\n            _freeAssets()\\n        );\\n\\n        return borrowerAvailableCredit;\\n    }\\n\\n    /// @notice See external implementation\\n    function _outstandingDebt(address borrower)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 borrowerDebt = borrowersData[borrower].debt;\\n        if (paused() || debtRatio == 0) {\\n            return borrowerDebt;\\n        }\\n\\n        uint256 borrowerDebtLimit = (borrowersData[borrower].debtRatio *\\n            fundAssets()) / MAX_BPS;\\n        if (borrowerDebt <= borrowerDebtLimit) {\\n            return 0;\\n        }\\n\\n        return borrowerDebt - borrowerDebtLimit;\\n    }\\n\\n    /// @notice Registers a new borrower and sets for him a certain debt ratio\\n    function _registerBorrower(address borrower, uint256 borrowerDebtRatio)\\n        internal\\n    {\\n        // Check if specified borrower has already registered\\n        if (isActivated(borrower)) {\\n            revert BorrowerAlreadyExists();\\n        }\\n\\n        if (debtRatio + borrowerDebtRatio > MAX_BPS) {\\n            revert LenderRatioExceeded(MAX_BPS - debtRatio);\\n        }\\n\\n        borrowersData[borrower] = BorrowerData(\\n            // Activation timestamp \\n            block.timestamp, // solhint-disable-line not-rely-on-time\\n            // Last report timestamp\\n            block.timestamp, // solhint-disable-line not-rely-on-time\\n            // Initial debt\\n            0, \\n            // Debt ratio\\n            borrowerDebtRatio \\n        );\\n\\n        debtRatio += borrowerDebtRatio;\\n    }\\n\\n    /// @notice Sets the borrower's debt ratio. Will be reverted if the borrower doesn't exist or the total debt ratio is exceeded.\\n    /// @dev In the case where you want to disable the borrower, you need to set its ratio to 0.\\n    ///      Thus, the borrower's current debt becomes an outstanding debt, which he must repay to the lender.\\n    function _setBorrowerDebtRatio(address borrower, uint256 borrowerDebtRatio)\\n        internal\\n    {\\n        if (!isActivated(borrower)) {\\n            revert BorrowerDoesNotExist();\\n        }\\n\\n        debtRatio -= borrowersData[borrower].debtRatio;\\n        borrowersData[borrower].debtRatio = borrowerDebtRatio;\\n        debtRatio += borrowerDebtRatio;\\n\\n        if (debtRatio > MAX_BPS) {\\n            revert LenderRatioExceeded(\\n                MAX_BPS - (debtRatio - borrowerDebtRatio)\\n            );\\n        }\\n    }\\n\\n    /// @notice Deletes the borrower from the list\\n    /// @dev Should be called after the borrower's debt ratio is changed to 0, because the lender must take back all the released funds.\\n    function _unregisterBorrower(address borrower) internal {\\n        if (borrowersData[borrower].debtRatio > 0) {\\n            revert BorrowerHasDebt();\\n        }\\n        delete borrowersData[borrower];\\n    }\\n\\n    /// Calculate utilisation rate for specific borrower\\n    /// @notice Based on last report data, can be outdated, but close to latest state of fund\\n    /// @return percent of total assets taken by strategy in BPS\\n    function utilizationRate(address borrower) public virtual view returns (uint256) {\\n        // assets in vault + amount lent to strategies\\n        uint256 _fundAssets = fundAssets(); \\n        // to decrease amount of calls to borrower contract,\\n        // assume that borrower have same amount like in last update\\n        uint256 borrowerAssets = borrowersData[borrower].debt; \\n\\n        if (_fundAssets == 0) {\\n            return 0;\\n        }\\n\\n        return borrowerAssets * MAX_BPS / _fundAssets;\\n    }\\n\\n    /// @notice Charges a fee on the borrower's income.\\n    /// @param extraFreeFunds an income from which the fees will be calculated.\\n    /// @return The total amount of fees charged.\\n    function _chargeFees(uint256 extraFreeFunds)\\n        internal\\n        virtual\\n        returns (uint256);\\n\\n    /// @notice Callback that is called at the end of the positive report function.\\n    /// @param extraFreeFunds the reported extra amount of borrower's funds.\\n    /// @param chargedFees the total amount of charged fees.\\n    function _afterPositiveDebtManagementReport(\\n        uint256 extraFreeFunds,\\n        uint256 chargedFees\\n    ) internal virtual;\\n\\n    /// @notice Callback that is called at the end of the negative report function.\\n    /// @param loss the number of tokens by which the borrower's balance has decreased since the last report.\\n    function _afterNegativeDebtManagementReport(uint256 loss) internal virtual;\\n\\n    /// @inheritdoc ILender\\n    /// @dev Explicitly overridden here to keep this function exposed via \\\"ILender\\\" interface.\\n    function paused()\\n        public\\n        view\\n        override(ILender, PausableUpgradeable)\\n        virtual\\n        returns (bool)\\n    {\\n        return super.paused();\\n    }\\n}\\n\",\"keccak256\":\"0xb9ae20ca15b97640f656f4e480fa9fd46081169f5f2a214b644823e3509cd48a\",\"license\":\"AGPL-3.0\"},\"src/lending/StrategiesLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport {Lender, BorrowerDoesNotExist} from \\\"./Lender.sol\\\";\\nimport {ILender} from \\\"./ILender.sol\\\";\\nimport {IStrategiesLender} from \\\"./IStrategiesLender.sol\\\";\\nimport {IStrategy} from \\\"../strategies/IStrategy.sol\\\";\\nimport {AddressList} from \\\"../structures/AddressList.sol\\\";\\n\\nerror UnexpectedZeroAddress();\\nerror StrategyNotFound();\\nerror StrategyAlreadyExists();\\nerror AccessDeniedForCaller(address caller);\\n\\n/// Lender contract which targeted to lend specifically for investments strategies.\\n/// Basically represent specific case of implementation of whitelist not colletaraized lending contract.\\nabstract contract StrategiesLender is IStrategiesLender, Lender, OwnableUpgradeable {\\n\\n    using AddressList for address[];\\n\\n    /// @notice Arranged list of addresses of strategies, which defines the order for withdrawal.\\n    address[] public withdrawalQueue;\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    ///      variables without shifting down storage in the inheritance chain.\\n    ///      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    /// @notice Event that should happen when the strategy connects to the vault.\\n    /// @param strategy Address of the strategy contract.\\n    /// @param debtRatio Maximum portion of the loan that the strategy can take (in BPS).\\n    event StrategyAdded(address indexed strategy, uint256 debtRatio);\\n\\n    /// @notice Event that should happen when the strategy has been revoked from the vault.\\n    /// @param strategy Address of the strategy contract.\\n    event StrategyRevoked(address indexed strategy);\\n\\n    /// @notice Event that should happen when the strategy has been removed from the vault.\\n    /// @param strategy Address of the strategy contract.\\n    /// @param fromQueueOnly If \\\"true\\\", then the strategy has only been removed from the withdrawal queue.\\n    event StrategyRemoved(address indexed strategy, bool fromQueueOnly);\\n\\n    /// @notice Event that should happen when the strategy has been returned to the withdrawal queue.\\n    /// @param strategy Address of the strategy contract.\\n    event StrategyReturnedToQueue(address indexed strategy);\\n\\n    modifier onlyOwnerOrStrategy(address strategy) {\\n        if (msg.sender != owner() && msg.sender != strategy) {\\n            revert AccessDeniedForCaller(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    function __StrategiesLender_init() internal onlyInitializing {\\n        __Ownable_init();\\n\\n        __StrategiesLender_init_lenderSpecific();\\n    }\\n\\n    /// Init only direct constructors of business logic, ignore Ownable and simular common contracts\\n    function __StrategiesLender_init_lenderSpecific() internal onlyInitializing {\\n        require(owner() != address(0), \\\"StrategiesLender must be ownable\\\");\\n\\n        __Lender_init();\\n    }\\n\\n    /// @notice Switches the vault pause state.\\n    /// @param shutdown a new vault pause state. If \\\"true\\\" is passed, the vault will be paused.\\n    function setEmergencyShutdown(bool shutdown) external onlyOwner {\\n        shutdown ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Adds a new strategy to the vault.\\n    /// @param strategy a new strategy address.\\n    /// @param debtRatio a ratio that shows how much of the new strategy can take, relative to other strategies.\\n    function addStrategy(address strategy, uint256 debtRatio)\\n        external\\n        onlyOwner\\n        whenNotPaused\\n    {\\n        if (strategy == address(0)) {\\n            revert UnexpectedZeroAddress();\\n        }\\n        \\n        _beforeStrategyRegistered(IStrategy(strategy));\\n\\n        _registerBorrower(strategy, debtRatio);\\n        withdrawalQueue.add(strategy);\\n\\n        emit StrategyAdded(strategy, debtRatio);\\n    }\\n\\n    /// Allow check strategy complience before it added\\n    function _beforeStrategyRegistered(IStrategy strategy) internal virtual;\\n\\n    /// @notice Adds a strategy to the withdrawal queue. The strategy must already be registered as a borrower.\\n    /// @param strategy a strategy address.\\n    function addStrategyToQueue(address strategy) external onlyOwner {\\n        if (strategy == address(0)) {\\n            revert UnexpectedZeroAddress();\\n        }\\n\\n        if (withdrawalQueue.contains(strategy)) {\\n            revert StrategyAlreadyExists();\\n        }\\n\\n        if (borrowersData[strategy].activationTimestamp == 0) {\\n            revert BorrowerDoesNotExist();\\n        }\\n\\n        withdrawalQueue.add(strategy);\\n\\n        emit StrategyReturnedToQueue(strategy);\\n    }\\n\\n    /// @inheritdoc IStrategiesLender\\n    function revokeStrategy(address strategy)\\n        external\\n        onlyOwnerOrStrategy(strategy)\\n    {\\n        _setBorrowerDebtRatio(strategy, 0);\\n        emit StrategyRevoked(strategy);\\n    }\\n\\n    /// @notice Removes a strategy from the vault.\\n    /// @param strategy a strategy to remove.\\n    /// @param fromQueueOnly if \\\"true\\\", then the strategy will only be removed from the withdrawal queue.\\n    function removeStrategy(address strategy, bool fromQueueOnly)\\n        external\\n        onlyOwner\\n    {\\n        bool removedFromQueue = withdrawalQueue.remove(strategy);\\n        if (!removedFromQueue) {\\n            revert StrategyNotFound();\\n        }\\n\\n        if (!fromQueueOnly) {\\n            _unregisterBorrower(strategy);\\n        }\\n\\n        emit StrategyRemoved(strategy, fromQueueOnly);\\n    }\\n\\n    /// @notice Sets the withdrawal queue.\\n    /// @param queue a new queue that will replace the existing one.\\n    ///        Should contain only those elements that already present in the existing queue.\\n    function reorderWithdrawalQueue(address[] memory queue) external onlyOwner {\\n        withdrawalQueue = withdrawalQueue.reorder(queue);\\n    }\\n\\n    /// @notice Returns the size of the withdrawal queue.\\n    function getQueueSize() external view returns (uint256) {\\n        return withdrawalQueue.length;\\n    }\\n    \\n    /// @inheritdoc IStrategiesLender\\n    function interestRatePerBlock() public view returns (uint256, uint256) {\\n        uint256 totalUtilisationRate;\\n        uint256 totalInterestRate;\\n\\n        if(totalDebt == 0) {\\n            return (0, 0);\\n        }\\n\\n        for (uint256 i = 0; i < withdrawalQueue.length; i++) {\\n            IStrategy strategy = IStrategy(withdrawalQueue[i]);\\n\\n            uint256 utilisationRate = utilizationRate(address(strategy)); // in BPS\\n            totalUtilisationRate += utilisationRate;\\n            \\n            // interest rate scaled by 1e18\\n            // utilisation rate in BPS * interest rate scaled by 1e18 / BPS = total interest rate scaled by 1e18\\n            totalInterestRate += utilisationRate * strategy.interestRatePerBlock() / MAX_BPS; \\n        }\\n\\n        // sanity check\\n        if (totalUtilisationRate == 0) {\\n            return (0, 0);\\n        }\\n\\n        return (totalInterestRate, totalUtilisationRate);\\n    }\\n\\n    /// @inheritdoc Lender\\n    /// @dev Explicitly overridden here to keep this function exposed via \\\"ILender\\\" interface.\\n    function paused()\\n        public\\n        view\\n        override(ILender, Lender)\\n        virtual\\n        returns (bool)\\n    {\\n        return super.paused();\\n    }\\n\\n}\",\"keccak256\":\"0x43375503064bae4b108d893e206641b3cde9ef04433e75c1cf76a23ee75aa450\",\"license\":\"AGPL-3.0\"},\"src/strategies/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {IStrategiesLender} from \\\"../lending/IStrategiesLender.sol\\\";\\n\\ninterface IStrategy {\\n    /// @notice Returns the name of this strategy.\\n    function name() external view returns (string memory);\\n\\n    /// @notice Returns the contract address of the underlying asset of this strategy.\\n    function asset() external view returns (IERC20Upgradeable);\\n\\n    /// @notice Returns the contract address of the Lender to which this strategy is connected.\\n    function lender() external view returns (IStrategiesLender);\\n\\n    /// @notice Transfers a specified amount of tokens to the vault.\\n    /// @param assets A amount of tokens to withdraw.\\n    /// @return loss A number of tokens that the strategy could not return.\\n    function withdraw(uint256 assets) external returns (uint256 loss);\\n\\n    /// @notice Returns interst rate of strategy per block, for current block or block prior to this one.\\n    /// @dev Can be calculated not for all strategies and usally not such accurate as sliding window averages,\\n    ///  but still can be usafull for on chain calculations and as fallback method.\\n    /// @return The interest rate per block, scaled by 1e18\\n    function interestRatePerBlock() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc22f6bf472cc43d96347263eeb615d0b57ef02395bbe303ccd2981d4beadcbfd\",\"license\":\"AGPL-3.0\"},\"src/structures/AddressList.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nerror ListsDoNotMatch();\\n\\nlibrary AddressList {\\n    /// @notice Adds an address to the list.\\n    /// @param list the list of addresses.\\n    /// @param addr the address to add.\\n    function add(address[] storage list, address addr) internal {\\n        list.push(addr);\\n    }\\n\\n    /// @notice Checks if the list contains the specified item.\\n    /// @param list the list of addresses.\\n    /// @param addr the address to find.\\n    function contains(address[] storage list, address addr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < list.length; i++) {\\n            if (list[i] == addr) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @notice Removes an address from the list and fills the gap with the following items by moving them up.\\n    /// @param list the list of addresses.\\n    /// @param addr the address to remove.\\n    /// @return A boolean value that indicates if the address was found and removed from the list.\\n    function remove(address[] storage list, address addr)\\n        internal\\n        returns (bool)\\n    {\\n        bool addressFound;\\n        for (uint256 i = 0; i < list.length; i++) {\\n            if (list[i] == addr) {\\n                addressFound = true;\\n            }\\n            if (addressFound && i < list.length - 1) {\\n                list[i] = list[i + 1];\\n            }\\n        }\\n        if (addressFound) {\\n            list.pop();\\n        }\\n        return addressFound;\\n    }\\n\\n    /// @notice Checks if the list can be reordered in the specified way.\\n    /// @param list the list of addresses.\\n    /// @param reoderedList the desired reordered list, which must have the same content as the existing list.\\n    /// @return A reordered list\\n    function reorder(address[] storage list, address[] memory reoderedList)\\n        internal\\n        view\\n        returns (address[] memory)\\n    {\\n        uint256 length = list.length;\\n        if (length != reoderedList.length) {\\n            revert ListsDoNotMatch();\\n        }\\n        for (uint256 i = 0; i < length; i++) {\\n            address existingAddress = list[i];\\n            for (uint256 j = 0; j < length; j++) {\\n                // Address is found, move to the next item\\n                if (existingAddress == reoderedList[j]) {\\n                    break;\\n                }\\n                // If this is the last iteration, then the address is not found\\n                if (j == length - 1) {\\n                    revert ListsDoNotMatch();\\n                }\\n            }\\n        }\\n        return reoderedList;\\n    }\\n}\\n\",\"keccak256\":\"0x6d1ba8d87163661acbb468bcfdd3339d7b23f20866e6bd62546a69b81d3c16df\",\"license\":\"AGPL-3.0\"},\"src/tokens/ERC4626Lifecycle.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {SafeERC4626Upgradeable} from \\\"./SafeERC4626Upgradeable.sol\\\";\\nimport {ERC4626Upgradeable} from \\\"./ERC4626Upgradeable.sol\\\";\\nimport {IVaultHook, ERC4626HookPayload} from \\\"./IVaultHook.sol\\\";\\n\\nabstract contract ERC4626Lifecycle is SafeERC4626Upgradeable {\\n    // list of hooks\\n    IVaultHook[] public withdrawHooks;\\n    IVaultHook[] public depositHooks;\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    /// variables without shifting down storage in the inheritance chain.\\n    /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    /// @dev Adds hook to the list of deposit hooks\\n    function addDepositHook(IVaultHook hook) internal {\\n        depositHooks.push(hook);\\n    }\\n\\n    /// @dev Adds hook to the list of withdraw hooks\\n    function addWithdrawHook(IVaultHook hook) internal {\\n        withdrawHooks.push(hook);\\n    }\\n\\n    /// @dev Removes hook from the list of deposit hooks\\n    function removeDepositHook(IVaultHook hook) internal returns (bool) {\\n        // find hook\\n        for (uint256 i = 0; i < depositHooks.length; i++)\\n        {\\n            if (depositHooks[i] == hook)\\n            {\\n                // remove hook\\n                depositHooks[i] = depositHooks[depositHooks.length - 1];\\n                depositHooks.pop();\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @dev Removes hook from the list of withdraw hooks\\n    function removeWithdrawHook(IVaultHook hook) internal returns (bool) {\\n        // find hook\\n        for (uint256 i = 0; i < withdrawHooks.length; i++)\\n        {\\n            if (withdrawHooks[i] == hook)\\n            {\\n                // remove hook\\n                withdrawHooks[i] = withdrawHooks[withdrawHooks.length - 1];\\n                withdrawHooks.pop();\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function beforeWithdraw(uint256 assets, uint256 shares)\\n        internal virtual override(ERC4626Upgradeable)\\n    {\\n        // if there are no hooks, then return to save gas\\n        if(withdrawHooks.length == 0) {\\n            return;\\n        }\\n        ERC4626HookPayload memory request = ERC4626HookPayload({\\n            assets: assets,\\n            shares: shares,\\n            requestSender: msg.sender,\\n            senderMaxWithdraw: maxWithdraw(msg.sender)\\n        });\\n        // iterate over hooks and call it\\n        for (uint256 i = 0; i < withdrawHooks.length; i++)\\n        {\\n            IVaultHook hook = withdrawHooks[i];\\n            hook.beforeWithdrawTrigger(request);\\n        }\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function afterDeposit(uint256 assets, uint256 shares)\\n        internal virtual override(ERC4626Upgradeable)\\n    {\\n        // if there are no depositHooks, then return to save gas\\n        if(depositHooks.length == 0) {\\n            return;\\n        }\\n        ERC4626HookPayload memory request = ERC4626HookPayload({\\n            assets: assets,\\n            shares: shares,\\n            requestSender: msg.sender,\\n            senderMaxWithdraw: maxWithdraw(msg.sender)\\n        });\\n        // iterate over depositHooks and call it\\n        for (uint256 i = 0; i < depositHooks.length; i++)\\n        {\\n            IVaultHook hook = depositHooks[i];\\n            hook.afterDepositTrigger(request);\\n        }\\n    }\\n}\",\"keccak256\":\"0x52fa8dc6c0d9f6d3da5a8cf08cc4f1a4bc89e10fe732ebe810c22656f491d6b7\",\"license\":\"AGPL-3.0\"},\"src/tokens/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {ERC777Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC777/ERC777Upgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\n\\nimport {IERC4626} from \\\"./IERC4626.sol\\\";\\nimport {SafeInitializable} from \\\"../upgradeable/SafeInitializable.sol\\\";\\n\\n/// @title ERC4626 upgradable tokenized Vault implementation based on ERC-777.\\n/// More info in [EIP](https://eips.ethereum.org/EIPS/eip-4626)\\n/// Based on Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\n///\\n/// ERC-777 and ERC-20 tokens represent \\\"shares\\\"\\n/// Vault \\u201cshares\\u201d which represent a claim to ownership on a fraction of the Vault\\u2019s underlying holdings.\\n/// -\\n/// @notice Rationale\\n///  The mint method was included for symmetry and feature completeness.\\n///  Most current use cases of share-based Vaults do not ascribe special meaning to the shares\\n///  such that a user would optimize for a specific number of shares (mint)\\n///  rather than specific amount of underlying (deposit).\\n///  However, it is easy to imagine future Vault strategies which would have unique\\n///  and independently useful share representations.\\n///  The convertTo functions serve as rough estimates that do not account for operation specific details\\n///  like withdrawal fees, etc. They were included for frontends and applications that need an average\\n///  value of shares or assets, not an exact value possibly including slippage or other fees.\\n///  For applications that need an exact value that attempts to account for fees and slippage we have\\n///  included a corresponding preview function to match each mutable function.\\n///  These functions must not account for deposit or withdrawal limits, to ensure they are easily composable,\\n///  the max functions are provided for that purpose.\\nabstract contract ERC4626Upgradeable is\\n    SafeInitializable,\\n    ERC777Upgradeable,\\n    ReentrancyGuardUpgradeable,\\n    IERC4626\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using FixedPointMathLib for uint256;\\n\\n    /// @notice The underlying token managed by the Vault. Has units defined by the corresponding ERC-20 contract.\\n    /// Stored as address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n    IERC20Upgradeable public asset;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /* ///////////////////////////// CONSTRUCTORS ///////////////////////////// */\\n\\n    /**\\n     * Constructor for the ERC4626Upgradeable contract\\n     * @param _asset which will be stored in this Vault\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    function __ERC4626_init(\\n        IERC20Upgradeable _asset,\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        __ERC777_init(name_, symbol_, defaultOperators_);\\n        __ReentrancyGuard_init();\\n\\n        __ERC4626_init_unchained(_asset);\\n    }\\n\\n    /**\\n     * Unchained constructor for the ERC4626Upgradeable contract, without parents contracts init\\n     * @param _asset which will be stored in this Vault\\n     */\\n    function __ERC4626_init_unchained(IERC20Upgradeable _asset)\\n        internal\\n        onlyInitializing\\n    {\\n        asset = _asset;\\n    }\\n\\n    /* ///////////////////////////// DEPOSIT / WITHDRAWAL ///////////////////////////// */\\n\\n    /// @notice Mints Vault shares to receiver by depositing exactly amount of underlying tokens.\\n    /// - emits the Deposit event.\\n    /// - support ERC-20 approve / transferFrom on asset as a deposit flow.\\n    ///   MAY support an additional flow in which the underlying tokens are owned by the Vault contract\\n    ///   before the deposit execution, and are accounted for during deposit.\\n    /// - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage,\\n    ///   the user not approving enough underlying tokens to the Vault contract, etc).\\n    /// Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function deposit(uint256 assets, address receiver)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 shares)\\n    {\\n        shares = previewDeposit(assets);\\n        // Check for rounding error since we round down in previewDeposit.\\n        require(shares != 0, \\\"Given assets result in 0 shares.\\\");\\n\\n        _receiveAndDeposit(assets, shares, receiver);\\n    }\\n\\n    /// @notice Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n    /// - emits the Deposit event.\\n    /// - support ERC-20 approve / transferFrom on asset as a deposit flow.\\n    ///   MAY support an additional flow in which the underlying tokens are owned by the Vault contract\\n    ///   before the deposit execution, and are accounted for during deposit.\\n    /// - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc).\\n    /// Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function mint(uint256 shares, address receiver)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 assets)\\n    {\\n        // No need to check for rounding error, previewMint rounds up.\\n        assets = previewMint(shares);\\n\\n        _receiveAndDeposit(assets, shares, receiver);\\n    }\\n\\n    /// @notice Base deposit logic which common for public deposit and mint function\\n    /// Trasfer assets from sender and mint shares for receiver\\n    function _receiveAndDeposit(\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver\\n    ) internal {\\n        // cases when msg.sender != receiver are error prone\\n        // but they are allowed by the standard... we need take care of it ourselves\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares, \\\"\\\", \\\"\\\");\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    /// @notice Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n    /// - emit the Withdraw event.\\n    /// - support a withdraw flow where the shares are burned from owner directly where owner is msg.sender.\\n    /// - support a withdraw flow where the shares are burned from owner directly where msg.sender\\n    ///   has ERC-20 approval over the shares of owner.\\n    /// - MAY support an additional flow in which the shares are transferred to the Vault contract\\n    ///   before the withdraw execution, and are accounted for during withdraw.\\n    /// - revert if all of assets cannot be withdrawn (due to withdrawal limit being reached,\\n    ///   slippage, the owner not having enough shares, etc).\\n    /// Note that some implementations will require pre-requesting to the Vault\\n    /// before a withdrawal may be performed. Those methods should be performed separately.\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual nonReentrant returns (uint256 shares) {\\n        // No need to check for rounding error, previewWithdraw rounds up.\\n        shares = previewWithdraw(assets);\\n\\n        _withdrawAndSend(assets, shares, receiver, owner);\\n    }\\n\\n    /// @notice Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n    /// - emit the Withdraw event.\\n    /// - support a redeem flow where the shares are burned from owner directly where owner is msg.sender.\\n    /// - support a redeem flow where the shares are burned from owner directly where msg.sender\\n    ///   has ERC-20 approval over the shares of owner.\\n    /// - MAY support an additional flow in which the shares are transferred to the Vault contract\\n    ///   before the redeem execution, and are accounted for during redeem.\\n    /// - revert if all of shares cannot be redeemed (due to withdrawal limit being reached,\\n    ///   slippage, the owner not having enough shares, etc).\\n    /// Note that some implementations will require pre-requesting to the Vault\\n    /// before a withdrawal may be performed. Those methods should be performed separately.\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual nonReentrant returns (uint256 assets) {\\n        assets = previewRedeem(shares);\\n        // Check for rounding error since we round down in previewRedeem.\\n        require(assets != 0, \\\"Given shares result in 0 assets.\\\");\\n\\n        _withdrawAndSend(assets, shares, receiver, owner);\\n    }\\n\\n    /// @notice Burn owner shares and send tokens to receiver.\\n    function _withdrawAndSend(\\n        uint256 assets,\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) internal {\\n        // cases when msg.sender != receiver != owner is error prune\\n        // but they allowed by standard... take care of it by self\\n        if (msg.sender != owner) {\\n            _spendAllowance(owner, msg.sender, shares);\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares, \\\"\\\", \\\"\\\");\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /* ///////////////////////////// ACCOUNTING ///////////////////////////// */\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block,\\n    /// given current on-chain conditions.\\n    /// - return as close to and no more than the exact amount of Vault shares that would be minted\\n    ///   in a deposit call in the same transaction.\\n    ///   I.e. deposit should return the same or more shares as previewDeposit if called in the same transaction.\\n    /// - NOT account for deposit limits like those returned from maxDeposit\\n    ///   and should always act as though the deposit would be accepted,\\n    ///   regardless if the user has enough tokens approved, etc.\\n    /// - inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n    /// - NOT revert due to vault specific user/global limits. MAY revert due to other conditions that would also cause deposit to revert.\\n    /// Note that any unfavorable discrepancy between convertToShares and previewDeposit\\n    /// SHOULD be considered slippage in share price or some other type of condition,\\n    /// meaning the depositor will lose assets by depositing.\\n    function previewDeposit(uint256 assets)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return convertToShares(assets);\\n    }\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate the effects of their mint at the current block,\\n    /// given current on-chain conditions.\\n    /// - return as close to and no fewer than the exact amount of assets that would be deposited\\n    ///   in a mint call in the same transaction.\\n    ///   I.e. mint should return the same or fewer assets as previewMint if called in the same transaction.\\n    /// - NOT account for mint limits like those returned from maxMint\\n    ///   and should always act as though the mint would be accepted,\\n    ///   regardless if the user has enough tokens approved, etc.\\n    /// - inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n    /// - NOT revert due to vault specific user/global limits.\\n    ///   MAY revert due to other conditions that would also cause mint to revert.\\n    /// Note that any unfavorable discrepancy between convertToAssets and previewMint\\n    /// SHOULD be considered slippage in share price or some other type of condition,\\n    /// meaning the depositor will lose assets by minting.\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n        if (supply == 0) {\\n            return shares;\\n        }\\n\\n        return shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate the effects of their withdrawal\\n    /// at the current block, given current on-chain conditions.\\n    /// - return as close to and no fewer than the exact amount of Vault shares\\n    ///   that would be burned in a withdraw call in the same transaction.\\n    ///   I.e. withdraw should return the same or fewer shares as previewWithdraw\\n    ///   if called in the same transaction.\\n    /// - NOT account for withdrawal limits like those returned from maxWithdraw\\n    ///   and should always act as though the withdrawal would be accepted,\\n    ///   regardless if the user has enough shares, etc.\\n    /// - inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n    /// - NOT revert due to vault specific user/global limits.\\n    ///   MAY revert due to other conditions that would also cause withdraw to revert.\\n    /// Note that any unfavorable discrepancy between convertToShares and previewWithdraw\\n    /// SHOULD be considered slippage in share price or some other type of condition,\\n    /// meaning the depositor will lose assets by depositing.\\n    function previewWithdraw(uint256 assets)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n        if (supply == 0) {\\n            return assets;\\n        }\\n        return assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    /// @notice Allows an on-chain or off-chain user to simulate the effects of their\\n    /// redeemption at the current block, given current on-chain conditions.\\n    /// - return as close to and no more than the exact amount of assets that would be withdrawn\\n    ///   in a redeem call in the same transaction.\\n    ///   I.e. redeem should return the same or more assets as previewRedeem\\n    ///   if called in the same transaction.\\n    /// - NOT account for redemption limits like those returned from maxRedeem\\n    ///   and should always act as though the redemption would be accepted,\\n    ///   regardless if the user has enough shares, etc.\\n    /// - inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n    /// - NOT revert due to vault specific user/global limits.\\n    ///   MAY revert due to other conditions that would also cause redeem to revert.\\n    /// Note that any unfavorable discrepancy between convertToAssets and previewRedeem\\n    /// SHOULD be considered slippage in share price or some other type of condition,\\n    /// meaning the depositor will lose assets by redeeming.\\n    function previewRedeem(uint256 shares)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return convertToAssets(shares);\\n    }\\n\\n    /// @notice The amount of shares that the Vault would exchange for the amount of assets provided,\\n    /// in an ideal scenario where all the conditions are met.\\n    /// - is NOT inclusive of any fees that are charged against assets in the Vault.\\n    /// - do NOT show any variations depending on the caller.\\n    /// - do NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n    /// - do NOT revert unless due to integer overflow caused by an unreasonably large input.\\n    /// - round down towards 0.\\n    /// This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share,\\n    /// and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share,\\n    /// meaning what the average user should expect to see when exchanging to and from.\\n    function convertToShares(uint256 assets)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n        if (supply == 0) {\\n            return assets;\\n        }\\n\\n        return assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    /// @notice The amount of assets that the Vault would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met.\\n    /// - is NOT inclusive of any fees that are charged against assets in the Vault.\\n    /// - do NOT show any variations depending on the caller.\\n    /// - do NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n    /// - do NOT revert unless due to integer overflow caused by an unreasonably large input.\\n    /// - round down towards 0.\\n    /// This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share,\\n    /// and instead should reflect the \\u201caverage-user\\u2019s\\u201d price-per-share,\\n    /// meaning what the average user should expect to see when exchanging to and from.\\n    function convertToAssets(uint256 shares)\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        uint256 supply = totalSupply(); // Saves an extra SLOAD if totalSupply is non-zero.\\n        if (supply == 0) {\\n            return shares;\\n        }\\n\\n        return shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    /// @notice Total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n    /// - include any compounding that occurs from yield.\\n    /// - inclusive of any fees that are charged against assets in the Vault.\\n    /// - is NOT revert\\n    /// @dev Must be implemented by child contract.\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    /* //////////////////////////////// DEPOSIT / WITHDRAWAL LIMIT //////////////////////////////// */\\n\\n    /// @notice Maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n    /// through a deposit call.\\n    /// - returns the maximum amount of assets deposit would allow to be deposited\\n    ///   for receiver and not cause a revert, which MUST NOT be higher than the actual maximum\\n    ///   that would be accepted (it should underestimate if necessary).\\n    ///   This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset.\\n    /// - factor in both global and user-specific limits, like if deposits are entirely disabled (even temporarily) it MUST return 0.\\n    /// - return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /// @notice Maximum amount of shares that can be minted from the Vault for the receiver, through a mint call.\\n    /// - return the maximum amount of shares mint would allow to be deposited to receiver\\n    ///   and not cause a revert, which MUST NOT be higher than the actual maximum\\n    ///   that would be accepted (it should underestimate if necessary).\\n    ///   This assumes that the user has infinite assets, i.e. MUST NOT rely on balanceOf of asset.\\n    /// - factor in both global and user-specific limits,\\n    ///   like if mints are entirely disabled (even temporarily) it MUST return 0.\\n    /// - return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /// @notice Maximum amount of the underlying asset that can be withdrawn from the owner balance in the Vault,\\n    /// through a withdraw call.\\n    /// - return the maximum amount of assets that could be transferred from owner through withdraw\\n    ///   and not cause a revert, which MUST NOT be higher than the actual maximum\\n    ///   that would be accepted (it should underestimate if necessary).\\n    /// - factor in both global and user-specific limits,\\n    ///   like if withdrawals are entirely disabled (even temporarily) it MUST return 0.\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf(owner));\\n    }\\n\\n    /// @notice Maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n    /// through a redeem call.\\n    /// - return the maximum amount of shares that could be transferred from owner through redeem\\n    ///   and not cause a revert, which MUST NOT be higher than the actual maximum\\n    ///   that would be accepted (it should underestimate if necessary).\\n    /// - factor in both global and user-specific limits,\\n    ///   like if redemption is entirely disabled (even temporarily) it MUST return 0.\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /* //////////////////////////////// INTERNAL HOOKS //////////////////////////////// */\\n\\n    /// @notice Called before withdraw will be made the Vault.\\n    /// @dev allow implement additional logic for withdraw, hooks a prefered way rather then wrapping\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {} // solhint-disable-line no-empty-blocks\\n\\n    /// @notice Called when a deposit is made to the Vault.\\n    /// @dev allow implement additional logic for withdraw, hooks a prefered way rather then wrapping\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {} // solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x48f7146146afdf654bcc6b1208c7855e45f6c45b0cd4f93dd4700894432a455e\",\"license\":\"AGPL-3.0\"},\"src/tokens/ERC5484Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {ERC721EnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport {ERC721URIStorageUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {IAccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {IERC5484} from \\\"./IERC5484.sol\\\";\\n\\n// https://eips.ethereum.org/EIPS/eip-5484\\ncontract ERC5484Upgradeable is\\n    IERC5484,\\n    Initializable,\\n    ERC721Upgradeable,\\n    ERC721EnumerableUpgradeable,\\n    ERC721URIStorageUpgradeable,\\n    AccessControlUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    // @dev utility object for counting tokens\\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n    /// @dev burn mode with different behavior\\n    BurnAuth private _burnAuth;\\n\\n    /// @dev Token can me minted only once per user\\n    bool private _mintOnce;\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    /// variables without shifting down storage in the inheritance chain.\\n    /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    /// @dev Role for minting tokens\\n    /// value is 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    /// @dev Role for burning tokens which can be used only if _burnAuth isn't BurnAuth.None\\n    /// value is 0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    /// @dev Modifier to protect a burn a token without permission\\n    modifier allowedTransfer(address to, address from, uint256 tokenId) {\\n        bool isMint = from == address(0);\\n        bool isBurner = hasRole(BURNER_ROLE, msg.sender);\\n        bool isBurn = !isMint && to == address(0);\\n        if(_burnAuth == BurnAuth.Neither) {\\n            // nobody can burn token\\n            require(isMint, \\\"ERC5484: can't be transferred\\\");\\n        } else if(_burnAuth == BurnAuth.IssuerOnly) {\\n            // only issuer can burn token\\n            // so we are checking if token is generation with condition from == address(0)\\n            // or we are checking that token belongs to other user and message sender is owner and it is burn operation\\n            bool isBurnOperation = isBurner && isBurn;\\n            require(isMint || isBurnOperation, \\\"ERC5484: can't be transferred\\\");\\n        } else if (_burnAuth == BurnAuth.OwnerOnly){\\n            // only owner can burn token\\n            // so we are checking if token is generation with condition from == ownerOf(tokenId) and it is burn operation\\n            bool isOwner = _ownerOf(tokenId) == msg.sender && hasRole(BURNER_ROLE, msg.sender);\\n            require(isMint || (isOwner && isBurn), \\\"ERC5484: can't be transferred\\\");\\n        } else if (_burnAuth == BurnAuth.Both) {\\n            // both owner and issuer can burn token\\n            // so we are checking if token is minting with condition from == address(0)\\n            // or we are checking that token belongs to other user and message sender is owner and it is burn operation\\n            require(isMint || (isBurn && isBurner), \\\"ERC5484: can't be transferred\\\");\\n        }\\n        _;\\n    }\\n\\n    /* ///////////////////////////// CONSTRUCTORS ///////////////////////////// */\\n\\n    function __ERC5484Upgradeable_init(\\n        string memory name_,\\n        string memory symbol_,\\n        BurnAuth burnAuth_,\\n        bool mintOnce_\\n    ) internal onlyInitializing {\\n        __ERC721_init(name_, symbol_);\\n        __ERC721Enumerable_init();\\n        __ERC721URIStorage_init();\\n        __AccessControl_init();\\n        \\n        __ERC5484Upgradeable_init_unchained(burnAuth_, mintOnce_);\\n    }\\n\\n    function __ERC5484Upgradeable_init_unchained(\\n        BurnAuth burnAuth_,\\n        bool mintOnce_\\n    ) internal onlyInitializing {\\n        _burnAuth = burnAuth_;\\n        _mintOnce = mintOnce_;\\n\\n        // setup roles depend on mode for SoulBound token\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev function for mint new SBT token\\n    /// @param to address of user who will receive token\\n    /// @param uri token metadata uri\\n    /// @return true if token was minted\\n    function _safeMint(address to, string memory uri)\\n        internal\\n        virtual\\n        onlyRole(MINTER_ROLE)\\n        returns(bool)\\n    {\\n        // allow to mint only once per user if _mintOnce is true\\n        if(_mintOnce && balanceOf(to) != 0) {\\n            return false;\\n        }\\n\\n        // mint token\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        super._safeMint(to, tokenId);\\n        _setTokenURI(tokenId, uri);\\n\\n        // set permission to burn token\\n        if(_burnAuth == BurnAuth.OwnerOnly || _burnAuth == BurnAuth.Both) {\\n            _setupRole(BURNER_ROLE, to);\\n        }\\n\\n        // emit event\\n        emit Issued(address(0), to, tokenId, _burnAuth);\\n        return true;\\n    }\\n\\n    /// @dev Token is SOUL BOUND and it is not allowed to move token between users\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\\n        internal\\n        virtual\\n        allowedTransfer(to, from, tokenId)\\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    /// @dev Burns `tokenId`. See {ERC721-_burn}.\\n    function burn(uint256 tokenId) external\\n        onlyRole(BURNER_ROLE)\\n        virtual\\n    {\\n        _burn(tokenId);\\n    }\\n\\n    /// @dev See {ERC721-_burn}\\n    function _burn(uint256 tokenId) internal virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable){\\n        super._burn(tokenId);\\n    }\\n\\n    /// @dev See {IERC721Metadata-tokenURI}.\\n    function tokenURI(uint256 tokenId) public view virtual override(ERC721Upgradeable, ERC721URIStorageUpgradeable)\\n        returns (string memory)\\n    {\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, ERC721EnumerableUpgradeable, ERC721URIStorageUpgradeable, AccessControlUpgradeable)\\n        virtual\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC5484).interfaceId\\n            || interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice provides burn authorization of the token id.\\n    /// @dev unassigned tokenIds are invalid, and queries do throw\\n    /// @param tokenId The identifier for a token.\\n    function burnAuth(uint256 tokenId) external view virtual returns (BurnAuth){\\n        require(_exists(tokenId), \\\"ERC5484: token doesn't exists\\\");\\n        return _burnAuth;\\n    }\\n}\",\"keccak256\":\"0xc75ca815c95abb70166eff7db7b65a07272dcda04607e0dd3c53e107cf14768f\",\"license\":\"AGPL-3.0\"},\"src/tokens/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 {\\n\\n    /* ///////////////////////////// EVENTS ///////////////////////////// */\\n\\n    /// `sender` has exchanged `assets` for `shares`, and transferred those `shares` to `owner`.\\n    /// emitted when tokens are deposited into the Vault via the mint and deposit methods.\\n    event Deposit(\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /// `sender` has exchanged `shares`, owned by `owner`, for `assets`, and transferred those `assets` to `receiver`.\\n    /// emitted when shares are withdrawn from the Vault in ERC4626.redeem or ERC4626.withdraw methods.\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @notice The underlying token managed by the Vault. Has units defined by the corresponding ERC-20 contract.\\n     * Stored as address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (IERC20Upgradeable);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xe0b1a2e19aa78ee17783644981a5b1f1b725b4b031fbb8214ed3f02da3cdd516\",\"license\":\"AGPL-3.0\"},\"src/tokens/IERC5484.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\ninterface IERC5484 {\\n    /// A guideline to standardlize burn-authorization's number coding\\n    enum BurnAuth {\\n        IssuerOnly,\\n        OwnerOnly,\\n        Both,\\n        Neither\\n    }\\n\\n    /// @notice Emitted when a soulbound token is issued.\\n    /// @dev This emit is an add-on to nft's transfer emit in order to distinguish sbt\\n    /// from vanilla nft while providing backward compatibility.\\n    /// @param from The issuer\\n    /// @param to The receiver\\n    /// @param tokenId The id of the issued token\\n    event Issued (\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed tokenId,\\n        BurnAuth burnAuth\\n    );\\n\\n    /// @notice provides burn authorization of the token id.\\n    /// @dev unassigned tokenIds are invalid, and queries do throw\\n    /// @param tokenId The identifier for a token.\\n    function burnAuth(uint256 tokenId) external view returns (BurnAuth);\\n}\",\"keccak256\":\"0xc96f708b45ebb1010db2b0b829360f12ec67dc83ec67e2a95df06f6afc467b3a\",\"license\":\"AGPL-3.0\"},\"src/tokens/IVaultFounderToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport {IERC721MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport {IERC721EnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\nimport {IERC5484} from \\\"./IERC5484.sol\\\";\\n\\n/// @title ERC721 complient Token interface\\ninterface IVaultFounderToken is\\n    IERC5484,\\n    IERC721Upgradeable,\\n    IERC721MetadataUpgradeable,\\n    IERC721EnumerableUpgradeable\\n{\\n    /// @dev set token metadata uri\\n    /// can be used as utility method and custom logic on front-end\\n    function setTokenURI(string memory _tokenURI) external;\\n    /// @dev set token metadata uri\\n    /// can be used as utility method and custom logic on front-end by owner of the contract\\n    /// in case of end user has a wrong uri or somebody corrupted it\\n    function setTokenURI(string memory _tokenURI, uint256 tokenId) external;\\n}\",\"keccak256\":\"0x0eb852cb2c91ce96dd4b6316d6e849357a92607980720a8141da6bc1d9850545\",\"license\":\"AGPL-3.0\"},\"src/tokens/IVaultHook.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {ERC4626Upgradeable} from \\\"./ERC4626Upgradeable.sol\\\";\\n\\n/// @title ERC4626 Vault Token lifecycle hook interface\\ninterface IVaultHook {\\n    function afterDepositTrigger(ERC4626HookPayload memory request) external;\\n    function beforeWithdrawTrigger(ERC4626HookPayload memory request) external;\\n}\\n\\nstruct ERC4626HookPayload {\\n    /// @dev The amount of assets to be deposited.\\n    uint256 assets;\\n\\n    /// @dev The amount of shares to be minted.\\n    uint256 shares;\\n\\n    /// @dev The address that initiated the request.\\n    address requestSender;\\n\\n    /// @dev The amount of assets the sender is allowed to withdraw.\\n    uint256 senderMaxWithdraw;\\n}\",\"keccak256\":\"0xe566658000cc2d437656a640262bfe4dcb8cfa987bd45fd7c0d84e9400c29240\",\"license\":\"AGPL-3.0\"},\"src/tokens/RewardHolder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\nimport {Vault} from \\\"../Vault.sol\\\";\\n\\ncontract RewardHolder is Initializable, AccessControlUpgradeable, ReentrancyGuardUpgradeable {\\n    using FixedPointMathLib for uint256;\\n\\n    /// @notice Emitted reward is claimed by a token owner\\n    event RewardClaimed(uint256 reward, address receiver);\\n    /// @notice Emitted when new rewards are deposited\\n    event RewardDeposited(address sender, uint value);\\n    /// @notice Emitted when a new owner is added\\n    event OwnerAdded(address owner, uint index);\\n\\n    /// @notice Accumulator of the total earned interest rate since the opening of the token\\n    uint public rewardIndex = 1;\\n\\n    /// @notice The owners' reward indexes for eachas of the last time they accrued\\n    mapping(address => uint) public rewardOwnerIndex;\\n\\n    /// @notice\\n    uint16 public numberCoins;\\n\\n    Vault public vault;\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    /// variables without shifting down storage in the inheritance chain.\\n    /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    // 0xbb788f92e65e1a823e2c502bc4e7f9c3e55531bd56bfc7c0a895fb3ac9eb7716\\n    bytes32 public constant BALANCE_UPDATER_ROLE = keccak256(\\\"BALANCE_UPDATE_ROLE\\\");\\n\\n    /* ///////////////////////////// CONSTRUCTORS ///////////////////////////// */\\n\\n    function __RewardHolder_init() internal onlyInitializing {\\n        __AccessControl_init();\\n        __ReentrancyGuard_init();\\n        __RewardHolder_init_unchained();\\n    }\\n\\n    function __RewardHolder_init_unchained() internal onlyInitializing {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /// @dev set vault\\n    /// @notice that is mandatory to be set before reward can be claimed\\n    function _setVault(Vault vault_) internal virtual onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if(address(vault) != address(0)) {\\n            revokeRole(BALANCE_UPDATER_ROLE, address(vault));\\n        }\\n        vault = vault_;\\n        grantRole(BALANCE_UPDATER_ROLE, address(vault));\\n    }\\n\\n    /// @dev deposit reward to the contract to be claimed by token owners\\n    /// @notice only role with BALANCE_UPDATER_ROLE can call this function\\n    /// @param plusReward amount of reward to be deposited\\n    function depositReward(uint256 plusReward) external onlyRole(BALANCE_UPDATER_ROLE) nonReentrant {\\n        // update reward index for claim reward logic\\n        rewardIndex += plusReward;\\n        emit RewardDeposited(_msgSender(), plusReward);\\n    }\\n\\n    /// @dev claim reward for token owner\\n    function claimReward() external nonReentrant {\\n        require(vault != Vault(address(0)), \\\"Vault not set.\\\");\\n        require(rewardOwnerIndex[msg.sender] != 0, \\\"Caller doesn't have reward.\\\");\\n\\n        // calculate reward for token owner\\n        uint256 tokenOwnerReward = calcReward();\\n        rewardOwnerIndex[msg.sender] = rewardIndex;\\n\\n        // transfer reward to token owner\\n        vault.transfer(msg.sender, tokenOwnerReward);\\n        emit RewardClaimed(tokenOwnerReward, address(msg.sender));\\n    }\\n\\n    function calcReward() public view returns (uint256) {\\n        if(numberCoins == 0 || rewardOwnerIndex[msg.sender] == 0) {\\n            return 0;\\n        }\\n        uint deltaIndex = rewardIndex - rewardOwnerIndex[msg.sender];\\n        return deltaIndex / numberCoins;\\n    }\\n\\n    /// @dev setup new owner for reward usually called when minting new token\\n    function setupNewOwner(address rewardOwner) internal virtual onlyRole(BALANCE_UPDATER_ROLE) {\\n        rewardOwnerIndex[rewardOwner] = rewardIndex;\\n        numberCoins++;\\n        emit OwnerAdded(rewardOwner, rewardIndex);\\n    }\\n}\",\"keccak256\":\"0x954d0deb0b212fbaeb57f659e45b1db47a2beba9e992d0e7b9ae6da7713a7b72\",\"license\":\"AGPL-3.0\"},\"src/tokens/SafeERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {IERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport {SafeERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport {FixedPointMathLib} from \\\"solmate/utils/FixedPointMathLib.sol\\\";\\n\\nimport {ERC4626Upgradeable} from \\\"./ERC4626Upgradeable.sol\\\";\\n\\n/// @title Safier and limited implementation of ERC-4626\\n/// @notice ERC-4626 standard allow deposit and withdraw not for message sender.\\n///  It commonly known issue, which hardly to test and much error prune.\\n///  Such interfaces caused vulnarabilities, which resulted in million dollars hacks.\\n///  On anther hand, this interfaces not have any use cases which cannot be implemented without `transferFrom` method.\\n///  This implementation prevent spends and allowances from any methods except transferFrom/send\\n///  Also main business logic simplified to reduce gas consumption.\\nabstract contract SafeERC4626Upgradeable is ERC4626Upgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using FixedPointMathLib for uint256;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    /**\\n     * Constructor for the SafeERC4626Upgradeable contract\\n     * @param _asset which will be stored in this Vault\\n     * @dev `defaultOperators` may be an empty array.\\n     */\\n    function __SafeERC4626_init(\\n        IERC20Upgradeable _asset,\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory defaultOperators_\\n    ) internal onlyInitializing {\\n        __ERC4626_init(_asset, name_, symbol_, defaultOperators_);\\n    }\\n\\n    /**\\n     * Unchained constructor for the SafeERC4626Upgradeable contract, without parents contracts init\\n     * @param _asset which will be stored in this Vault\\n     */\\n    function __SafeERC4626Upgradeable_init_unchained(IERC20Upgradeable _asset)\\n        internal\\n        onlyInitializing\\n    {\\n        __ERC4626_init_unchained(_asset);\\n    }\\n\\n    /// @notice Mints the Vault shares for msg.sender, according to the number of deposited base tokens.\\n    /// - emits the Deposit event.\\n    /// - support ERC-20 approve / transferFrom on asset as a deposit flow.\\n    ///   MAY support an additional flow in which the underlying tokens are owned by the Vault contract\\n    ///   before the deposit execution, and are accounted for during deposit.\\n    /// - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc).\\n    /// Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function deposit(uint256 assets)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 shares)\\n    {\\n        shares = previewDeposit(assets);\\n        // Check for rounding error since we round down in previewDeposit.\\n        require(shares != 0, \\\"Given assets result in 0 shares.\\\");\\n\\n        _receiveAndDeposit(assets, shares, msg.sender);\\n    }\\n\\n    /// @notice Mints exactly requested Vault shares to msg.sender by depositing any required amount of underlying tokens.\\n    /// - emits the Deposit event.\\n    /// - support ERC-20 approve / transferFrom on asset as a deposit flow.\\n    ///   MAY support an additional flow in which the underlying tokens are owned by the Vault contract\\n    ///   before the deposit execution, and are accounted for during deposit.\\n    /// - revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not approving enough underlying tokens to the Vault contract, etc).\\n    /// Note that most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function mint(uint256 shares)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 assets)\\n    {\\n        // No need to check for rounding error, previewMint rounds up.\\n        assets = previewMint(shares);\\n\\n        _receiveAndDeposit(assets, shares, msg.sender);\\n    }\\n\\n    /// @notice Burns shares from msg.sender and sends exactly assets of underlying tokens to msg.sender.\\n    /// - emit the Withdraw event.\\n    /// - support a withdraw flow where the shares are burned from owner directly where owner is msg.sender.\\n    /// - MAY support an additional flow in which the shares are transferred to the Vault contract\\n    ///   before the withdraw execution, and are accounted for during withdraw.\\n    /// - revert if all of assets cannot be withdrawn (due to withdrawal limit being reached,\\n    ///   slippage, the owner not having enough shares, etc).\\n    /// Note that some implementations will require pre-requesting to the Vault\\n    /// before a withdrawal may be performed. Those methods should be performed separately.\\n    function withdraw(uint256 assets)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 shares)\\n    {\\n        // No need to check for rounding error, previewWithdraw rounds up.\\n        shares = previewWithdraw(assets);\\n\\n        _withdrawAndSend(assets, shares, msg.sender, msg.sender);\\n    }\\n\\n    /// @notice Burns exactly shares from msg.sender and sends assets of underlying tokens to msg.sender.\\n    /// - emit the Withdraw event.\\n    /// - support a redeem flow where the shares are burned from owner directly where owner is msg.sender.\\n    /// - MAY support an additional flow in which the shares are transferred to the Vault contract\\n    ///   before the redeem execution, and are accounted for during redeem.\\n    /// - revert if all of shares cannot be redeemed (due to withdrawal limit being reached,\\n    ///   slippage, the owner not having enough shares, etc).\\n    /// Note that some implementations will require pre-requesting to the Vault\\n    /// before a withdrawal may be performed. Those methods should be performed separately.\\n    function redeem(uint256 shares)\\n        public\\n        virtual\\n        nonReentrant\\n        returns (uint256 assets)\\n    {\\n        assets = previewRedeem(shares);\\n        // Check for rounding error since we round down in previewRedeem.\\n        require(assets != 0, \\\"Given shares result in 0 assets.\\\");\\n\\n        _withdrawAndSend(assets, shares, msg.sender, msg.sender);\\n    }\\n\\n    /* //////////////////// Backwards compatible methods ////////////////////////// */\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function deposit(\\n        uint256 assets,\\n        address /* receiver */\\n    ) public virtual override returns (uint256 shares) {\\n        // nonReentrant under the hood\\n        return deposit(assets);\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function mint(\\n        uint256 shares,\\n        address /* receiver */\\n    ) public virtual override returns (uint256 assets) {\\n        // nonReentrant under the hood\\n        return mint(shares);\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function withdraw(\\n        uint256 assets,\\n        address, /* receiver */\\n        address /* owner */\\n    ) public virtual override returns (uint256 shares) {\\n        // nonReentrant under the hood\\n        return withdraw(assets);\\n    }\\n\\n    /// @inheritdoc ERC4626Upgradeable\\n    function redeem(\\n        uint256 shares,\\n        address, /* receiver */\\n        address /* owner */\\n    ) public virtual override returns (uint256 assets) {\\n        // nonReentrant under the hood\\n        return redeem(shares);\\n    }\\n}\\n\",\"keccak256\":\"0x8c3eaf2ed84e1ebff549cf33feb30788baec1f352a0a98a723621094535cf89e\",\"license\":\"AGPL-3.0\"},\"src/tokens/VaultFounderToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {AccessControlUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\\\";\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {ERC721URIStorageUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol\\\";\\n\\nimport {SafeInitializable} from \\\"../upgradeable/SafeInitializable.sol\\\";\\nimport {SafeUUPSUpgradeable} from \\\"../upgradeable/SafeUUPSUpgradeable.sol\\\";\\nimport {IVersionable} from \\\"../upgradeable/IVersionable.sol\\\";\\nimport {ERC5484Upgradeable} from \\\"./ERC5484Upgradeable.sol\\\";\\nimport {ERC4626Upgradeable} from \\\"./ERC4626Upgradeable.sol\\\";\\nimport {IVaultFounderToken} from \\\"./IVaultFounderToken.sol\\\";\\nimport {IVaultHook, ERC4626HookPayload} from \\\"./IVaultHook.sol\\\";\\nimport {RewardHolder} from \\\"./RewardHolder.sol\\\";\\nimport {Vault} from \\\"../Vault.sol\\\";\\n\\ncontract VaultFounderToken is IVaultFounderToken, SafeUUPSUpgradeable, ERC5484Upgradeable, IVaultHook, RewardHolder {\\n\\n    uint256 public constant MAX_BPS = 10_000;\\n\\n    // Max number of tokens that can be minted\\n    uint256 public maxCountTokens;\\n\\n    // Next token price multiplier in percents\\n    uint256 public nextTokenPriceMultiplier;\\n\\n    /// @dev return price for the next token\\n    uint256 public nextTokenPrice;\\n\\n    /// @dev This empty reserved space is put in place to allow future versions to add new\\n    /// variables without shifting down storage in the inheritance chain.\\n    /// See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n    uint256[50] private __gap;\\n\\n    /// @notice Emit when new token minted and token price updated.\\n    /// @param founder Address of the founder.\\n    /// @param requiredPrice Required price for the token.\\n    /// @param tokenPrice Price of the token.\\n    /// @param nextTokenPrice Price of the next token.\\n    /// @param nextTokenPriceMultiplier Next token price multiplier in percents.\\n    event FounderAdded(\\n        address indexed founder, \\n        uint256 requiredPrice,\\n        uint256 tokenPrice, \\n        uint256 nextTokenPrice, \\n        uint256 nextTokenPriceMultiplier\\n    );\\n\\n    /* ///////////////////////////// CONSTRUCTORS ///////////////////////////// */\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(bool needDisableInitializers) SafeInitializable(needDisableInitializers) {} // solhint-disable-line no-empty-blocks\\n\\n    function initialize(\\n        uint256 maxCountTokens_,\\n        uint256 nextTokenPriceMultiplier_,\\n        uint256 initialTokenPrice_\\n    ) public initializer {\\n        __SafeUUPSUpgradeable_init(); // owner init under the hood\\n        __ERC5484Upgradeable_init(\\\"Eonian Vault Founder Token\\\", \\\"EVFT\\\", BurnAuth.Neither, true); // __AccessControl_init inside\\n        __ReentrancyGuard_init();\\n        __RewardHolder_init_unchained(); // require __AccessControl_init\\n\\n        maxCountTokens = maxCountTokens_;\\n        nextTokenPriceMultiplier = nextTokenPriceMultiplier_;\\n        nextTokenPrice = initialTokenPrice_;\\n    }\\n\\n    /// @inheritdoc IVersionable\\n    function version() external pure returns (string memory) {\\n        return \\\"0.1.1\\\";\\n    }\\n\\n    /// @dev set vault\\n    /// @notice that is mandatory to be set before reward can be claimed\\n    function setVault(Vault vault_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if(address(vault) != address(0)) {\\n            revokeRole(MINTER_ROLE, address(vault_));\\n        }\\n        super._setVault(vault_);\\n        grantRole(MINTER_ROLE, address(vault_));\\n    }\\n\\n    /// @dev function for mint new SBT token\\n    /// @param to address of user who will receive token\\n    /// @param uri token metadata uri\\n    /// @param amount holder balance, used as token price\\n    /// @return true if token was minted\\n    function tryToMint(address to, string memory uri, uint256 amount) public virtual returns(bool){\\n        if(amount < nextTokenPrice || totalSupply() >= maxCountTokens) {\\n            return false;\\n        }\\n        \\n        if(!_safeMint(to, uri)) { // requires MINTER_ROLE inside\\n            return false;\\n        }\\n\\n        setupNewOwner(to);\\n        uint256 _nextTokenPrice = amount * nextTokenPriceMultiplier / MAX_BPS;\\n\\n        // Will be used to record price of current holder token in The Graph\\n        emit FounderAdded(to, nextTokenPrice, amount, _nextTokenPrice, nextTokenPriceMultiplier);\\n        \\n        nextTokenPrice = _nextTokenPrice;\\n        return true;\\n    }\\n\\n    /// @dev set multiplicator for the next token in percents\\n    /// in case nextTokenPriceMultiplier_ = 13_000 the next price of the token will be: curPrice * 130%\\n    /// @param nextTokenPriceMultiplier_ persent multiplicator\\n    function setNextTokenMultiplier(uint256 nextTokenPriceMultiplier_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        // the price of the previous token\\n        nextTokenPrice = nextTokenPrice * MAX_BPS / nextTokenPriceMultiplier;\\n        nextTokenPriceMultiplier = nextTokenPriceMultiplier_;\\n        // calculation the price with the new multiplier\\n        nextTokenPrice = nextTokenPrice * nextTokenPriceMultiplier_ / MAX_BPS;\\n    }\\n\\n    /// @inheritdoc IVaultFounderToken\\n    function setTokenURI(string memory _tokenURI) external override {\\n        address tokenOwner = msg.sender;\\n        uint256 tokenId = tokenOfOwnerByIndex(tokenOwner, 0);\\n        _setTokenURI(tokenId, _tokenURI);\\n    }\\n\\n    /// @inheritdoc IVaultFounderToken\\n    function setTokenURI(string memory _tokenURI, uint256 tokenId) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _setTokenURI(tokenId, _tokenURI);\\n    }\\n\\n    function afterDepositTrigger(ERC4626HookPayload memory request)\\n            external override\\n    {\\n        tryToMint(request.requestSender, \\\"\\\", request.senderMaxWithdraw);\\n    }\\n\\n    /* solhint-disable no-empty-blocks */\\n    function beforeWithdrawTrigger(ERC4626HookPayload memory request) external override\\n    {\\n        //empty code\\n    }\\n    /* solhint-disable no-empty-blocks */\\n\\n    /// @dev See {IERC165-supportsInterface}.\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC5484Upgradeable, AccessControlUpgradeable, IERC165Upgradeable)\\n        virtual\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\",\"keccak256\":\"0x45f453bc5e07fba0b6917f175f33c0fc5a3460ab3d2900d1fc7a50dab2798f8d\",\"license\":\"AGPL-3.0\"},\"src/upgradeable/IVersionable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\n/** \\n * Allow properly identify different versions of the same contract \\n * and track upgrades results \\n * */\\ninterface IVersionable  {\\n    /// @notice Returns the current version of this contract\\n    /// @return a version in semantic versioning format\\n    function version() external pure returns (string memory);\\n}\\n\",\"keccak256\":\"0x13e08376fa8013858c0031556eaae03e4c8d517597cb5f0524040ef36a7c9006\",\"license\":\"AGPL-3.0\"},\"src/upgradeable/SafeInitializable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IVersionable} from \\\"./IVersionable.sol\\\";\\n\\n/** Implement best practices for initializable contracts */\\nabstract contract SafeInitializable is IVersionable, Initializable {\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /**\\n     * This constructor prevents UUPS Uninitialized Proxies Vulnerability in all contracts which inherit from it.\\n     * More info about vulnerability: https://medium.com/immunefi/wormhole-uninitialized-proxy-bugfix-review-90250c41a43a\\n     * \\n     * @dev Initial fix for this vulnerability was suggested as using `_disableInitializers()` function in constructor,\\n     *  but later, in version 4.3.2, OpenZeppelin implemented `onlyProxy` modifier for UUPS upgradable contracts,\\n     *  which fixed this vulnerability. Still, `_disableInitializers()` is a best practice which prevents unintended access \\n     *  to implementation contracts that can be used maliciously.\\n     *  \\n     *  More info: https://forum.openzeppelin.com/t/how-to-test-upgradeability-for-proxies/33436/7 \\n     *      and https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680\\n     * \\n     * To prevent code duplication of constructor, this contract can be used. On the other hand, \\n     * it can be used as a marker for contracts that are safe from this vulnerability.\\n     * Additionally, `needDisableInitializers` parameter can be used to enable initializers in mocks and unit tests.\\n     *\\n     * @param needDisableInitializers - if true, initializers will be disabled\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(bool needDisableInitializers) {\\n        if(needDisableInitializers) {\\n            _disableInitializers();\\n        }\\n    }\\n}\",\"keccak256\":\"0xece22d8416967bebd1c1008f135e19224ed4afe81e30204fbf3b2d97c73db8b6\",\"license\":\"AGPL-3.0\"},\"src/upgradeable/SafeUUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {SafeInitializable} from \\\"./SafeInitializable.sol\\\";\\n\\n/** \\n * Implement basic safety mechanism for UUPS proxy\\n * based on owner authorization for upgrades\\n * */\\nabstract contract SafeUUPSUpgradeable is UUPSUpgradeable, SafeInitializable, OwnableUpgradeable {\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n\\n    /** Init all required constructors, including ownable */\\n    function __SafeUUPSUpgradeable_init() internal onlyInitializing {\\n        __SafeUUPSUpgradeable_init_direct();\\n\\n        __Ownable_init();\\n    }\\n\\n    /** Init only direct constructors, UUPS only */\\n    function __SafeUUPSUpgradeable_init_direct() internal onlyInitializing {\\n        __UUPSUpgradeable_init();\\n    }\\n\\n    /** Authorise that upgrades can do only owner */\\n    function _authorizeUpgrade(address newImplementation) internal onlyOwner override {} // solhint-disable-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0xaf322f5c5eeb718b7834b2eac8bfee7ce8062383840acc1d28b27351a759304e\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405230608052600161028d553480156200001b57600080fd5b50604051620043a2380380620043a28339810160408190526200003e9162000119565b80801562000050576200005062000058565b505062000144565b600054610100900460ff1615620000c55760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff9081161462000117576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012c57600080fd5b815180151581146200013d57600080fd5b9392505050565b6080516142266200017c60003960008181610e5101528181610e9101528181610f6901528181610fa901526110cd01526142266000f3fe60806040526004361061031a5760003560e01c806370a08231116101ab578063b88d4fde116100f7578063e9ee2fa911610095578063f2fde38b1161006f578063f2fde38b14610977578063f584f31214610997578063fbfa77cf146109b7578063fd967f47146109de57600080fd5b8063e9ee2fa91461091e578063ec6a5f8314610935578063ed0693ff1461095557600080fd5b8063d5391393116100d1578063d539139314610872578063d547741f14610894578063e0df5b6f146108b4578063e985e9c5146108d457600080fd5b8063b88d4fde1461081d578063c87b56dd1461083d578063cb40bb5f1461085d57600080fd5b806391d14854116101645780639c76796c1161013e5780639c76796c146107b3578063a217fddf146107d3578063a22cb465146107e8578063b88a802f1461080857600080fd5b806391d148541461076757806392c854991461078757806395d89b411461079e57600080fd5b806370a08231146106ae578063715018a6146106ce57806376a93944146106e357806380d85911146106fa578063899cf3611461071a5780638da5cb5b1461074857600080fd5b80632f745c591161026a5780634f1ef2861161022357806354fd4d50116101fd57806354fd4d50146106115780636352211e1461063f578063675cccfe1461065f5780636817031b1461068e57600080fd5b80634f1ef286146105c95780634f6ccce7146105dc57806352d1902d146105fc57600080fd5b80632f745c591461050b57806336568abe1461052b5780633659cfe61461054b57806342842e0e1461056b57806342966c681461058b578063496327f6146105ab57600080fd5b806309a3beef116102d757806323b872dd116102b157806323b872dd14610478578063248a9ca314610498578063282c51f3146104c95780632f2ff15d146104eb57600080fd5b806309a3beef1461042257806318160ddd146104425780631e2720ff1461045857600080fd5b806301ffc9a71461031f5780630489b56f1461035457806305deb99f1461038157806306fdde03146103a6578063081812fc146103c8578063095ea7b314610400575b600080fd5b34801561032b57600080fd5b5061033f61033a366004613708565b6109f4565b60405190151581526020015b60405180910390f35b34801561036057600080fd5b5061037461036f366004613725565b610a05565b60405161034b9190613754565b34801561038d57600080fd5b506103986102c35481565b60405190815260200161034b565b3480156103b257600080fd5b506103bb610a7a565b60405161034b91906137cc565b3480156103d457600080fd5b506103e86103e3366004613725565b610b0c565b6040516001600160a01b03909116815260200161034b565b34801561040c57600080fd5b5061042061041b3660046137f4565b610b33565b005b34801561042e57600080fd5b5061042061043d3660046138c3565b610c48565b34801561044e57600080fd5b5061019354610398565b34801561046457600080fd5b50610420610473366004613725565b610c5d565b34801561048457600080fd5b50610420610493366004613908565b610cdf565b3480156104a457600080fd5b506103986104b3366004613725565b60009081526101f5602052604090206001015490565b3480156104d557600080fd5b5061039860008051602061414a83398151915281565b3480156104f757600080fd5b50610420610506366004613949565b610d10565b34801561051757600080fd5b506103986105263660046137f4565b610d36565b34801561053757600080fd5b50610420610546366004613949565b610dcd565b34801561055757600080fd5b50610420610566366004613979565b610e47565b34801561057757600080fd5b50610420610586366004613908565b610f23565b34801561059757600080fd5b506104206105a6366004613725565b610f3e565b3480156105b757600080fd5b506104206105c6366004613996565b50565b6104206105d7366004613a04565b610f5f565b3480156105e857600080fd5b506103986105f7366004613725565b61102b565b34801561060857600080fd5b506103986110c0565b34801561061d57600080fd5b50604080518082019091526005815264302e312e3160d81b60208201526103bb565b34801561064b57600080fd5b506103e861065a366004613725565b611173565b34801561066b57600080fd5b5061028f5461067b9061ffff1681565b60405161ffff909116815260200161034b565b34801561069a57600080fd5b506104206106a9366004613979565b6111d3565b3480156106ba57600080fd5b506103986106c9366004613979565b61122f565b3480156106da57600080fd5b506104206112b5565b3480156106ef57600080fd5b506103986102c45481565b34801561070657600080fd5b50610420610715366004613a54565b6112c9565b34801561072657600080fd5b50610398610735366004613979565b61028e6020526000908152604090205481565b34801561075457600080fd5b5061012d546001600160a01b03166103e8565b34801561077357600080fd5b5061033f610782366004613949565b61145e565b34801561079357600080fd5b506103986102c25481565b3480156107aa57600080fd5b506103bb61148a565b3480156107bf57600080fd5b506104206107ce366004613725565b611499565b3480156107df57600080fd5b50610398600081565b3480156107f457600080fd5b50610420610803366004613a8e565b6114f0565b34801561081457600080fd5b506104206114fb565b34801561082957600080fd5b50610420610838366004613abc565b611699565b34801561084957600080fd5b506103bb610858366004613725565b6116cb565b34801561086957600080fd5b506103986116d6565b34801561087e57600080fd5b506103986000805160206141d183398151915281565b3480156108a057600080fd5b506104206108af366004613949565b611740565b3480156108c057600080fd5b506104206108cf366004613b28565b611766565b3480156108e057600080fd5b5061033f6108ef366004613b5d565b6001600160a01b0391821660009081526101006020908152604080832093909416825291909152205460ff1690565b34801561092a57600080fd5b5061039861028d5481565b34801561094157600080fd5b50610420610950366004613996565b61177f565b34801561096157600080fd5b5061039860008051602061418a83398151915281565b34801561098357600080fd5b50610420610992366004613979565b6117a1565b3480156109a357600080fd5b5061033f6109b2366004613b8b565b611817565b3480156109c357600080fd5b5061028f546103e8906201000090046001600160a01b031681565b3480156109ea57600080fd5b5061039861271081565b60006109ff826118e4565b92915050565b600081815260fd60205260408120546001600160a01b0316610a6e5760405162461bcd60e51b815260206004820152601d60248201527f455243353438343a20746f6b656e20646f65736e27742065786973747300000060448201526064015b60405180910390fd5b50506102285460ff1690565b606060fb8054610a8990613be4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab590613be4565b8015610b025780601f10610ad757610100808354040283529160200191610b02565b820191906000526020600020905b815481529060010190602001808311610ae557829003601f168201915b5050505050905090565b6000610b1782611924565b50600090815260ff60205260409020546001600160a01b031690565b6000610b3e82611173565b9050806001600160a01b0316836001600160a01b031603610bab5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a65565b336001600160a01b0382161480610bc75750610bc781336108ef565b610c395760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610a65565b610c438383611983565b505050565b6000610c53816119f1565b610c4382846119fb565b60008051602061418a833981519152610c75816119f1565b610c7d611ac8565b8161028d6000828254610c909190613c34565b9091555050604080513381526020810184905281517f7dbc080e4530c8bcf265eb5c9a35ae096ca1eb607b7e802b96581ef4c5e1a703929181900390910190a1610cdb600161025b55565b5050565b610ce93382611b2b565b610d055760405162461bcd60e51b8152600401610a6590613c47565b610c43838383611bab565b60008281526101f56020526040902060010154610d2c816119f1565b610c438383611d1c565b6000610d418361122f565b8210610da35760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a65565b506001600160a01b0391909116600090815261019160209081526040808320938352929052205490565b6001600160a01b0381163314610e3d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a65565b610cdb8282611da3565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e8f5760405162461bcd60e51b8152600401610a6590613c94565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ed860008051602061416a833981519152546001600160a01b031690565b6001600160a01b031614610efe5760405162461bcd60e51b8152600401610a6590613ce0565b610f0781611e0b565b604080516000808252602082019092526105c691839190611e13565b610c4383838360405180602001604052806000815250611699565b60008051602061414a833981519152610f56816119f1565b610cdb82611f7e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fa75760405162461bcd60e51b8152600401610a6590613c94565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ff060008051602061416a833981519152546001600160a01b031690565b6001600160a01b0316146110165760405162461bcd60e51b8152600401610a6590613ce0565b61101f82611e0b565b610cdb82826001611e13565b60006110376101935490565b821061109a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a65565b61019382815481106110ae576110ae613d2c565b90600052602060002001549050919050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111605760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a65565b5060008051602061416a83398151915290565b600081815260fd60205260408120546001600160a01b0316806109ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a65565b60006111de816119f1565b61028f546201000090046001600160a01b03161561120e5761120e6000805160206141d183398151915283611740565b61121782611f87565b610cdb6000805160206141d183398151915283610d10565b60006001600160a01b0382166112995760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610a65565b506001600160a01b0316600090815260fe602052604090205490565b6112bd61201d565b6112c76000612078565b565b600054610100900460ff16158080156112e95750600054600160ff909116105b806113035750303b158015611303575060005460ff166001145b6113665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a65565b6000805460ff191660011790558015611389576000805461ff0019166101001790555b6113916120cb565b6113f06040518060400160405280601a81526020017f456f6e69616e205661756c7420466f756e64657220546f6b656e000000000000815250604051806040016040528060048152602001631155919560e21b81525060036001612102565b6113f8612155565b611400612184565b6102c28490556102c38390556102c48290558015611458576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60009182526101f5602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060fc8054610a8990613be4565b60006114a4816119f1565b6102c3546127106102c4546114b99190613d42565b6114c39190613d59565b6102c48190556102c3839055612710906114de908490613d42565b6114e89190613d59565b6102c4555050565b610cdb3383836121b6565b611503611ac8565b61028f546201000090046001600160a01b03166115535760405162461bcd60e51b815260206004820152600e60248201526d2b30bab63a103737ba1039b2ba1760911b6044820152606401610a65565b33600090815261028e602052604081205490036115b25760405162461bcd60e51b815260206004820152601b60248201527f43616c6c657220646f65736e27742068617665207265776172642e00000000006044820152606401610a65565b60006115bc6116d6565b61028d5433600081815261028e6020526040908190209290925561028f54915163a9059cbb60e01b81526004810191909152602481018390529192506201000090046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116549190613d7b565b50604080518281523360208201527f5dd59f4285b36241394b73f8f7ae03d0290b030a86803cf2562ecf33eeb617bd910160405180910390a1506112c7600161025b55565b6116a33383611b2b565b6116bf5760405162461bcd60e51b8152600401610a6590613c47565b61145884848484612285565b60606109ff826122b8565b61028f5460009061ffff1615806116fb575033600090815261028e6020526040902054155b156117065750600090565b33600090815261028e602052604081205461028d546117259190613d98565b61028f5490915061173a9061ffff1682613d59565b91505090565b60008281526101f5602052604090206001015461175c816119f1565b610c438383611da3565b3360006117738282610d36565b9050610c4381846119fb565b610cdb8160400151604051806020016040528060008152508360600151611817565b6117a961201d565b6001600160a01b03811661180e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a65565b6105c681612078565b60006102c45482108061183057506102c2546101935410155b1561183d575060006118dd565b61184784846123c1565b611853575060006118dd565b61185c846124ee565b60006127106102c354846118709190613d42565b61187a9190613d59565b6102c4546102c3546040805192835260208301879052820183905260608201529091506001600160a01b038616907f66e5f204dadf0b0406343d72ad369d71133c465340700994fed9d5454b0bc1d29060800160405180910390a26102c4555060015b9392505050565b60006001600160e01b03198216630489b56f60e01b148061191557506001600160e01b03198216637965db0b60e01b145b806109ff57506109ff8261259d565b600081815260fd60205260409020546001600160a01b03166105c65760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a65565b600081815260ff6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119b882611173565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6105c681336125c2565b600082815260fd60205260409020546001600160a01b0316611a765760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610a65565b60008281526101c360205260409020611a8f8282613df9565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7906020015b60405180910390a15050565b600261025b5403611b1b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a65565b600261025b55565b600161025b55565b600080611b3783611173565b9050806001600160a01b0316846001600160a01b03161480611b7f57506001600160a01b038082166000908152610100602090815260408083209388168352929052205460ff165b80611ba35750836001600160a01b0316611b9884610b0c565b6001600160a01b0316145b949350505050565b826001600160a01b0316611bbe82611173565b6001600160a01b031614611be45760405162461bcd60e51b8152600401610a6590613eb9565b6001600160a01b038216611c465760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a65565b611c53838383600161261b565b826001600160a01b0316611c6682611173565b6001600160a01b031614611c8c5760405162461bcd60e51b8152600401610a6590613eb9565b600081815260ff6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260fe855283862080546000190190559087168086528386208054600101905586865260fd90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611d26828261145e565b610cdb5760008281526101f5602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d5f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611dad828261145e565b15610cdb5760008281526101f5602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6105c661201d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611e4657610c43836127e1565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611ea0575060408051601f3d908101601f19168201909252611e9d91810190613efe565b60015b611f035760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a65565b60008051602061416a8339815191528114611f725760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a65565b50610c4383838361287d565b6105c6816128a2565b6000611f92816119f1565b61028f546201000090046001600160a01b031615611fd65761028f54611fd69060008051602061418a833981519152906201000090046001600160a01b0316611740565b61028f805462010000600160b01b031916620100006001600160a01b0385811682029290921792839055610cdb9260008051602061418a8339815191529291900416610d10565b61012d546001600160a01b031633146112c75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a65565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166120f25760405162461bcd60e51b8152600401610a6590613f17565b6120fa6128e4565b6112c7612913565b600054610100900460ff166121295760405162461bcd60e51b8152600401610a6590613f17565b6121338484612942565b61213b612973565b612143612973565b61214b612973565b611458828261299a565b600054610100900460ff1661217c5760405162461bcd60e51b8152600401610a6590613f17565b6112c7612a05565b600054610100900460ff166121ab5760405162461bcd60e51b8152600401610a6590613f17565b6112c7600033612a2c565b816001600160a01b0316836001600160a01b0316036122175760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a65565b6001600160a01b0383811660008181526101006020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612290848484611bab565b61229c84848484612a36565b6114585760405162461bcd60e51b8152600401610a6590613f62565b60606122c382611924565b60008281526101c36020526040812080546122dd90613be4565b80601f016020809104026020016040519081016040528092919081815260200182805461230990613be4565b80156123565780601f1061232b57610100808354040283529160200191612356565b820191906000526020600020905b81548152906001019060200180831161233957829003601f168201915b50505050509050600061237460408051602081019091526000815290565b90508051600003612386575092915050565b8151156123b85780826040516020016123a0929190613fb4565b60405160208183030381529060405292505050919050565b611ba384612b37565b60006000805160206141d18339815191526123db816119f1565b61022854610100900460ff1680156123fa57506123f78461122f565b15155b1561240857600091506124e7565b60006124146102275490565b905061242561022780546001019055565b61242f8582612baa565b61243981856119fb565b60016102285460ff1660038111156124535761245361373e565b1480612476575060026102285460ff1660038111156124745761247461373e565b145b156124935761249360008051602061414a83398151915286612a2c565b6102285460405182916001600160a01b038816916000917f135ffb3383e06280e062ac5095bbf8faa98517161e596a2536bd98a9a8b64a88916124d99160ff1690613754565b60405180910390a460019250505b5092915050565b60008051602061418a833981519152612506816119f1565b61028d546001600160a01b038316600090815261028e602052604081209190915561028f805461ffff169161253a83613fe3565b91906101000a81548161ffff021916908361ffff160217905550507f567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df8261028d54604051611abc9291906001600160a01b03929092168252602082015260400190565b60006001600160e01b03198216637965db0b60e01b14806109ff57506109ff82612bc4565b6125cc828261145e565b610cdb576125d981612be9565b6125e4836020612bfb565b6040516020016125f5929190614004565b60408051601f198184030181529082905262461bcd60e51b8252610a65916004016137cc565b8284836001600160a01b03821615600061264360008051602061414a8339815191523361145e565b905060008215801561265c57506001600160a01b038616155b905060036102285460ff1660038111156126785761267861373e565b0361269f578261269a5760405162461bcd60e51b8152600401610a6590614079565b6127c9565b60006102285460ff1660038111156126b9576126b961373e565b036126f75760008280156126ca5750815b905083806126d55750805b6126f15760405162461bcd60e51b8152600401610a6590614079565b506127c9565b60016102285460ff1660038111156127115761271161373e565b0361277d57600084815260fd60205260408120546001600160a01b03163314801561274f575061274f60008051602061414a8339815191523361145e565b905083806126d557508080156126d55750816126f15760405162461bcd60e51b8152600401610a6590614079565b60026102285460ff1660038111156127975761279761373e565b036127c95782806127ad57508080156127ad5750815b6127c95760405162461bcd60e51b8152600401610a6590614079565b6127d58a8a8a8a612d97565b50505050505050505050565b6001600160a01b0381163b61284e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a65565b60008051602061416a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61288683612ecd565b6000825111806128935750805b15610c43576114588383612f0d565b6128ab81612f32565b60008181526101c36020526040902080546128c590613be4565b1590506105c65760008181526101c3602052604081206105c6916136a4565b600054610100900460ff1661290b5760405162461bcd60e51b8152600401610a6590613f17565b6112c7612973565b600054610100900460ff1661293a5760405162461bcd60e51b8152600401610a6590613f17565b6112c7612fd5565b600054610100900460ff166129695760405162461bcd60e51b8152600401610a6590613f17565b610cdb8282613005565b600054610100900460ff166112c75760405162461bcd60e51b8152600401610a6590613f17565b600054610100900460ff166129c15760405162461bcd60e51b8152600401610a6590613f17565b610228805483919060ff191660018360038111156129e1576129e161373e565b0217905550610228805461ff00191661010083151502179055610cdb600033612a2c565b600054610100900460ff16611b235760405162461bcd60e51b8152600401610a6590613f17565b610cdb8282611d1c565b60006001600160a01b0384163b15612b2c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612a7a9033908990889088906004016140b0565b6020604051808303816000875af1925050508015612ab5575060408051601f3d908101601f19168201909252612ab2918101906140e3565b60015b612b12573d808015612ae3576040519150601f19603f3d011682016040523d82523d6000602084013e612ae8565b606091505b508051600003612b0a5760405162461bcd60e51b8152600401610a6590613f62565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ba3565b506001949350505050565b6060612b4282611924565b6000612b5960408051602081019091526000815290565b90506000815111612b7957604051806020016040528060008152506118dd565b80612b8384613045565b604051602001612b94929190613fb4565b6040516020818303038152906040529392505050565b610cdb8282604051806020016040528060008152506130d8565b60006001600160e01b03198216632483248360e11b14806109ff57506109ff8261310b565b60606109ff6001600160a01b03831660145b60606000612c0a836002613d42565b612c15906002613c34565b67ffffffffffffffff811115612c2d57612c2d613820565b6040519080825280601f01601f191660200182016040528015612c57576020820181803683370190505b509050600360fc1b81600081518110612c7257612c72613d2c565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612ca157612ca1613d2c565b60200101906001600160f81b031916908160001a9053506000612cc5846002613d42565b612cd0906001613c34565b90505b6001811115612d48576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612d0457612d04613d2c565b1a60f81b828281518110612d1a57612d1a613d2c565b60200101906001600160f81b031916908160001a90535060049490941c93612d4181614100565b9050612cd3565b5083156118dd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a65565b6001811115612e065760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610a65565b816001600160a01b038516612e6457612e5f816101938054600083815261019460205260408120829055600182018355919091527ffc8af01f449989052b52093a58fc9f42d0b11f0c6dd5dca0463dab62346ccc680155565b612e87565b836001600160a01b0316856001600160a01b031614612e8757612e878582613130565b6001600160a01b038416612ea357612e9e816131d2565b612ec6565b846001600160a01b0316846001600160a01b031614612ec657612ec68482613287565b5050505050565b612ed6816127e1565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606118dd83836040518060600160405280602781526020016141aa602791396132cd565b6000612f3d82611173565b9050612f4d81600084600161261b565b612f5682611173565b600083815260ff6020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855260fe8452828520805460001901905587855260fd909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff16612ffc5760405162461bcd60e51b8152600401610a6590613f17565b6112c733612078565b600054610100900460ff1661302c5760405162461bcd60e51b8152600401610a6590613f17565b60fb6130388382613df9565b5060fc610c438282613df9565b6060600061305283613345565b600101905060008167ffffffffffffffff81111561307257613072613820565b6040519080825280601f01601f19166020018201604052801561309c576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846130a657509392505050565b6130e2838361341d565b6130ef6000848484612a36565b610c435760405162461bcd60e51b8152600401610a6590613f62565b60006001600160e01b0319821663780e9d6360e01b14806109ff57506109ff826135b6565b6000600161313d8461122f565b6131479190613d98565b6000838152610192602052604090205490915080821461319d576001600160a01b038416600090815261019160209081526040808320858452825280832054848452818420819055835261019290915290208190555b506000918252610192602090815260408084208490556001600160a01b03909416835261019181528383209183525290812055565b610193546000906131e590600190613d98565b60008381526101946020526040812054610193805493945090928490811061320f5761320f613d2c565b9060005260206000200154905080610193838154811061323157613231613d2c565b6000918252602080832090910192909255828152610194909152604080822084905585825281205561019380548061326b5761326b614117565b6001900381819060005260206000200160009055905550505050565b60006132928361122f565b6001600160a01b0390931660009081526101916020908152604080832086845282528083208590559382526101929052919091209190915550565b6060600080856001600160a01b0316856040516132ea919061412d565b600060405180830381855af49150503d8060008114613325576040519150601f19603f3d011682016040523d82523d6000602084013e61332a565b606091505b509150915061333b86838387613606565b9695505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106133845772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106133b0576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106133ce57662386f26fc10000830492506010015b6305f5e10083106133e6576305f5e100830492506008015b61271083106133fa57612710830492506004015b6064831061340c576064830492506002015b600a83106109ff5760010192915050565b6001600160a01b0382166134735760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a65565b600081815260fd60205260409020546001600160a01b0316156134d85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a65565b6134e660008383600161261b565b600081815260fd60205260409020546001600160a01b03161561354b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a65565b6001600160a01b038216600081815260fe602090815260408083208054600101905584835260fd90915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160e01b031982166380ac58cd60e01b14806135e757506001600160e01b03198216635b5e139f60e01b145b806109ff57506301ffc9a760e01b6001600160e01b03198316146109ff565b6060831561367557825160000361366e576001600160a01b0385163b61366e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a65565b5081611ba3565b611ba3838381511561368a5781518083602001fd5b8060405162461bcd60e51b8152600401610a6591906137cc565b5080546136b090613be4565b6000825580601f106136c0575050565b601f0160209004906000526020600020908101906105c691905b808211156136ee57600081556001016136da565b5090565b6001600160e01b0319811681146105c657600080fd5b60006020828403121561371a57600080fd5b81356118dd816136f2565b60006020828403121561373757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061377657634e487b7160e01b600052602160045260246000fd5b91905290565b60005b8381101561379757818101518382015260200161377f565b50506000910152565b600081518084526137b881602086016020860161377c565b601f01601f19169290920160200192915050565b6020815260006118dd60208301846137a0565b6001600160a01b03811681146105c657600080fd5b6000806040838503121561380757600080fd5b8235613812816137df565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261384757600080fd5b813567ffffffffffffffff8082111561386257613862613820565b604051601f8301601f19908116603f0116810190828211818310171561388a5761388a613820565b816040528381528660208588010111156138a357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156138d657600080fd5b823567ffffffffffffffff8111156138ed57600080fd5b6138f985828601613836565b95602094909401359450505050565b60008060006060848603121561391d57600080fd5b8335613928816137df565b92506020840135613938816137df565b929592945050506040919091013590565b6000806040838503121561395c57600080fd5b82359150602083013561396e816137df565b809150509250929050565b60006020828403121561398b57600080fd5b81356118dd816137df565b6000608082840312156139a857600080fd5b6040516080810181811067ffffffffffffffff821117156139cb576139cb613820565b8060405250823581526020830135602082015260408301356139ec816137df565b60408201526060928301359281019290925250919050565b60008060408385031215613a1757600080fd5b8235613a22816137df565b9150602083013567ffffffffffffffff811115613a3e57600080fd5b613a4a85828601613836565b9150509250929050565b600080600060608486031215613a6957600080fd5b505081359360208301359350604090920135919050565b80151581146105c657600080fd5b60008060408385031215613aa157600080fd5b8235613aac816137df565b9150602083013561396e81613a80565b60008060008060808587031215613ad257600080fd5b8435613add816137df565b93506020850135613aed816137df565b925060408501359150606085013567ffffffffffffffff811115613b1057600080fd5b613b1c87828801613836565b91505092959194509250565b600060208284031215613b3a57600080fd5b813567ffffffffffffffff811115613b5157600080fd5b611ba384828501613836565b60008060408385031215613b7057600080fd5b8235613b7b816137df565b9150602083013561396e816137df565b600080600060608486031215613ba057600080fd5b8335613bab816137df565b9250602084013567ffffffffffffffff811115613bc757600080fd5b613bd386828701613836565b925050604084013590509250925092565b600181811c90821680613bf857607f821691505b602082108103613c1857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156109ff576109ff613c1e565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176109ff576109ff613c1e565b600082613d7657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613d8d57600080fd5b81516118dd81613a80565b818103818111156109ff576109ff613c1e565b601f821115610c4357600081815260208120601f850160051c81016020861015613dd25750805b601f850160051c820191505b81811015613df157828155600101613dde565b505050505050565b815167ffffffffffffffff811115613e1357613e13613820565b613e2781613e218454613be4565b84613dab565b602080601f831160018114613e5c5760008415613e445750858301515b600019600386901b1c1916600185901b178555613df1565b600085815260208120601f198616915b82811015613e8b57888601518255948401946001909101908401613e6c565b5085821015613ea95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b600060208284031215613f1057600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351613fc681846020880161377c565b835190830190613fda81836020880161377c565b01949350505050565b600061ffff808316818103613ffa57613ffa613c1e565b6001019392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161403c81601785016020880161377c565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161406d81602884016020880161377c565b01602801949350505050565b6020808252601d908201527f455243353438343a2063616e2774206265207472616e73666572726564000000604082015260600190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061333b908301846137a0565b6000602082840312156140f557600080fd5b81516118dd816136f2565b60008161410f5761410f613c1e565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6000825161413f81846020870161377c565b919091019291505056fe3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcbb788f92e65e1a823e2c502bc4e7f9c3e55531bd56bfc7c0a895fb3ac9eb7716416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220b9b256b52b2070f0354c2eae94d67ab240dbaf732f6417c448f0ebf9129f9cc164736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061031a5760003560e01c806370a08231116101ab578063b88d4fde116100f7578063e9ee2fa911610095578063f2fde38b1161006f578063f2fde38b14610977578063f584f31214610997578063fbfa77cf146109b7578063fd967f47146109de57600080fd5b8063e9ee2fa91461091e578063ec6a5f8314610935578063ed0693ff1461095557600080fd5b8063d5391393116100d1578063d539139314610872578063d547741f14610894578063e0df5b6f146108b4578063e985e9c5146108d457600080fd5b8063b88d4fde1461081d578063c87b56dd1461083d578063cb40bb5f1461085d57600080fd5b806391d14854116101645780639c76796c1161013e5780639c76796c146107b3578063a217fddf146107d3578063a22cb465146107e8578063b88a802f1461080857600080fd5b806391d148541461076757806392c854991461078757806395d89b411461079e57600080fd5b806370a08231146106ae578063715018a6146106ce57806376a93944146106e357806380d85911146106fa578063899cf3611461071a5780638da5cb5b1461074857600080fd5b80632f745c591161026a5780634f1ef2861161022357806354fd4d50116101fd57806354fd4d50146106115780636352211e1461063f578063675cccfe1461065f5780636817031b1461068e57600080fd5b80634f1ef286146105c95780634f6ccce7146105dc57806352d1902d146105fc57600080fd5b80632f745c591461050b57806336568abe1461052b5780633659cfe61461054b57806342842e0e1461056b57806342966c681461058b578063496327f6146105ab57600080fd5b806309a3beef116102d757806323b872dd116102b157806323b872dd14610478578063248a9ca314610498578063282c51f3146104c95780632f2ff15d146104eb57600080fd5b806309a3beef1461042257806318160ddd146104425780631e2720ff1461045857600080fd5b806301ffc9a71461031f5780630489b56f1461035457806305deb99f1461038157806306fdde03146103a6578063081812fc146103c8578063095ea7b314610400575b600080fd5b34801561032b57600080fd5b5061033f61033a366004613708565b6109f4565b60405190151581526020015b60405180910390f35b34801561036057600080fd5b5061037461036f366004613725565b610a05565b60405161034b9190613754565b34801561038d57600080fd5b506103986102c35481565b60405190815260200161034b565b3480156103b257600080fd5b506103bb610a7a565b60405161034b91906137cc565b3480156103d457600080fd5b506103e86103e3366004613725565b610b0c565b6040516001600160a01b03909116815260200161034b565b34801561040c57600080fd5b5061042061041b3660046137f4565b610b33565b005b34801561042e57600080fd5b5061042061043d3660046138c3565b610c48565b34801561044e57600080fd5b5061019354610398565b34801561046457600080fd5b50610420610473366004613725565b610c5d565b34801561048457600080fd5b50610420610493366004613908565b610cdf565b3480156104a457600080fd5b506103986104b3366004613725565b60009081526101f5602052604090206001015490565b3480156104d557600080fd5b5061039860008051602061414a83398151915281565b3480156104f757600080fd5b50610420610506366004613949565b610d10565b34801561051757600080fd5b506103986105263660046137f4565b610d36565b34801561053757600080fd5b50610420610546366004613949565b610dcd565b34801561055757600080fd5b50610420610566366004613979565b610e47565b34801561057757600080fd5b50610420610586366004613908565b610f23565b34801561059757600080fd5b506104206105a6366004613725565b610f3e565b3480156105b757600080fd5b506104206105c6366004613996565b50565b6104206105d7366004613a04565b610f5f565b3480156105e857600080fd5b506103986105f7366004613725565b61102b565b34801561060857600080fd5b506103986110c0565b34801561061d57600080fd5b50604080518082019091526005815264302e312e3160d81b60208201526103bb565b34801561064b57600080fd5b506103e861065a366004613725565b611173565b34801561066b57600080fd5b5061028f5461067b9061ffff1681565b60405161ffff909116815260200161034b565b34801561069a57600080fd5b506104206106a9366004613979565b6111d3565b3480156106ba57600080fd5b506103986106c9366004613979565b61122f565b3480156106da57600080fd5b506104206112b5565b3480156106ef57600080fd5b506103986102c45481565b34801561070657600080fd5b50610420610715366004613a54565b6112c9565b34801561072657600080fd5b50610398610735366004613979565b61028e6020526000908152604090205481565b34801561075457600080fd5b5061012d546001600160a01b03166103e8565b34801561077357600080fd5b5061033f610782366004613949565b61145e565b34801561079357600080fd5b506103986102c25481565b3480156107aa57600080fd5b506103bb61148a565b3480156107bf57600080fd5b506104206107ce366004613725565b611499565b3480156107df57600080fd5b50610398600081565b3480156107f457600080fd5b50610420610803366004613a8e565b6114f0565b34801561081457600080fd5b506104206114fb565b34801561082957600080fd5b50610420610838366004613abc565b611699565b34801561084957600080fd5b506103bb610858366004613725565b6116cb565b34801561086957600080fd5b506103986116d6565b34801561087e57600080fd5b506103986000805160206141d183398151915281565b3480156108a057600080fd5b506104206108af366004613949565b611740565b3480156108c057600080fd5b506104206108cf366004613b28565b611766565b3480156108e057600080fd5b5061033f6108ef366004613b5d565b6001600160a01b0391821660009081526101006020908152604080832093909416825291909152205460ff1690565b34801561092a57600080fd5b5061039861028d5481565b34801561094157600080fd5b50610420610950366004613996565b61177f565b34801561096157600080fd5b5061039860008051602061418a83398151915281565b34801561098357600080fd5b50610420610992366004613979565b6117a1565b3480156109a357600080fd5b5061033f6109b2366004613b8b565b611817565b3480156109c357600080fd5b5061028f546103e8906201000090046001600160a01b031681565b3480156109ea57600080fd5b5061039861271081565b60006109ff826118e4565b92915050565b600081815260fd60205260408120546001600160a01b0316610a6e5760405162461bcd60e51b815260206004820152601d60248201527f455243353438343a20746f6b656e20646f65736e27742065786973747300000060448201526064015b60405180910390fd5b50506102285460ff1690565b606060fb8054610a8990613be4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab590613be4565b8015610b025780601f10610ad757610100808354040283529160200191610b02565b820191906000526020600020905b815481529060010190602001808311610ae557829003601f168201915b5050505050905090565b6000610b1782611924565b50600090815260ff60205260409020546001600160a01b031690565b6000610b3e82611173565b9050806001600160a01b0316836001600160a01b031603610bab5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a65565b336001600160a01b0382161480610bc75750610bc781336108ef565b610c395760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610a65565b610c438383611983565b505050565b6000610c53816119f1565b610c4382846119fb565b60008051602061418a833981519152610c75816119f1565b610c7d611ac8565b8161028d6000828254610c909190613c34565b9091555050604080513381526020810184905281517f7dbc080e4530c8bcf265eb5c9a35ae096ca1eb607b7e802b96581ef4c5e1a703929181900390910190a1610cdb600161025b55565b5050565b610ce93382611b2b565b610d055760405162461bcd60e51b8152600401610a6590613c47565b610c43838383611bab565b60008281526101f56020526040902060010154610d2c816119f1565b610c438383611d1c565b6000610d418361122f565b8210610da35760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a65565b506001600160a01b0391909116600090815261019160209081526040808320938352929052205490565b6001600160a01b0381163314610e3d5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610a65565b610cdb8282611da3565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610e8f5760405162461bcd60e51b8152600401610a6590613c94565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ed860008051602061416a833981519152546001600160a01b031690565b6001600160a01b031614610efe5760405162461bcd60e51b8152600401610a6590613ce0565b610f0781611e0b565b604080516000808252602082019092526105c691839190611e13565b610c4383838360405180602001604052806000815250611699565b60008051602061414a833981519152610f56816119f1565b610cdb82611f7e565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163003610fa75760405162461bcd60e51b8152600401610a6590613c94565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ff060008051602061416a833981519152546001600160a01b031690565b6001600160a01b0316146110165760405162461bcd60e51b8152600401610a6590613ce0565b61101f82611e0b565b610cdb82826001611e13565b60006110376101935490565b821061109a5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a65565b61019382815481106110ae576110ae613d2c565b90600052602060002001549050919050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111605760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a65565b5060008051602061416a83398151915290565b600081815260fd60205260408120546001600160a01b0316806109ff5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a65565b60006111de816119f1565b61028f546201000090046001600160a01b03161561120e5761120e6000805160206141d183398151915283611740565b61121782611f87565b610cdb6000805160206141d183398151915283610d10565b60006001600160a01b0382166112995760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610a65565b506001600160a01b0316600090815260fe602052604090205490565b6112bd61201d565b6112c76000612078565b565b600054610100900460ff16158080156112e95750600054600160ff909116105b806113035750303b158015611303575060005460ff166001145b6113665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610a65565b6000805460ff191660011790558015611389576000805461ff0019166101001790555b6113916120cb565b6113f06040518060400160405280601a81526020017f456f6e69616e205661756c7420466f756e64657220546f6b656e000000000000815250604051806040016040528060048152602001631155919560e21b81525060036001612102565b6113f8612155565b611400612184565b6102c28490556102c38390556102c48290558015611458576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b60009182526101f5602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060fc8054610a8990613be4565b60006114a4816119f1565b6102c3546127106102c4546114b99190613d42565b6114c39190613d59565b6102c48190556102c3839055612710906114de908490613d42565b6114e89190613d59565b6102c4555050565b610cdb3383836121b6565b611503611ac8565b61028f546201000090046001600160a01b03166115535760405162461bcd60e51b815260206004820152600e60248201526d2b30bab63a103737ba1039b2ba1760911b6044820152606401610a65565b33600090815261028e602052604081205490036115b25760405162461bcd60e51b815260206004820152601b60248201527f43616c6c657220646f65736e27742068617665207265776172642e00000000006044820152606401610a65565b60006115bc6116d6565b61028d5433600081815261028e6020526040908190209290925561028f54915163a9059cbb60e01b81526004810191909152602481018390529192506201000090046001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015611630573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116549190613d7b565b50604080518281523360208201527f5dd59f4285b36241394b73f8f7ae03d0290b030a86803cf2562ecf33eeb617bd910160405180910390a1506112c7600161025b55565b6116a33383611b2b565b6116bf5760405162461bcd60e51b8152600401610a6590613c47565b61145884848484612285565b60606109ff826122b8565b61028f5460009061ffff1615806116fb575033600090815261028e6020526040902054155b156117065750600090565b33600090815261028e602052604081205461028d546117259190613d98565b61028f5490915061173a9061ffff1682613d59565b91505090565b60008281526101f5602052604090206001015461175c816119f1565b610c438383611da3565b3360006117738282610d36565b9050610c4381846119fb565b610cdb8160400151604051806020016040528060008152508360600151611817565b6117a961201d565b6001600160a01b03811661180e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a65565b6105c681612078565b60006102c45482108061183057506102c2546101935410155b1561183d575060006118dd565b61184784846123c1565b611853575060006118dd565b61185c846124ee565b60006127106102c354846118709190613d42565b61187a9190613d59565b6102c4546102c3546040805192835260208301879052820183905260608201529091506001600160a01b038616907f66e5f204dadf0b0406343d72ad369d71133c465340700994fed9d5454b0bc1d29060800160405180910390a26102c4555060015b9392505050565b60006001600160e01b03198216630489b56f60e01b148061191557506001600160e01b03198216637965db0b60e01b145b806109ff57506109ff8261259d565b600081815260fd60205260409020546001600160a01b03166105c65760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a65565b600081815260ff6020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119b882611173565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6105c681336125c2565b600082815260fd60205260409020546001600160a01b0316611a765760405162461bcd60e51b815260206004820152602e60248201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60448201526d32bc34b9ba32b73a103a37b5b2b760911b6064820152608401610a65565b60008281526101c360205260409020611a8f8282613df9565b506040518281527ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7906020015b60405180910390a15050565b600261025b5403611b1b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a65565b600261025b55565b600161025b55565b600080611b3783611173565b9050806001600160a01b0316846001600160a01b03161480611b7f57506001600160a01b038082166000908152610100602090815260408083209388168352929052205460ff165b80611ba35750836001600160a01b0316611b9884610b0c565b6001600160a01b0316145b949350505050565b826001600160a01b0316611bbe82611173565b6001600160a01b031614611be45760405162461bcd60e51b8152600401610a6590613eb9565b6001600160a01b038216611c465760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a65565b611c53838383600161261b565b826001600160a01b0316611c6682611173565b6001600160a01b031614611c8c5760405162461bcd60e51b8152600401610a6590613eb9565b600081815260ff6020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260fe855283862080546000190190559087168086528386208054600101905586865260fd90945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b611d26828261145e565b610cdb5760008281526101f5602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611d5f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611dad828261145e565b15610cdb5760008281526101f5602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6105c661201d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611e4657610c43836127e1565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611ea0575060408051601f3d908101601f19168201909252611e9d91810190613efe565b60015b611f035760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a65565b60008051602061416a8339815191528114611f725760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a65565b50610c4383838361287d565b6105c6816128a2565b6000611f92816119f1565b61028f546201000090046001600160a01b031615611fd65761028f54611fd69060008051602061418a833981519152906201000090046001600160a01b0316611740565b61028f805462010000600160b01b031916620100006001600160a01b0385811682029290921792839055610cdb9260008051602061418a8339815191529291900416610d10565b61012d546001600160a01b031633146112c75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610a65565b61012d80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166120f25760405162461bcd60e51b8152600401610a6590613f17565b6120fa6128e4565b6112c7612913565b600054610100900460ff166121295760405162461bcd60e51b8152600401610a6590613f17565b6121338484612942565b61213b612973565b612143612973565b61214b612973565b611458828261299a565b600054610100900460ff1661217c5760405162461bcd60e51b8152600401610a6590613f17565b6112c7612a05565b600054610100900460ff166121ab5760405162461bcd60e51b8152600401610a6590613f17565b6112c7600033612a2c565b816001600160a01b0316836001600160a01b0316036122175760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a65565b6001600160a01b0383811660008181526101006020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b612290848484611bab565b61229c84848484612a36565b6114585760405162461bcd60e51b8152600401610a6590613f62565b60606122c382611924565b60008281526101c36020526040812080546122dd90613be4565b80601f016020809104026020016040519081016040528092919081815260200182805461230990613be4565b80156123565780601f1061232b57610100808354040283529160200191612356565b820191906000526020600020905b81548152906001019060200180831161233957829003601f168201915b50505050509050600061237460408051602081019091526000815290565b90508051600003612386575092915050565b8151156123b85780826040516020016123a0929190613fb4565b60405160208183030381529060405292505050919050565b611ba384612b37565b60006000805160206141d18339815191526123db816119f1565b61022854610100900460ff1680156123fa57506123f78461122f565b15155b1561240857600091506124e7565b60006124146102275490565b905061242561022780546001019055565b61242f8582612baa565b61243981856119fb565b60016102285460ff1660038111156124535761245361373e565b1480612476575060026102285460ff1660038111156124745761247461373e565b145b156124935761249360008051602061414a83398151915286612a2c565b6102285460405182916001600160a01b038816916000917f135ffb3383e06280e062ac5095bbf8faa98517161e596a2536bd98a9a8b64a88916124d99160ff1690613754565b60405180910390a460019250505b5092915050565b60008051602061418a833981519152612506816119f1565b61028d546001600160a01b038316600090815261028e602052604081209190915561028f805461ffff169161253a83613fe3565b91906101000a81548161ffff021916908361ffff160217905550507f567d314b1f4bef0cf41b5eea6a621ebe9b67dfafe183c591176a3efce5ecc0df8261028d54604051611abc9291906001600160a01b03929092168252602082015260400190565b60006001600160e01b03198216637965db0b60e01b14806109ff57506109ff82612bc4565b6125cc828261145e565b610cdb576125d981612be9565b6125e4836020612bfb565b6040516020016125f5929190614004565b60408051601f198184030181529082905262461bcd60e51b8252610a65916004016137cc565b8284836001600160a01b03821615600061264360008051602061414a8339815191523361145e565b905060008215801561265c57506001600160a01b038616155b905060036102285460ff1660038111156126785761267861373e565b0361269f578261269a5760405162461bcd60e51b8152600401610a6590614079565b6127c9565b60006102285460ff1660038111156126b9576126b961373e565b036126f75760008280156126ca5750815b905083806126d55750805b6126f15760405162461bcd60e51b8152600401610a6590614079565b506127c9565b60016102285460ff1660038111156127115761271161373e565b0361277d57600084815260fd60205260408120546001600160a01b03163314801561274f575061274f60008051602061414a8339815191523361145e565b905083806126d557508080156126d55750816126f15760405162461bcd60e51b8152600401610a6590614079565b60026102285460ff1660038111156127975761279761373e565b036127c95782806127ad57508080156127ad5750815b6127c95760405162461bcd60e51b8152600401610a6590614079565b6127d58a8a8a8a612d97565b50505050505050505050565b6001600160a01b0381163b61284e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a65565b60008051602061416a83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b61288683612ecd565b6000825111806128935750805b15610c43576114588383612f0d565b6128ab81612f32565b60008181526101c36020526040902080546128c590613be4565b1590506105c65760008181526101c3602052604081206105c6916136a4565b600054610100900460ff1661290b5760405162461bcd60e51b8152600401610a6590613f17565b6112c7612973565b600054610100900460ff1661293a5760405162461bcd60e51b8152600401610a6590613f17565b6112c7612fd5565b600054610100900460ff166129695760405162461bcd60e51b8152600401610a6590613f17565b610cdb8282613005565b600054610100900460ff166112c75760405162461bcd60e51b8152600401610a6590613f17565b600054610100900460ff166129c15760405162461bcd60e51b8152600401610a6590613f17565b610228805483919060ff191660018360038111156129e1576129e161373e565b0217905550610228805461ff00191661010083151502179055610cdb600033612a2c565b600054610100900460ff16611b235760405162461bcd60e51b8152600401610a6590613f17565b610cdb8282611d1c565b60006001600160a01b0384163b15612b2c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612a7a9033908990889088906004016140b0565b6020604051808303816000875af1925050508015612ab5575060408051601f3d908101601f19168201909252612ab2918101906140e3565b60015b612b12573d808015612ae3576040519150601f19603f3d011682016040523d82523d6000602084013e612ae8565b606091505b508051600003612b0a5760405162461bcd60e51b8152600401610a6590613f62565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611ba3565b506001949350505050565b6060612b4282611924565b6000612b5960408051602081019091526000815290565b90506000815111612b7957604051806020016040528060008152506118dd565b80612b8384613045565b604051602001612b94929190613fb4565b6040516020818303038152906040529392505050565b610cdb8282604051806020016040528060008152506130d8565b60006001600160e01b03198216632483248360e11b14806109ff57506109ff8261310b565b60606109ff6001600160a01b03831660145b60606000612c0a836002613d42565b612c15906002613c34565b67ffffffffffffffff811115612c2d57612c2d613820565b6040519080825280601f01601f191660200182016040528015612c57576020820181803683370190505b509050600360fc1b81600081518110612c7257612c72613d2c565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612ca157612ca1613d2c565b60200101906001600160f81b031916908160001a9053506000612cc5846002613d42565b612cd0906001613c34565b90505b6001811115612d48576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612d0457612d04613d2c565b1a60f81b828281518110612d1a57612d1a613d2c565b60200101906001600160f81b031916908160001a90535060049490941c93612d4181614100565b9050612cd3565b5083156118dd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610a65565b6001811115612e065760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b6064820152608401610a65565b816001600160a01b038516612e6457612e5f816101938054600083815261019460205260408120829055600182018355919091527ffc8af01f449989052b52093a58fc9f42d0b11f0c6dd5dca0463dab62346ccc680155565b612e87565b836001600160a01b0316856001600160a01b031614612e8757612e878582613130565b6001600160a01b038416612ea357612e9e816131d2565b612ec6565b846001600160a01b0316846001600160a01b031614612ec657612ec68482613287565b5050505050565b612ed6816127e1565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606118dd83836040518060600160405280602781526020016141aa602791396132cd565b6000612f3d82611173565b9050612f4d81600084600161261b565b612f5682611173565b600083815260ff6020908152604080832080546001600160a01b03199081169091556001600160a01b03851680855260fe8452828520805460001901905587855260fd909352818420805490911690555192935084927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b600054610100900460ff16612ffc5760405162461bcd60e51b8152600401610a6590613f17565b6112c733612078565b600054610100900460ff1661302c5760405162461bcd60e51b8152600401610a6590613f17565b60fb6130388382613df9565b5060fc610c438282613df9565b6060600061305283613345565b600101905060008167ffffffffffffffff81111561307257613072613820565b6040519080825280601f01601f19166020018201604052801561309c576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846130a657509392505050565b6130e2838361341d565b6130ef6000848484612a36565b610c435760405162461bcd60e51b8152600401610a6590613f62565b60006001600160e01b0319821663780e9d6360e01b14806109ff57506109ff826135b6565b6000600161313d8461122f565b6131479190613d98565b6000838152610192602052604090205490915080821461319d576001600160a01b038416600090815261019160209081526040808320858452825280832054848452818420819055835261019290915290208190555b506000918252610192602090815260408084208490556001600160a01b03909416835261019181528383209183525290812055565b610193546000906131e590600190613d98565b60008381526101946020526040812054610193805493945090928490811061320f5761320f613d2c565b9060005260206000200154905080610193838154811061323157613231613d2c565b6000918252602080832090910192909255828152610194909152604080822084905585825281205561019380548061326b5761326b614117565b6001900381819060005260206000200160009055905550505050565b60006132928361122f565b6001600160a01b0390931660009081526101916020908152604080832086845282528083208590559382526101929052919091209190915550565b6060600080856001600160a01b0316856040516132ea919061412d565b600060405180830381855af49150503d8060008114613325576040519150601f19603f3d011682016040523d82523d6000602084013e61332a565b606091505b509150915061333b86838387613606565b9695505050505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106133845772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef810000000083106133b0576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc1000083106133ce57662386f26fc10000830492506010015b6305f5e10083106133e6576305f5e100830492506008015b61271083106133fa57612710830492506004015b6064831061340c576064830492506002015b600a83106109ff5760010192915050565b6001600160a01b0382166134735760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a65565b600081815260fd60205260409020546001600160a01b0316156134d85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a65565b6134e660008383600161261b565b600081815260fd60205260409020546001600160a01b03161561354b5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a65565b6001600160a01b038216600081815260fe602090815260408083208054600101905584835260fd90915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160e01b031982166380ac58cd60e01b14806135e757506001600160e01b03198216635b5e139f60e01b145b806109ff57506301ffc9a760e01b6001600160e01b03198316146109ff565b6060831561367557825160000361366e576001600160a01b0385163b61366e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a65565b5081611ba3565b611ba3838381511561368a5781518083602001fd5b8060405162461bcd60e51b8152600401610a6591906137cc565b5080546136b090613be4565b6000825580601f106136c0575050565b601f0160209004906000526020600020908101906105c691905b808211156136ee57600081556001016136da565b5090565b6001600160e01b0319811681146105c657600080fd5b60006020828403121561371a57600080fd5b81356118dd816136f2565b60006020828403121561373757600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b602081016004831061377657634e487b7160e01b600052602160045260246000fd5b91905290565b60005b8381101561379757818101518382015260200161377f565b50506000910152565b600081518084526137b881602086016020860161377c565b601f01601f19169290920160200192915050565b6020815260006118dd60208301846137a0565b6001600160a01b03811681146105c657600080fd5b6000806040838503121561380757600080fd5b8235613812816137df565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261384757600080fd5b813567ffffffffffffffff8082111561386257613862613820565b604051601f8301601f19908116603f0116810190828211818310171561388a5761388a613820565b816040528381528660208588010111156138a357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156138d657600080fd5b823567ffffffffffffffff8111156138ed57600080fd5b6138f985828601613836565b95602094909401359450505050565b60008060006060848603121561391d57600080fd5b8335613928816137df565b92506020840135613938816137df565b929592945050506040919091013590565b6000806040838503121561395c57600080fd5b82359150602083013561396e816137df565b809150509250929050565b60006020828403121561398b57600080fd5b81356118dd816137df565b6000608082840312156139a857600080fd5b6040516080810181811067ffffffffffffffff821117156139cb576139cb613820565b8060405250823581526020830135602082015260408301356139ec816137df565b60408201526060928301359281019290925250919050565b60008060408385031215613a1757600080fd5b8235613a22816137df565b9150602083013567ffffffffffffffff811115613a3e57600080fd5b613a4a85828601613836565b9150509250929050565b600080600060608486031215613a6957600080fd5b505081359360208301359350604090920135919050565b80151581146105c657600080fd5b60008060408385031215613aa157600080fd5b8235613aac816137df565b9150602083013561396e81613a80565b60008060008060808587031215613ad257600080fd5b8435613add816137df565b93506020850135613aed816137df565b925060408501359150606085013567ffffffffffffffff811115613b1057600080fd5b613b1c87828801613836565b91505092959194509250565b600060208284031215613b3a57600080fd5b813567ffffffffffffffff811115613b5157600080fd5b611ba384828501613836565b60008060408385031215613b7057600080fd5b8235613b7b816137df565b9150602083013561396e816137df565b600080600060608486031215613ba057600080fd5b8335613bab816137df565b9250602084013567ffffffffffffffff811115613bc757600080fd5b613bd386828701613836565b925050604084013590509250925092565b600181811c90821680613bf857607f821691505b602082108103613c1857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156109ff576109ff613c1e565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176109ff576109ff613c1e565b600082613d7657634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215613d8d57600080fd5b81516118dd81613a80565b818103818111156109ff576109ff613c1e565b601f821115610c4357600081815260208120601f850160051c81016020861015613dd25750805b601f850160051c820191505b81811015613df157828155600101613dde565b505050505050565b815167ffffffffffffffff811115613e1357613e13613820565b613e2781613e218454613be4565b84613dab565b602080601f831160018114613e5c5760008415613e445750858301515b600019600386901b1c1916600185901b178555613df1565b600085815260208120601f198616915b82811015613e8b57888601518255948401946001909101908401613e6c565b5085821015613ea95787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b600060208284031215613f1057600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351613fc681846020880161377c565b835190830190613fda81836020880161377c565b01949350505050565b600061ffff808316818103613ffa57613ffa613c1e565b6001019392505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161403c81601785016020880161377c565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161406d81602884016020880161377c565b01602801949350505050565b6020808252601d908201527f455243353438343a2063616e2774206265207472616e73666572726564000000604082015260600190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061333b908301846137a0565b6000602082840312156140f557600080fd5b81516118dd816136f2565b60008161410f5761410f613c1e565b506000190190565b634e487b7160e01b600052603160045260246000fd5b6000825161413f81846020870161377c565b919091019291505056fe3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcbb788f92e65e1a823e2c502bc4e7f9c3e55531bd56bfc7c0a895fb3ac9eb7716416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c65649f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220b9b256b52b2070f0354c2eae94d67ab240dbaf732f6417c448f0ebf9129f9cc164736f6c63430008130033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is changed."
      },
      "FounderAdded(address,uint256,uint256,uint256,uint256)": {
        "params": {
          "founder": "Address of the founder.",
          "nextTokenPrice": "Price of the next token.",
          "nextTokenPriceMultiplier": "Next token price multiplier in percents.",
          "requiredPrice": "Required price for the token.",
          "tokenPrice": "Price of the token."
        }
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Issued(address,address,uint256,uint8)": {
        "details": "This emit is an add-on to nft's transfer emit in order to distinguish sbt from vanilla nft while providing backward compatibility.",
        "params": {
          "from": "The issuer",
          "to": "The receiver",
          "tokenId": "The id of the issued token"
        }
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {ERC721-_burn}."
      },
      "burnAuth(uint256)": {
        "details": "unassigned tokenIds are invalid, and queries do throw",
        "params": {
          "tokenId": "The identifier for a token."
        }
      },
      "claimReward()": {
        "details": "claim reward for token owner"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "depositReward(uint256)": {
        "details": "deposit reward to the contract to be claimed by token owners",
        "params": {
          "plusReward": "amount of reward to be deposited"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setNextTokenMultiplier(uint256)": {
        "details": "set multiplicator for the next token in percents in case nextTokenPriceMultiplier_ = 13_000 the next price of the token will be: curPrice * 130%",
        "params": {
          "nextTokenPriceMultiplier_": "persent multiplicator"
        }
      },
      "setTokenURI(string)": {
        "details": "set token metadata uri can be used as utility method and custom logic on front-end"
      },
      "setTokenURI(string,uint256)": {
        "details": "set token metadata uri can be used as utility method and custom logic on front-end by owner of the contract in case of end user has a wrong uri or somebody corrupted it"
      },
      "setVault(address)": {
        "details": "set vault"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "tryToMint(address,string,uint256)": {
        "details": "function for mint new SBT token",
        "params": {
          "amount": "holder balance, used as token price",
          "to": "address of user who will receive token",
          "uri": "token metadata uri"
        },
        "returns": {
          "_0": "true if token was minted"
        }
      },
      "upgradeTo(address)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "version()": {
        "returns": {
          "_0": "a version in semantic versioning format"
        }
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      },
      "nextTokenPrice": {
        "details": "return price for the next token"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "FounderAdded(address,uint256,uint256,uint256,uint256)": {
        "notice": "Emit when new token minted and token price updated."
      },
      "Issued(address,address,uint256,uint8)": {
        "notice": "Emitted when a soulbound token is issued."
      },
      "OwnerAdded(address,uint256)": {
        "notice": "Emitted when a new owner is added"
      },
      "RewardClaimed(uint256,address)": {
        "notice": "Emitted reward is claimed by a token owner"
      },
      "RewardDeposited(address,uint256)": {
        "notice": "Emitted when new rewards are deposited"
      }
    },
    "kind": "user",
    "methods": {
      "burnAuth(uint256)": {
        "notice": "provides burn authorization of the token id."
      },
      "depositReward(uint256)": {
        "notice": "only role with BALANCE_UPDATER_ROLE can call this function"
      },
      "rewardIndex()": {
        "notice": "Accumulator of the total earned interest rate since the opening of the token"
      },
      "rewardOwnerIndex(address)": {
        "notice": "The owners' reward indexes for eachas of the last time they accrued"
      },
      "setVault(address)": {
        "notice": "that is mandatory to be set before reward can be claimed"
      },
      "version()": {
        "notice": "Returns the current version of this contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 986,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 989,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 968,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1283,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 17224,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5398,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5855,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2039,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_name",
        "offset": 0,
        "slot": "251",
        "type": "t_string_storage"
      },
      {
        "astId": 2041,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "252",
        "type": "t_string_storage"
      },
      {
        "astId": 2045,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_owners",
        "offset": 0,
        "slot": "253",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2049,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_balances",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2053,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2059,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2961,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "257",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 465,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_owner",
        "offset": 0,
        "slot": "301",
        "type": "t_address"
      },
      {
        "astId": 585,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 17258,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 3126,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "401",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3130,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3133,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_allTokens",
        "offset": 0,
        "slot": "403",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3137,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "404",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3469,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "405",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 3501,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "451",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3645,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "452",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 85,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_roles",
        "offset": 0,
        "slot": "501",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)80_storage)"
      },
      {
        "astId": 380,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "502",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15660,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "551",
        "type": "t_struct(Counter)5405_storage"
      },
      {
        "astId": 15664,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_burnAuth",
        "offset": 0,
        "slot": "552",
        "type": "t_enum(BurnAuth)16240"
      },
      {
        "astId": 15667,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_mintOnce",
        "offset": 1,
        "slot": "552",
        "type": "t_bool"
      },
      {
        "astId": 15672,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "553",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1425,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "_status",
        "offset": 0,
        "slot": "603",
        "type": "t_uint256"
      },
      {
        "astId": 1494,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "604",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 16373,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "rewardIndex",
        "offset": 0,
        "slot": "653",
        "type": "t_uint256"
      },
      {
        "astId": 16378,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "rewardOwnerIndex",
        "offset": 0,
        "slot": "654",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16381,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "numberCoins",
        "offset": 0,
        "slot": "655",
        "type": "t_uint16"
      },
      {
        "astId": 16384,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "vault",
        "offset": 2,
        "slot": "655",
        "type": "t_contract(Vault)9991"
      },
      {
        "astId": 16389,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "656",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 16891,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "maxCountTokens",
        "offset": 0,
        "slot": "706",
        "type": "t_uint256"
      },
      {
        "astId": 16893,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "nextTokenPriceMultiplier",
        "offset": 0,
        "slot": "707",
        "type": "t_uint256"
      },
      {
        "astId": 16896,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "nextTokenPrice",
        "offset": 0,
        "slot": "708",
        "type": "t_uint256"
      },
      {
        "astId": 16901,
        "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
        "label": "__gap",
        "offset": 0,
        "slot": "709",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Vault)9991": {
        "encoding": "inplace",
        "label": "contract Vault",
        "numberOfBytes": "20"
      },
      "t_enum(BurnAuth)16240": {
        "encoding": "inplace",
        "label": "enum IERC5484.BurnAuth",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)80_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)80_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5405_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 5404,
            "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)80_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 77,
            "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 79,
            "contract": "src/tokens/VaultFounderToken.sol:VaultFounderToken",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}