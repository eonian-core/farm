{
  "address": "0xc3e8AD67C9B1EB8A764B4Df71b366EFdf1c1B959",
  "abi": [
    {
      "inputs": [],
      "name": "CannotWorkNow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaybleWorkNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_givenTime",
          "type": "uint256"
        }
      ],
      "name": "TimeMinimumBetweenExecutionsIncorrect",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "worker",
          "type": "address"
        }
      ],
      "name": "Worked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allowWorkNow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canWork",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canWorkResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ops",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minimumBetweenExecutions",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isPrepayd",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPrepayd",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastWorkTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumBetweenExecutions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "contract IOps",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payableWork",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_canWorkResult",
          "type": "bool"
        }
      ],
      "name": "setCanWorkResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isPrepayd",
          "type": "bool"
        }
      ],
      "name": "setIsPrepayd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "setMinimumBetweenExecutions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeFromLastExecution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "work",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "workMethodCalledCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd47da4eafa32e287ea52dd76d1f3178a53cb5f9c92c56c314fbde69308d38282",
  "receipt": {
    "to": null,
    "from": "0xC6B0cAF13279762a98045b37654998fbCFEf97F7",
    "contractAddress": "0xc3e8AD67C9B1EB8A764B4Df71b366EFdf1c1B959",
    "transactionIndex": 12,
    "gasUsed": "1871453",
    "logsBloom": "0x
    "blockHash": "0x6af55e252f5a89c9ec071a53ebeed206c9979f9b554708b1aeb87108bd94f8a0",
    "transactionHash": "0xd47da4eafa32e287ea52dd76d1f3178a53cb5f9c92c56c314fbde69308d38282",
    "logs": [],
    "blockNumber": 12700926,
    "cumulativeGasUsed": "6247804",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7972876429fa7de31a880163aa5ac5a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CannotWorkNow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaybleWorkNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_givenTime\",\"type\":\"uint256\"}],\"name\":\"TimeMinimumBetweenExecutionsIncorrect\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"worker\",\"type\":\"address\"}],\"name\":\"Worked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allowWorkNow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWork\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWorkResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ops\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBetweenExecutions\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isPrepayd\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPrepayd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastWorkTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBetweenExecutions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"contract IOps\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payableWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_canWorkResult\",\"type\":\"bool\"}],\"name\":\"setCanWorkResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isPrepayd\",\"type\":\"bool\"}],\"name\":\"setIsPrepayd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setMinimumBetweenExecutions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeFromLastExecution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"workMethodCalledCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"canWork()\":{\"details\":\"Will be executed by keeper and before `work` method execution.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"timeFromLastExecution()\":{\"returns\":{\"_0\":\"seconds from last execution in a range of 900 seconds\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"work()\":{\"details\":\"possible do not use `nonReentrant` modifier if we have isTimePassFromLastExecution check and refreshLastWorkTime at start  as it inside `onlyWhenCanWork` modifier.  But do not will delete it as `canWork` can be overriden.  Possible to optimize this at the end contact\"}},\"version\":1},\"userdoc\":{\"errors\":{\"CannotWorkNow()\":[{\"notice\":\"Someone tried to execute work function while `canWork` is `false`\"}],\"PaybleWorkNotAllowed()\":[{\"notice\":\"Contract expect work will be prepayd, so it cannot pay for work\"}],\"TimeMinimumBetweenExecutionsIncorrect(uint256)\":[{\"notice\":\"Given time minimum between execution must be greater then 1000\"}]},\"events\":{\"Worked(address)\":{\"notice\":\"Job work function was executed by worker bot\"}},\"kind\":\"user\",\"methods\":{\"canWork()\":{\"notice\":\"If work can be executed by keeper at this moment returns true\"},\"checker()\":{\"notice\":\"Resolver checker which say if work can be performed and with which params.\"},\"isPrepayd()\":{\"notice\":\"If job is preaped, then it not will try to pay on executed work.\"},\"lastWorkTime()\":{\"notice\":\"Timestamp of last work execution block in seconds.\"},\"minimumBetweenExecutions()\":{\"notice\":\"Mininmal time which must pass between executions of the job in seconds. Better set hours, but at least set to greater then 900 seconds,  node opperators able to manipulate timestamp in 900 seconds range, on some blockchains maybe bigger.\"},\"payableWork()\":{\"notice\":\"Bot will call this method when `checker` returns `true`. Will pay caller `work` method stay as it is, to allow call id of-chain\"},\"timeFromLastExecution()\":{\"notice\":\"Time which pass from last exection\"},\"work()\":{\"notice\":\"Important work which will be executed by keeper.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/automation/example/SimpleGelatoJob.sol\":\"SimpleGelatoJob\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"src/automation/GelatoJobAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport { Job } from './Job.sol';\\nimport {IResolver} from './gelato/IResolver.sol';\\nimport {OpsReady} from './gelato/OpsReady.sol';\\n\\n/// @notice Contract expect work will be prepayd, so it cannot pay for work\\nerror PaybleWorkNotAllowed();\\n\\n/// @title Implementation of mixin which add support for Gelato (keepers operator)\\nabstract contract GelatoJobAdapter is Job, IResolver, OpsReady {\\n\\n    /// @notice If job is preaped, then it not will try to pay on executed work.\\n    bool public isPrepayd;\\n\\n    /**\\n     * @notice Constructor of Job adapter contract.\\n     * @param _minimumBetweenExecutions - required time which must pass between executions of the job in seconds.\\n     */\\n    function __GelatoJobAdapter_init(address _ops, uint256 _minimumBetweenExecutions, bool _isPrepayd) internal onlyInitializing {\\n        __OpsReady_init(_ops);\\n        __Job_init(_minimumBetweenExecutions);\\n\\n        _isPrepayd = isPrepayd;\\n    }\\n\\n\\n    /// @notice Resolver checker which say if work can be performed and with which params.\\n    function checker() public view returns (bool canExec, bytes memory execPayload) {\\n        canExec = canWork();\\n\\n        execPayload = abi.encodeWithSelector(isPrepayd ? this.work.selector : this.payableWork.selector);\\n    }\\n\\n    /// @notice Bot will call this method when `checker` returns `true`.\\n    /// Will pay caller\\n    /// `work` method stay as it is, to allow call id of-chain\\n    function payableWork() public onlyOps {\\n        if(isPrepayd){\\n            revert PaybleWorkNotAllowed();\\n        }\\n        \\n        super.work();\\n\\n        // Check -> Effect -> Interaction\\n        // To prevent exploits pay only at the end of operations\\n        _payGalatoFee();\\n    }\\n}\",\"keccak256\":\"0x9b46ce5ce4774c9077cadf086af6e96c74ab9c7dc531d440d5aa5b5d78030fb7\",\"license\":\"MIT\"},\"src/automation/Job.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\n/// Someone tried to execute work function while `canWork` is `false`\\nerror CannotWorkNow(); \\n\\n/// Given time minimum between execution must be greater then 1000\\nerror TimeMinimumBetweenExecutionsIncorrect(uint256 _givenTime);\\n\\n/// @title Abstract contract by implementation of which \\n///  possible to make child contract support of one of keeper providers.\\n/// @notice This contract is only define interface, \\n///  for add support of specific provider need add specific mixin contract.\\nabstract contract Job is Initializable, ContextUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    /// Job work function was executed by worker bot\\n    event Worked(address indexed worker);\\n\\n    /// @notice Timestamp of last work execution block in seconds.\\n    /// @dev Logic of checking and manupulating execution must be only in this contract (not in child) \\n    ///  to control timestamp dependce vularability.\\n    /// Important: Expect all timestamp can be adgasted by miners.\\n    /// More info at: https://www.getsecureworld.com/blog/what-is-timestamp-dependence-vulnerability/\\n    uint256 public lastWorkTime;\\n\\n    /// @notice Mininmal time which must pass between executions of the job in seconds.\\n    /// Better set hours, but at least set to greater then 900 seconds, \\n    /// node opperators able to manipulate timestamp in 900 seconds range, on some blockchains maybe bigger.\\n    uint256 public minimumBetweenExecutions;\\n\\n    // ------------------------------------------ Constructors ------------------------------------------\\n\\n    /**\\n     * @notice Constructor of Job contract.\\n     * @param _minimumBetweenExecutions - required time which must pass between executions of the job in seconds. \\n     *  Set in hours to prevent block timestamp vularability\\n     */\\n    function __Job_init(uint256 _minimumBetweenExecutions) internal onlyInitializing {\\n        __Context_init();\\n        __ReentrancyGuard_init();\\n\\n        _setMinimumBetweenExecutions(_minimumBetweenExecutions);\\n        // Not will set lastWorkTime to allow first work immediately after contract deploy\\n    }\\n\\n    // ------------------------------------------ Public methods  ------------------------------------------\\n\\n    /// @notice If work can be executed by keeper at this moment returns true\\n    /// @dev Will be executed by keeper and before `work` method execution.\\n    function canWork() public view returns (bool) {\\n        return isTimePassFromLastExecution(minimumBetweenExecutions) && _canWork();\\n    }\\n\\n    /// @notice allow execution only if `canWork` return true\\n    modifier onlyWhenCanWork() { \\n        if(!canWork()){\\n            revert CannotWorkNow();\\n        }\\n\\n        // refresh execution works like `nonReentrant` \\n        // if we have `isTimePassFromLastExecution` inside `canWork`\\n        _refreshLastWorkTime();\\n\\n        _;\\n    }\\n\\n    /// @notice Important work which will be executed by keeper.\\n    /// @dev possible do not use `nonReentrant` modifier if we have isTimePassFromLastExecution check and refreshLastWorkTime at start\\n    ///  as it inside `onlyWhenCanWork` modifier.\\n    ///  But do not will delete it as `canWork` can be overriden.\\n    ///  Possible to optimize this at the end contact\\n    function work() public nonReentrant onlyWhenCanWork {\\n        _work();\\n\\n        emit Worked(msg.sender);\\n    }\\n\\n    // ------------------------------------------ Time check logic ------------------------------------------\\n\\n    /// @notice Set minimum time between executions.\\n    /// @param time - required time which must pass between executions of the job in seconds.\\n    /// Set in hours to prevent block timestamp vularability\\n    function _setMinimumBetweenExecutions(uint256 time) internal {\\n        if(time <= 1000){\\n            revert TimeMinimumBetweenExecutionsIncorrect(time);\\n        }\\n\\n        minimumBetweenExecutions = time;\\n    }\\n\\n    /// @notice Time which pass from last exection\\n    /// @return seconds from last execution in a range of 900 seconds\\n    function timeFromLastExecution() public view returns (uint256) {\\n        // lastWorkTime will be zero before first execution\\n        return block.timestamp - lastWorkTime;\\n    }\\n\\n    /// @notice Set time of last execution to current block\\n    function _refreshLastWorkTime() internal {\\n        lastWorkTime = block.timestamp;\\n    }\\n\\n    /// @notice Check if given time from last execution is passed\\n    /// @param second - amount of time which mast pass from last execution \\n    /// @return true if enough time pass\\n    function isTimePassFromLastExecution(uint256 second) internal view returns (bool){\\n        return timeFromLastExecution() > second;\\n    }\\n\\n    // ------------------------------------------ Busines methods to override  ------------------------------\\n\\n    /// @notice Method which will be executed by keeper\\n    function _work() internal virtual;\\n\\n    /// @notice Method which identify if work can be executed at this moment.\\n    /// @dev Will be executed by keeper and before `work` method execution.\\n    /// @return true if `work` method can be called.\\n    function _canWork() internal virtual view returns (bool);\\n\\n}\",\"keccak256\":\"0xb9cf207debf35c22922aebdf1f76464bab54ec14adeefd63892344fde469b146\",\"license\":\"MIT\"},\"src/automation/example/SimpleGelatoJob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.10;\\n\\nimport {GelatoJobAdapter} from \\\"../GelatoJobAdapter.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract SimpleGelatoJob is GelatoJobAdapter, OwnableUpgradeable {\\n    uint256 public workMethodCalledCounter;\\n    bool public canWorkResult = false;\\n\\n    // allow sending eth to the test contract\\n    receive() external payable {}\\n\\n    function initialize(\\n        address _ops,\\n        uint256 _minimumBetweenExecutions,\\n        bool _isPrepayd\\n    ) public initializer {\\n        __GelatoJobAdapter_init(_ops, _minimumBetweenExecutions, _isPrepayd);\\n\\n        __Ownable_init();\\n    }\\n\\n    function _work() internal override {\\n        workMethodCalledCounter++;\\n    }\\n\\n    function _canWork() internal view override returns (bool) {\\n        return canWorkResult;\\n    }\\n\\n    function setCanWorkResult(bool _canWorkResult) public onlyOwner {\\n        canWorkResult = _canWorkResult;\\n    }\\n\\n    function setMinimumBetweenExecutions(uint256 _time) public onlyOwner {\\n        _setMinimumBetweenExecutions(_time);\\n    }\\n\\n    function setIsPrepayd(bool _isPrepayd) public onlyOwner {\\n        isPrepayd = _isPrepayd;\\n    }\\n\\n    function allowWorkNow() public onlyOwner {\\n        lastWorkTime = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0b907ba50381fc705bc80e903aaed14f727043c8d3a74e292297e842b0f24c24\",\"license\":\"MIT\"},\"src/automation/gelato/BackCombatibleTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// Based of https://github.com/gelatodigital/ops/blob/9a9cde6ab2f1b132b949f9244fd59a1de4da4123/contracts/vendor/gelato/FGelato.sol\\n\\n/// @notice Library which support add support of transfers in ERC20 and native tokens together.\\nlibrary BackCombatibleTransfer {\\n    \\n    address constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice Backcombatible transfer to given address, will use ERC20 transfer if given token is ERC20.\\n    function backCombatibleTransfer(address payable to, address paymentToken, uint256 amount) internal {\\n        if (paymentToken == ETH) {\\n            safeNativeTransfer(to, amount);\\n            return;\\n        } \\n\\n        SafeERC20.safeTransfer(IERC20(paymentToken), to, amount);\\n    }\\n\\n    /// @notice Native token transfer, which check `call` result.\\n    function safeNativeTransfer(address payable to, uint256 amount) internal {\\n        // Not use `transfer` or `send` as they considered as bad praqctice after Istanbul hardfork.\\n        (bool success, ) = to.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Native transfer failed\\\");\\n    }\\n\\n}\",\"keccak256\":\"0x3c1b4b6764c4feb4fa54bc201b60044300566e49f9f2c61227ef53a396c43895\",\"license\":\"UNLICENSED\"},\"src/automation/gelato/IOps.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// Based on https://github.com/gelatodigital/ops\\ninterface IOps {\\n    function gelato() external view returns (address payable);\\n    function getFeeDetails() external view returns (uint256, address);\\n}\",\"keccak256\":\"0xfc98067aecf72b475420a813826b314089e2703e2b9c07a6a1c75300caf90958\",\"license\":\"MIT\"},\"src/automation/gelato/IResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// Copy of https://github.com/gelatodigital/ops/blob/9a9cde6ab2f1b132b949f9244fd59a1de4da4123/contracts/interfaces/IResolver.sol\\ninterface IResolver {\\n    function checker()\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload);\\n}\",\"keccak256\":\"0xd6203da6fa3428da43c6a00b8949e98e99bdbb9feb73a113f84946b0ea74d72c\",\"license\":\"MIT\"},\"src/automation/gelato/OpsReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.12;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport {IOps} from './IOps.sol';\\nimport {BackCombatibleTransfer} from './BackCombatibleTransfer.sol';\\n\\n\\n/// Based on https://github.com/gelatodigital/ops/blob/9a9cde6ab2f1b132b949f9244fd59a1de4da4123/contracts/vendor/gelato/OpsReady.sol\\n/// @notice Give basic methods to pay for Gelato operations.\\nabstract contract OpsReady is Initializable {\\n\\n    IOps public ops;\\n    address payable public gelato;\\n\\n    using BackCombatibleTransfer for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    modifier onlyOps() {\\n        require(msg.sender == address(ops), \\\"OpsReady: onlyOps\\\");\\n        _;\\n    }\\n\\n    function __OpsReady_init(address _ops) internal onlyInitializing {\\n        ops = IOps(_ops);\\n        gelato = ops.gelato();\\n    }\\n\\n    /// @notice Will pay bot for executed task through galato\\n    function _payGalatoFee() internal {\\n        (uint256 fee, address feeToken) = ops.getFeeDetails();\\n\\n        gelato.backCombatibleTransfer(feeToken, fee);\\n    }\\n}\",\"keccak256\":\"0x0b9187cf80bc1921a055cc000f799e6d4a90160ce7c788d4fd260ac0373d3ffd\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526000609c60006101000a81548160ff02191690831515021790555034801561002b57600080fd5b506121048061003b6000396000f3fe6080604052600436106101235760003560e01c80638da5cb5b116100a0578063cf5303cf11610064578063cf5303cf1461035c578063e70abe9214610388578063eb678214146103b3578063f0bdc772146103de578063f2fde38b146104095761012a565b80638da5cb5b1461028957806391b00bd9146102b4578063990bb4e9146102df578063a37b32991461030a578063a91eadd2146103335761012a565b806347f76df2116100e757806347f76df2146101da57806353c309de14610205578063573ea5751461021c578063635005d614610247578063715018a6146102725761012a565b8063076301721461012f57806312b6cbbf1461014657806330da53c21461016f578063322e9f0414610198578063334e221f146101af5761012a565b3661012a57005b600080fd5b34801561013b57600080fd5b50610144610432565b005b34801561015257600080fd5b5061016d6004803603810190610168919061152a565b610444565b005b34801561017b57600080fd5b50610196600480360381019061019191906115ed565b610458565b005b3480156101a457600080fd5b506101ad6105a4565b005b3480156101bb57600080fd5b506101c461068c565b6040516101d1919061164f565b60405180910390f35b3480156101e657600080fd5b506101ef61069f565b6040516101fc9190611679565b60405180910390f35b34801561021157600080fd5b5061021a6106a5565b005b34801561022857600080fd5b5061023161078e565b60405161023e91906116b5565b60405180910390f35b34801561025357600080fd5b5061025c6107b4565b6040516102699190611679565b60405180910390f35b34801561027e57600080fd5b506102876107ba565b005b34801561029557600080fd5b5061029e6107ce565b6040516102ab91906116df565b60405180910390f35b3480156102c057600080fd5b506102c96107f8565b6040516102d69190611679565b60405180910390f35b3480156102eb57600080fd5b506102f461080d565b604051610301919061164f565b60405180910390f35b34801561031657600080fd5b50610331600480360381019061032c91906116fa565b610820565b005b34801561033f57600080fd5b5061035a600480360381019061035591906116fa565b610845565b005b34801561036857600080fd5b5061037161086a565b60405161037f9291906117c0565b60405180910390f35b34801561039457600080fd5b5061039d61090b565b6040516103aa919061184f565b60405180910390f35b3480156103bf57600080fd5b506103c8610931565b6040516103d5919061164f565b60405180910390f35b3480156103ea57600080fd5b506103f3610953565b6040516104009190611679565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b919061186a565b610959565b005b61043a6109dc565b6000606581905550565b61044c6109dc565b61045581610a5a565b50565b60008060019054906101000a900460ff161590508080156104895750600160008054906101000a900460ff1660ff16105b806104b6575061049830610aaa565b1580156104b55750600160008054906101000a900460ff1660ff16145b5b6104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec9061191a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610532576001600060016101000a81548160ff0219169083151502179055505b61053d848484610acd565b610545610b45565b801561059e5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516105959190611982565b60405180910390a15b50505050565b6002603354036105e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e0906119e9565b60405180910390fd5b60026033819055506105f9610931565b61062f576040517f1ca3d48400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610637610b9e565b61063f610ba7565b3373ffffffffffffffffffffffffffffffffffffffff167f8065c96ce68645eb5e1342fb74a5b4646b6712a1bb6a5e86280c1526eca8d25660405160405180910390a26001603381905550565b609c60009054906101000a900460ff1681565b60665481565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072c90611a55565b60405180910390fd5b606860149054906101000a900460ff161561077c576040517fed54334600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107846105a4565b61078c610bc1565b565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60655481565b6107c26109dc565b6107cc6000610ca9565b565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606554426108089190611aa4565b905090565b606860149054906101000a900460ff1681565b6108286109dc565b80606860146101000a81548160ff02191690831515021790555050565b61084d6109dc565b80609c60006101000a81548160ff02191690831515021790555050565b60006060610876610931565b9150606860149054906101000a900460ff16610899576353c309de60e01b6108a2565b63322e9f0460e01b5b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509091565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061093e606654610d6f565b801561094e575061094d610d82565b5b905090565b609b5481565b6109616109dc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c790611b4a565b60405180910390fd5b6109d981610ca9565b50565b6109e4610d99565b73ffffffffffffffffffffffffffffffffffffffff16610a026107ce565b73ffffffffffffffffffffffffffffffffffffffff1614610a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4f90611bb6565b60405180910390fd5b565b6103e88111610aa057806040517f034b4ee1000000000000000000000000000000000000000000000000000000008152600401610a979190611679565b60405180910390fd5b8060668190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1390611c48565b60405180910390fd5b610b2583610da1565b610b2e82610f05565b606860149054906101000a900460ff169050505050565b600060019054906101000a900460ff16610b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8b90611c48565b60405180910390fd5b610b9c610f70565b565b42606581905550565b609b6000815480929190610bba90611c68565b9190505550565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611cda565b91509150610ca58183606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610fd19092919063ffffffff16565b5050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081610d7a6107f8565b119050919050565b6000609c60009054906101000a900460ff16905090565b600033905090565b600060019054906101000a900460ff16610df0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de790611c48565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190611d46565b606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff16610f54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4b90611c48565b60405180910390fd5b610f5c611038565b610f64611089565b610f6d81610a5a565b50565b600060019054906101000a900460ff16610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb690611c48565b60405180910390fd5b610fcf610fca610d99565b610ca9565b565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110275761102283826110e2565b611033565b611032828483611193565b5b505050565b600060019054906101000a900460ff16611087576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107e90611c48565b60405180910390fd5b565b600060019054906101000a900460ff166110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf90611c48565b60405180910390fd5b6110e0611219565b565b60008273ffffffffffffffffffffffffffffffffffffffff168260405161110890611da4565b60006040518083038185875af1925050503d8060008114611145576040519150601f19603f3d011682016040523d82523d6000602084013e61114a565b606091505b505090508061118e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118590611e05565b60405180910390fd5b505050565b6112148363a9059cbb60e01b84846040516024016111b2929190611e25565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611272565b505050565b600060019054906101000a900460ff16611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f90611c48565b60405180910390fd5b6001603381905550565b60006112d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113399092919063ffffffff16565b905060008151111561133457808060200190518101906112f49190611e63565b611333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132a90611f02565b60405180910390fd5b5b505050565b60606113488484600085611351565b90509392505050565b606082471015611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138d90611f94565b60405180910390fd5b61139f85611465565b6113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d590612000565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114079190612051565b60006040518083038185875af1925050503d8060008114611444576040519150601f19603f3d011682016040523d82523d6000602084013e611449565b606091505b5091509150611459828286611488565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611498578290506114e8565b6000835111156114ab5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114df91906120ac565b60405180910390fd5b9392505050565b600080fd5b6000819050919050565b611507816114f4565b811461151257600080fd5b50565b600081359050611524816114fe565b92915050565b6000602082840312156115405761153f6114ef565b5b600061154e84828501611515565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061158282611557565b9050919050565b61159281611577565b811461159d57600080fd5b50565b6000813590506115af81611589565b92915050565b60008115159050919050565b6115ca816115b5565b81146115d557600080fd5b50565b6000813590506115e7816115c1565b92915050565b600080600060608486031215611606576116056114ef565b5b6000611614868287016115a0565b935050602061162586828701611515565b9250506040611636868287016115d8565b9150509250925092565b611649816115b5565b82525050565b60006020820190506116646000830184611640565b92915050565b611673816114f4565b82525050565b600060208201905061168e600083018461166a565b92915050565b600061169f82611557565b9050919050565b6116af81611694565b82525050565b60006020820190506116ca60008301846116a6565b92915050565b6116d981611577565b82525050565b60006020820190506116f460008301846116d0565b92915050565b6000602082840312156117105761170f6114ef565b5b600061171e848285016115d8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611761578082015181840152602081019050611746565b83811115611770576000848401525b50505050565b6000601f19601f8301169050919050565b600061179282611727565b61179c8185611732565b93506117ac818560208601611743565b6117b581611776565b840191505092915050565b60006040820190506117d56000830185611640565b81810360208301526117e78184611787565b90509392505050565b6000819050919050565b600061181561181061180b84611557565b6117f0565b611557565b9050919050565b6000611827826117fa565b9050919050565b60006118398261181c565b9050919050565b6118498161182e565b82525050565b60006020820190506118646000830184611840565b92915050565b6000602082840312156118805761187f6114ef565b5b600061188e848285016115a0565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611904602e83611897565b915061190f826118a8565b604082019050919050565b60006020820190508181036000830152611933816118f7565b9050919050565b6000819050919050565b600060ff82169050919050565b600061196c6119676119628461193a565b6117f0565b611944565b9050919050565b61197c81611951565b82525050565b60006020820190506119976000830184611973565b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006119d3601f83611897565b91506119de8261199d565b602082019050919050565b60006020820190508181036000830152611a02816119c6565b9050919050565b7f4f707352656164793a206f6e6c794f7073000000000000000000000000000000600082015250565b6000611a3f601183611897565b9150611a4a82611a09565b602082019050919050565b60006020820190508181036000830152611a6e81611a32565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611aaf826114f4565b9150611aba836114f4565b925082821015611acd57611acc611a75565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611b34602683611897565b9150611b3f82611ad8565b604082019050919050565b60006020820190508181036000830152611b6381611b27565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611ba0602083611897565b9150611bab82611b6a565b602082019050919050565b60006020820190508181036000830152611bcf81611b93565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611c32602b83611897565b9150611c3d82611bd6565b604082019050919050565b60006020820190508181036000830152611c6181611c25565b9050919050565b6000611c73826114f4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ca557611ca4611a75565b5b600182019050919050565b600081519050611cbf816114fe565b92915050565b600081519050611cd481611589565b92915050565b60008060408385031215611cf157611cf06114ef565b5b6000611cff85828601611cb0565b9250506020611d1085828601611cc5565b9150509250929050565b611d2381611694565b8114611d2e57600080fd5b50565b600081519050611d4081611d1a565b92915050565b600060208284031215611d5c57611d5b6114ef565b5b6000611d6a84828501611d31565b91505092915050565b600081905092915050565b50565b6000611d8e600083611d73565b9150611d9982611d7e565b600082019050919050565b6000611daf82611d81565b9150819050919050565b7f4e6174697665207472616e73666572206661696c656400000000000000000000600082015250565b6000611def601683611897565b9150611dfa82611db9565b602082019050919050565b60006020820190508181036000830152611e1e81611de2565b9050919050565b6000604082019050611e3a60008301856116d0565b611e47602083018461166a565b9392505050565b600081519050611e5d816115c1565b92915050565b600060208284031215611e7957611e786114ef565b5b6000611e8784828501611e4e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611eec602a83611897565b9150611ef782611e90565b604082019050919050565b60006020820190508181036000830152611f1b81611edf565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611f7e602683611897565b9150611f8982611f22565b604082019050919050565b60006020820190508181036000830152611fad81611f71565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611fea601d83611897565b9150611ff582611fb4565b602082019050919050565b6000602082019050818103600083015261201981611fdd565b9050919050565b600061202b82611727565b6120358185611d73565b9350612045818560208601611743565b80840191505092915050565b600061205d8284612020565b915081905092915050565b600081519050919050565b600061207e82612068565b6120888185611897565b9350612098818560208601611743565b6120a181611776565b840191505092915050565b600060208201905081810360008301526120c68184612073565b90509291505056fea2646970667358221220bbb13070fc1e100f5f129121da2fe021d3b9ab7bec97bbfd5a0198885631e80e64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101235760003560e01c80638da5cb5b116100a0578063cf5303cf11610064578063cf5303cf1461035c578063e70abe9214610388578063eb678214146103b3578063f0bdc772146103de578063f2fde38b146104095761012a565b80638da5cb5b1461028957806391b00bd9146102b4578063990bb4e9146102df578063a37b32991461030a578063a91eadd2146103335761012a565b806347f76df2116100e757806347f76df2146101da57806353c309de14610205578063573ea5751461021c578063635005d614610247578063715018a6146102725761012a565b8063076301721461012f57806312b6cbbf1461014657806330da53c21461016f578063322e9f0414610198578063334e221f146101af5761012a565b3661012a57005b600080fd5b34801561013b57600080fd5b50610144610432565b005b34801561015257600080fd5b5061016d6004803603810190610168919061152a565b610444565b005b34801561017b57600080fd5b50610196600480360381019061019191906115ed565b610458565b005b3480156101a457600080fd5b506101ad6105a4565b005b3480156101bb57600080fd5b506101c461068c565b6040516101d1919061164f565b60405180910390f35b3480156101e657600080fd5b506101ef61069f565b6040516101fc9190611679565b60405180910390f35b34801561021157600080fd5b5061021a6106a5565b005b34801561022857600080fd5b5061023161078e565b60405161023e91906116b5565b60405180910390f35b34801561025357600080fd5b5061025c6107b4565b6040516102699190611679565b60405180910390f35b34801561027e57600080fd5b506102876107ba565b005b34801561029557600080fd5b5061029e6107ce565b6040516102ab91906116df565b60405180910390f35b3480156102c057600080fd5b506102c96107f8565b6040516102d69190611679565b60405180910390f35b3480156102eb57600080fd5b506102f461080d565b604051610301919061164f565b60405180910390f35b34801561031657600080fd5b50610331600480360381019061032c91906116fa565b610820565b005b34801561033f57600080fd5b5061035a600480360381019061035591906116fa565b610845565b005b34801561036857600080fd5b5061037161086a565b60405161037f9291906117c0565b60405180910390f35b34801561039457600080fd5b5061039d61090b565b6040516103aa919061184f565b60405180910390f35b3480156103bf57600080fd5b506103c8610931565b6040516103d5919061164f565b60405180910390f35b3480156103ea57600080fd5b506103f3610953565b6040516104009190611679565b60405180910390f35b34801561041557600080fd5b50610430600480360381019061042b919061186a565b610959565b005b61043a6109dc565b6000606581905550565b61044c6109dc565b61045581610a5a565b50565b60008060019054906101000a900460ff161590508080156104895750600160008054906101000a900460ff1660ff16105b806104b6575061049830610aaa565b1580156104b55750600160008054906101000a900460ff1660ff16145b5b6104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec9061191a565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610532576001600060016101000a81548160ff0219169083151502179055505b61053d848484610acd565b610545610b45565b801561059e5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860016040516105959190611982565b60405180910390a15b50505050565b6002603354036105e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e0906119e9565b60405180910390fd5b60026033819055506105f9610931565b61062f576040517f1ca3d48400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610637610b9e565b61063f610ba7565b3373ffffffffffffffffffffffffffffffffffffffff167f8065c96ce68645eb5e1342fb74a5b4646b6712a1bb6a5e86280c1526eca8d25660405160405180910390a26001603381905550565b609c60009054906101000a900460ff1681565b60665481565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072c90611a55565b60405180910390fd5b606860149054906101000a900460ff161561077c576040517fed54334600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107846105a4565b61078c610bc1565b565b606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60655481565b6107c26109dc565b6107cc6000610ca9565b565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000606554426108089190611aa4565b905090565b606860149054906101000a900460ff1681565b6108286109dc565b80606860146101000a81548160ff02191690831515021790555050565b61084d6109dc565b80609c60006101000a81548160ff02191690831515021790555050565b60006060610876610931565b9150606860149054906101000a900460ff16610899576353c309de60e01b6108a2565b63322e9f0460e01b5b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090509091565b606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600061093e606654610d6f565b801561094e575061094d610d82565b5b905090565b609b5481565b6109616109dc565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c790611b4a565b60405180910390fd5b6109d981610ca9565b50565b6109e4610d99565b73ffffffffffffffffffffffffffffffffffffffff16610a026107ce565b73ffffffffffffffffffffffffffffffffffffffff1614610a58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4f90611bb6565b60405180910390fd5b565b6103e88111610aa057806040517f034b4ee1000000000000000000000000000000000000000000000000000000008152600401610a979190611679565b60405180910390fd5b8060668190555050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610b1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1390611c48565b60405180910390fd5b610b2583610da1565b610b2e82610f05565b606860149054906101000a900460ff169050505050565b600060019054906101000a900460ff16610b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8b90611c48565b60405180910390fd5b610b9c610f70565b565b42606581905550565b609b6000815480929190610bba90611c68565b9190505550565b600080606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190611cda565b91509150610ca58183606860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610fd19092919063ffffffff16565b5050565b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081610d7a6107f8565b119050919050565b6000609c60009054906101000a900460ff16905090565b600033905090565b600060019054906101000a900460ff16610df0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de790611c48565b60405180910390fd5b80606760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec29190611d46565b606860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060019054906101000a900460ff16610f54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4b90611c48565b60405180910390fd5b610f5c611038565b610f64611089565b610f6d81610a5a565b50565b600060019054906101000a900460ff16610fbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb690611c48565b60405180910390fd5b610fcf610fca610d99565b610ca9565b565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110275761102283826110e2565b611033565b611032828483611193565b5b505050565b600060019054906101000a900460ff16611087576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107e90611c48565b60405180910390fd5b565b600060019054906101000a900460ff166110d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110cf90611c48565b60405180910390fd5b6110e0611219565b565b60008273ffffffffffffffffffffffffffffffffffffffff168260405161110890611da4565b60006040518083038185875af1925050503d8060008114611145576040519150601f19603f3d011682016040523d82523d6000602084013e61114a565b606091505b505090508061118e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118590611e05565b60405180910390fd5b505050565b6112148363a9059cbb60e01b84846040516024016111b2929190611e25565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611272565b505050565b600060019054906101000a900460ff16611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f90611c48565b60405180910390fd5b6001603381905550565b60006112d4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166113399092919063ffffffff16565b905060008151111561133457808060200190518101906112f49190611e63565b611333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132a90611f02565b60405180910390fd5b5b505050565b60606113488484600085611351565b90509392505050565b606082471015611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138d90611f94565b60405180910390fd5b61139f85611465565b6113de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d590612000565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516114079190612051565b60006040518083038185875af1925050503d8060008114611444576040519150601f19603f3d011682016040523d82523d6000602084013e611449565b606091505b5091509150611459828286611488565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611498578290506114e8565b6000835111156114ab5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114df91906120ac565b60405180910390fd5b9392505050565b600080fd5b6000819050919050565b611507816114f4565b811461151257600080fd5b50565b600081359050611524816114fe565b92915050565b6000602082840312156115405761153f6114ef565b5b600061154e84828501611515565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061158282611557565b9050919050565b61159281611577565b811461159d57600080fd5b50565b6000813590506115af81611589565b92915050565b60008115159050919050565b6115ca816115b5565b81146115d557600080fd5b50565b6000813590506115e7816115c1565b92915050565b600080600060608486031215611606576116056114ef565b5b6000611614868287016115a0565b935050602061162586828701611515565b9250506040611636868287016115d8565b9150509250925092565b611649816115b5565b82525050565b60006020820190506116646000830184611640565b92915050565b611673816114f4565b82525050565b600060208201905061168e600083018461166a565b92915050565b600061169f82611557565b9050919050565b6116af81611694565b82525050565b60006020820190506116ca60008301846116a6565b92915050565b6116d981611577565b82525050565b60006020820190506116f460008301846116d0565b92915050565b6000602082840312156117105761170f6114ef565b5b600061171e848285016115d8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611761578082015181840152602081019050611746565b83811115611770576000848401525b50505050565b6000601f19601f8301169050919050565b600061179282611727565b61179c8185611732565b93506117ac818560208601611743565b6117b581611776565b840191505092915050565b60006040820190506117d56000830185611640565b81810360208301526117e78184611787565b90509392505050565b6000819050919050565b600061181561181061180b84611557565b6117f0565b611557565b9050919050565b6000611827826117fa565b9050919050565b60006118398261181c565b9050919050565b6118498161182e565b82525050565b60006020820190506118646000830184611840565b92915050565b6000602082840312156118805761187f6114ef565b5b600061188e848285016115a0565b91505092915050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000611904602e83611897565b915061190f826118a8565b604082019050919050565b60006020820190508181036000830152611933816118f7565b9050919050565b6000819050919050565b600060ff82169050919050565b600061196c6119676119628461193a565b6117f0565b611944565b9050919050565b61197c81611951565b82525050565b60006020820190506119976000830184611973565b92915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006119d3601f83611897565b91506119de8261199d565b602082019050919050565b60006020820190508181036000830152611a02816119c6565b9050919050565b7f4f707352656164793a206f6e6c794f7073000000000000000000000000000000600082015250565b6000611a3f601183611897565b9150611a4a82611a09565b602082019050919050565b60006020820190508181036000830152611a6e81611a32565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611aaf826114f4565b9150611aba836114f4565b925082821015611acd57611acc611a75565b5b828203905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611b34602683611897565b9150611b3f82611ad8565b604082019050919050565b60006020820190508181036000830152611b6381611b27565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611ba0602083611897565b9150611bab82611b6a565b602082019050919050565b60006020820190508181036000830152611bcf81611b93565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611c32602b83611897565b9150611c3d82611bd6565b604082019050919050565b60006020820190508181036000830152611c6181611c25565b9050919050565b6000611c73826114f4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611ca557611ca4611a75565b5b600182019050919050565b600081519050611cbf816114fe565b92915050565b600081519050611cd481611589565b92915050565b60008060408385031215611cf157611cf06114ef565b5b6000611cff85828601611cb0565b9250506020611d1085828601611cc5565b9150509250929050565b611d2381611694565b8114611d2e57600080fd5b50565b600081519050611d4081611d1a565b92915050565b600060208284031215611d5c57611d5b6114ef565b5b6000611d6a84828501611d31565b91505092915050565b600081905092915050565b50565b6000611d8e600083611d73565b9150611d9982611d7e565b600082019050919050565b6000611daf82611d81565b9150819050919050565b7f4e6174697665207472616e73666572206661696c656400000000000000000000600082015250565b6000611def601683611897565b9150611dfa82611db9565b602082019050919050565b60006020820190508181036000830152611e1e81611de2565b9050919050565b6000604082019050611e3a60008301856116d0565b611e47602083018461166a565b9392505050565b600081519050611e5d816115c1565b92915050565b600060208284031215611e7957611e786114ef565b5b6000611e8784828501611e4e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611eec602a83611897565b9150611ef782611e90565b604082019050919050565b60006020820190508181036000830152611f1b81611edf565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611f7e602683611897565b9150611f8982611f22565b604082019050919050565b60006020820190508181036000830152611fad81611f71565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611fea601d83611897565b9150611ff582611fb4565b602082019050919050565b6000602082019050818103600083015261201981611fdd565b9050919050565b600061202b82611727565b6120358185611d73565b9350612045818560208601611743565b80840191505092915050565b600061205d8284612020565b915081905092915050565b600081519050919050565b600061207e82612068565b6120888185611897565b9350612098818560208601611743565b6120a181611776565b840191505092915050565b600060208201905081810360008301526120c68184612073565b90509291505056fea2646970667358221220bbb13070fc1e100f5f129121da2fe021d3b9ab7bec97bbfd5a0198885631e80e64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "canWork()": {
        "details": "Will be executed by keeper and before `work` method execution."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "timeFromLastExecution()": {
        "returns": {
          "_0": "seconds from last execution in a range of 900 seconds"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "work()": {
        "details": "possible do not use `nonReentrant` modifier if we have isTimePassFromLastExecution check and refreshLastWorkTime at start  as it inside `onlyWhenCanWork` modifier.  But do not will delete it as `canWork` can be overriden.  Possible to optimize this at the end contact"
      }
    },
    "version": 1
  },
  "userdoc": {
    "errors": {
      "CannotWorkNow()": [
        {
          "notice": "Someone tried to execute work function while `canWork` is `false`"
        }
      ],
      "PaybleWorkNotAllowed()": [
        {
          "notice": "Contract expect work will be prepayd, so it cannot pay for work"
        }
      ],
      "TimeMinimumBetweenExecutionsIncorrect(uint256)": [
        {
          "notice": "Given time minimum between execution must be greater then 1000"
        }
      ]
    },
    "events": {
      "Worked(address)": {
        "notice": "Job work function was executed by worker bot"
      }
    },
    "kind": "user",
    "methods": {
      "canWork()": {
        "notice": "If work can be executed by keeper at this moment returns true"
      },
      "checker()": {
        "notice": "Resolver checker which say if work can be performed and with which params."
      },
      "isPrepayd()": {
        "notice": "If job is preaped, then it not will try to pay on executed work."
      },
      "lastWorkTime()": {
        "notice": "Timestamp of last work execution block in seconds."
      },
      "minimumBetweenExecutions()": {
        "notice": "Mininmal time which must pass between executions of the job in seconds. Better set hours, but at least set to greater then 900 seconds,  node opperators able to manipulate timestamp in 900 seconds range, on some blockchains maybe bigger."
      },
      "payableWork()": {
        "notice": "Bot will call this method when `checker` returns `true`. Will pay caller `work` method stay as it is, to allow call id of-chain"
      },
      "timeFromLastExecution()": {
        "notice": "Time which pass from last exection"
      },
      "work()": {
        "notice": "Important work which will be executed by keeper."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 625,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 296,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "_status",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1443,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "lastWorkTime",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 1446,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "minimumBetweenExecutions",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 1792,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "ops",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IOps)1764"
      },
      {
        "astId": 1794,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "gelato",
        "offset": 0,
        "slot": "104",
        "type": "t_address_payable"
      },
      {
        "astId": 1337,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "isPrepayd",
        "offset": 20,
        "slot": "104",
        "type": "t_bool"
      },
      {
        "astId": 10,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "_owner",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "__gap",
        "offset": 0,
        "slot": "106",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1591,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "workMethodCalledCounter",
        "offset": 0,
        "slot": "155",
        "type": "t_uint256"
      },
      {
        "astId": 1594,
        "contract": "src/automation/example/SimpleGelatoJob.sol:SimpleGelatoJob",
        "label": "canWorkResult",
        "offset": 0,
        "slot": "156",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IOps)1764": {
        "encoding": "inplace",
        "label": "contract IOps",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}