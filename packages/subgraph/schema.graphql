type Vault @entity(immutable: false) @regularPolling {
  """
  The ID of the vault. Mainly used for subgraph internal indexing.
  """
  id: Bytes!

  """
  The blockchain address of the vault.
  """
  address: String!
  
  """
  The name of the vault.
  """
  name: String!
  
  """
  The symbol of the vault.
  """
  symbol: String!

  """
  Current version of protocol in semver notation.
  """
  version: String!
  
  """
  The number of decimal places for the vault's assets.
  """
  decimals: Int!

  """
  The total amount of shares in vault.
  @dev Requires decimals adjustment by token "decimals" field.
  """
  totalSupply: BigInt!

  """
  Amount of tokens that all borrowers have taken.
  @dev Requires decimals adjustment by token "decimals" field.
  """
  totalDebt: BigInt!

  """
  Amount of tokens that the Vault has (minus the locked profit).
  @dev Requires decimals adjustment by token "decimals" field.
  """
  totalAssets: BigInt!

  """
  Total amount of tokens that the Vault has (including locked profit).
  @dev Requires decimals adjustment by token "decimals" field.
  """
  fundAssets: BigInt!
  
  """
  BPS points used to make adjustments for percentage-like fields for Vault and Lender.
  @dev is actually stored Int, but the lender uses uint256 so as not to cause an overflow, use BigInt.
  """
  maxBps: BigInt!

  """
  Debt ratio for the Lender across all borrowers.
  @dev Requires decimals adjustment by "maxBps" field.
  """
  debtRatio: BigInt!

  """
  Total utilisation rate for the Vault across all strategies.
  @dev Requires decimals adjustment by "maxBps" field.
  """
  totalUtilisationRate: BigInt!

  """
  Last time a report occurred by any borrower.
  """
  lastReportTimestamp: BigInt!

  """ 
  All interest rates / fees allowed in the market. Interest rate should be in APY percentage.
  """
  rates: [InterestRate!]!

  """
  The underlying asset stored in the vault.
  """
  asset: Token!

}

"""
Token of standart ERC20, can be stored in vault.
"""
type Token @entity(immutable: true) { # when will have price metric which require regular updates need use @entity(immutable: false) @regularPolling
  """
  The ID of the token. Mainly used for subgraph internal indexing.
  """
  id: Bytes!

  """
  The blockchain address of the asset.
  """
  address: String!
  
  """
  The name of the asset.
  """
  name: String!
  
  """
  The symbol of the asset.
  """
  symbol: String!
  
  """
  The number of decimal places for the asset.
  """
  decimals: Int!

  """
  The price of the token.
  """
  price: Price!
}

type Price @entity(immutable: false) @regularPolling {
  """
  The ID of the price (same as Token ID).
  """
  id: Bytes!
  
  """
  The actual price of the token (scaled up to "decimals").
  """
  value: BigInt!

  """
  The decimals of the "value".
  """
  decimals: Int
}

enum InterestRateType {
  " Stable interest rate (e.g. Aave) "
  STABLE

  " Variable interest rate (e.g. Compound) "
  VARIABLE

  " Fixed interest rate (e.g. Notional) "
  FIXED
}

enum InterestRateSide {
  " Interest rate accrued by lenders "
  LENDER

  " Interest rate paid by borrowers "
  BORROWER
}


# Based on https://github.com/messari/subgraphs/tree/master/subgraphs/aave-forks and https://thegraph.com/explorer/subgraphs/84CvqQHYhydZzr2KSth8s1AFYpBRzUbVJXq6PWuZm9U9?view=Playground&chain=mainnet
"""
  Most markets only have a single interest rate given a specific type.
  However, fixed term lending protocols can have multiple rates with
  different duration/maturity per market. You can append a counter
  to the IDs to differentiate.
"""
type InterestRate @entity(immutable: false) @regularPolling {
  " { Market ID }-{ Interest rate side }-{ Interest rate type } "
  id: Bytes!

  """
  Interest rate per block scaled by 10^18
  @dev decimals hardcoded on lower levels
  """
  perBlock: BigInt!

  " The interest rate recalculated to APY terms per different time periods "
  apy: RewardAPY!

  " Duration of the loan in days. Only applies to fixed term lending (e.g. Notional) "
  duration: Int

  " Maturity of the loan in block height. Only applies to fixed term lending (e.g. Notional) "
  maturityBlock: BigInt

  " The party the interest is paid to / received from "
  side: InterestRateSide!

  " The type of interest rate (e.g. stable, fixed, variable, etc) "
  type: InterestRateType!
}

" The interest rate recalculated to APY terms per different time periods "
type RewardAPY @entity(immutable: false) @regularPolling {
  " { InterestRate.id } "
  id: Bytes!

  " Decimals of the APY values, mainly "
  decimals: Int!

  " Daily interest rate, represented as percentage "
  daily: BigInt!

  " Weekly interest rate, represented as percentage "
  weekly: BigInt!

  " Monthly interest rate, represented as percentage "
  monthly: BigInt!

  " Yearly interest rate, represented as percentage "
  yearly: BigInt!
}


type AdminChanged @entity(immutable: true) {
  id: Bytes!
  previousAdmin: Bytes! # address
  newAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BeaconUpgraded @entity(immutable: true) {
  id: Bytes!
  beacon: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  version: String!
}
type ContractAdminChanged @entity(immutable: true) {
  id: Bytes!
  previousAdmin: Bytes! # address
  newAdmin: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuthorizedOperator @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  tokenHolder: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContractBeaconUpgraded @entity(immutable: true) {
  id: Bytes!
  beacon: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BorrowerDebtManagementReported @entity(immutable: true) {
  id: Bytes!
  borrower: Bytes! # address
  debtPayment: BigInt! # uint256
  freeFunds: BigInt! # uint256
  fundsGiven: BigInt! # uint256
  fundsTaken: BigInt! # uint256
  loss: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Burned @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  amount: BigInt! # uint256
  data: Bytes! # bytes
  operatorData: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LockedProfitReleaseRateChanged @entity(immutable: true) {
  id: Bytes!
  rate: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Minted @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  data: Bytes! # bytes
  operatorData: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RevokedOperator @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  tokenHolder: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Sent @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  amount: BigInt! # uint256
  data: Bytes! # bytes
  operatorData: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyAdded @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  debtRatio: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyRemoved @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  fromQueueOnly: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyReturnedToQueue @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StrategyRevoked @entity(immutable: true) {
  id: Bytes!
  strategy: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContractUpgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  receiver: Bytes! # address
  owner: Bytes! # address
  assets: BigInt! # uint256
  shares: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
